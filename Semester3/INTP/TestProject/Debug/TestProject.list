
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010690  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08010820  08010820  00011820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cd0  08010cd0  000149fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010cd0  08010cd0  00011cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cd8  08010cd8  000149fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd8  08010cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010cdc  08010cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000029fc  20000000  08010ce0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000149fc  2**0
                  CONTENTS
 10 .bss          00005a40  200029fc  200029fc  000149fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000843c  2000843c  000149fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000149fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027af3  00000000  00000000  00014a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c09  00000000  00000000  0003c51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b0  00000000  00000000  00042128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001928  00000000  00000000  000441d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008da7  00000000  00000000  00045b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000298a6  00000000  00000000  0004e8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2278  00000000  00000000  0007814d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a3c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b74  00000000  00000000  0015a408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00163f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200029fc 	.word	0x200029fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010808 	.word	0x08010808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002a00 	.word	0x20002a00
 80001cc:	08010808 	.word	0x08010808

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fecd 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f871 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f9bb 	bl	8001220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eaa:	f000 f8d7 	bl	800105c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000eae:	f000 f903 	bl	80010b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000eb2:	f000 f945 	bl	8001140 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000eb6:	f000 f979 	bl	80011ac <MX_TIM7_Init>
  MX_RNG_Init();
 8000eba:	f000 f92d 	bl	8001118 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000ebe:	f00c fc63 	bl	800d788 <LCD_Init>
  LCD_ClearDisplay( RED );
 8000ec2:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000ec6:	f00c fd41 	bl	800d94c <LCD_ClearDisplay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eca:	f008 ff9f 	bl	8009e0c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of swTimer */
  swTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &swTimer_attributes);
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <main+0xb0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	481d      	ldr	r0, [pc, #116]	@ (8000f4c <main+0xb4>)
 8000ed6:	f009 f8a5 	bl	800a024 <osTimerNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <main+0xb8>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osStatus_t mySWTimer;
  mySWTimer = osTimerStart(swTimerHandle, 100);
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <main+0xb8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2164      	movs	r1, #100	@ 0x64
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f009 f918 	bl	800a11c <osTimerStart>
 8000eec:	6078      	str	r0, [r7, #4]
  if (mySWTimer == osOK) { /* I hate warnings */ }
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of hinweg */
  hinwegHandle = osMessageQueueNew (32, sizeof(uint16_t), &hinweg_attributes);
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <main+0xbc>)
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f009 f940 	bl	800a178 <osMessageQueueNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <main+0xc0>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of rueckweg */
  rueckwegHandle = osMessageQueueNew (32, sizeof(uint16_t), &rueckweg_attributes);
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <main+0xc4>)
 8000f00:	2102      	movs	r1, #2
 8000f02:	2020      	movs	r0, #32
 8000f04:	f009 f938 	bl	800a178 <osMessageQueueNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <main+0xc8>)
 8000f0c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f0e:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <main+0xcc>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4815      	ldr	r0, [pc, #84]	@ (8000f68 <main+0xd0>)
 8000f14:	f008 ffc4 	bl	8009ea0 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a14      	ldr	r2, [pc, #80]	@ (8000f6c <main+0xd4>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of producer */
  producerHandle = osThreadNew(StartProducer, NULL, &producer_attributes);
 8000f1e:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <main+0xd8>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <main+0xdc>)
 8000f24:	f008 ffbc 	bl	8009ea0 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <main+0xe0>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of consumer */
  consumerHandle = osThreadNew(StartConsumer, NULL, &consumer_attributes);
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <main+0xe4>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <main+0xe8>)
 8000f34:	f008 ffb4 	bl	8009ea0 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <main+0xec>)
 8000f3c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f3e:	f008 ff89 	bl	8009e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f42:	bf00      	nop
 8000f44:	e7fd      	b.n	8000f42 <main+0xaa>
 8000f46:	bf00      	nop
 8000f48:	08010934 	.word	0x08010934
 8000f4c:	0800157d 	.word	0x0800157d
 8000f50:	200030c8 	.word	0x200030c8
 8000f54:	08010904 	.word	0x08010904
 8000f58:	200030c0 	.word	0x200030c0
 8000f5c:	0801091c 	.word	0x0801091c
 8000f60:	200030c4 	.word	0x200030c4
 8000f64:	08010898 	.word	0x08010898
 8000f68:	0800141d 	.word	0x0800141d
 8000f6c:	20002b64 	.word	0x20002b64
 8000f70:	080108bc 	.word	0x080108bc
 8000f74:	08001461 	.word	0x08001461
 8000f78:	20002b68 	.word	0x20002b68
 8000f7c:	080108e0 	.word	0x080108e0
 8000f80:	08001505 	.word	0x08001505
 8000f84:	20002e14 	.word	0x20002e14

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2230      	movs	r2, #48	@ 0x30
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00d fbcd 	bl	800e736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <SystemClock_Config+0xcc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <SystemClock_Config+0xcc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <SystemClock_Config+0xd0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ffc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001000:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001006:	2307      	movs	r3, #7
 8001008:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	4618      	mov	r0, r3
 8001010:	f004 f85c 	bl	80050cc <HAL_RCC_OscConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800101a:	f000 facb 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2302      	movs	r3, #2
 8001024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800102a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001034:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2105      	movs	r1, #5
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fabd 	bl	80055bc <HAL_RCC_ClockConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001048:	f000 fab4 	bl	80015b4 <Error_Handler>
  }
}
 800104c:	bf00      	nop
 800104e:	3750      	adds	r7, #80	@ 0x50
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40007000 	.word	0x40007000

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f003 fa33 	bl	8004504 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 fa86 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20002a18 	.word	0x20002a18
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <MX_I2S3_Init+0x54>)
 80010be:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <MX_I2S3_Init+0x58>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010c2:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_I2S3_Init+0x54>)
 80010c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <MX_I2S3_Init+0x54>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_I2S3_Init+0x54>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <MX_I2S3_Init+0x54>)
 80010d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <MX_I2S3_Init+0x54>)
 80010e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <MX_I2S3_Init+0x5c>)
 80010e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <MX_I2S3_Init+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010ea:	4b08      	ldr	r3, [pc, #32]	@ (800110c <MX_I2S3_Init+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_I2S3_Init+0x54>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_I2S3_Init+0x54>)
 80010f8:	f003 fb48 	bl	800478c <HAL_I2S_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001102:	f000 fa57 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20002a6c 	.word	0x20002a6c
 8001110:	40003c00 	.word	0x40003c00
 8001114:	00017700 	.word	0x00017700

08001118 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_RNG_Init+0x20>)
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <MX_RNG_Init+0x24>)
 8001120:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_RNG_Init+0x20>)
 8001124:	f004 fdca 	bl	8005cbc <HAL_RNG_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800112e:	f000 fa41 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20002ab4 	.word	0x20002ab4
 800113c:	50060800 	.word	0x50060800

08001140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001146:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <MX_SPI1_Init+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800116c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800118c:	220a      	movs	r2, #10
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001192:	f004 fe13 	bl	8005dbc <HAL_SPI_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800119c:	f000 fa0a 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20002ac4 	.word	0x20002ac4
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011bc:	4a17      	ldr	r2, [pc, #92]	@ (800121c <MX_TIM7_Init+0x70>)
 80011be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011c2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80011c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80011d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011dc:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011de:	f004 fe76 	bl	8005ece <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80011e8:	f000 f9e4 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <MX_TIM7_Init+0x6c>)
 80011fa:	f005 f8eb 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 f9d6 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <MX_TIM7_Init+0x6c>)
 800120a:	f004 feaf 	bl	8005f6c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20002b1c 	.word	0x20002b1c
 800121c:	40001400 	.word	0x40001400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	4b72      	ldr	r3, [pc, #456]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a71      	ldr	r2, [pc, #452]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b6f      	ldr	r3, [pc, #444]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b6b      	ldr	r3, [pc, #428]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a6a      	ldr	r2, [pc, #424]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b68      	ldr	r3, [pc, #416]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b64      	ldr	r3, [pc, #400]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a63      	ldr	r2, [pc, #396]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b61      	ldr	r3, [pc, #388]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b5d      	ldr	r3, [pc, #372]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a5c      	ldr	r2, [pc, #368]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b5a      	ldr	r3, [pc, #360]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a55      	ldr	r2, [pc, #340]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001404 <MX_GPIO_Init+0x1e4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	4849      	ldr	r0, [pc, #292]	@ (8001408 <MX_GPIO_Init+0x1e8>)
 80012e4:	f000 ffa6 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2101      	movs	r1, #1
 80012ec:	4847      	ldr	r0, [pc, #284]	@ (800140c <MX_GPIO_Init+0x1ec>)
 80012ee:	f000 ffa1 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012f2:	2200      	movs	r2, #0
 80012f4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80012f8:	4845      	ldr	r0, [pc, #276]	@ (8001410 <MX_GPIO_Init+0x1f0>)
 80012fa:	f000 ff9b 	bl	8002234 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012fe:	2308      	movs	r3, #8
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	483c      	ldr	r0, [pc, #240]	@ (8001408 <MX_GPIO_Init+0x1e8>)
 8001316:	f000 fdd9 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800131a:	2301      	movs	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4836      	ldr	r0, [pc, #216]	@ (800140c <MX_GPIO_Init+0x1ec>)
 8001332:	f000 fdcb 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001346:	2305      	movs	r3, #5
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	482e      	ldr	r0, [pc, #184]	@ (800140c <MX_GPIO_Init+0x1ec>)
 8001352:	f000 fdbb 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001356:	2301      	movs	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800135a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	482a      	ldr	r0, [pc, #168]	@ (8001414 <MX_GPIO_Init+0x1f4>)
 800136c:	f000 fdae 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001370:	2304      	movs	r3, #4
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4825      	ldr	r0, [pc, #148]	@ (8001418 <MX_GPIO_Init+0x1f8>)
 8001384:	f000 fda2 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139a:	2305      	movs	r3, #5
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	481c      	ldr	r0, [pc, #112]	@ (8001418 <MX_GPIO_Init+0x1f8>)
 80013a6:	f000 fd91 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80013ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4813      	ldr	r0, [pc, #76]	@ (8001410 <MX_GPIO_Init+0x1f0>)
 80013c4:	f000 fd82 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013c8:	2320      	movs	r3, #32
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_GPIO_Init+0x1f0>)
 80013dc:	f000 fd76 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013e4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_GPIO_Init+0x1e8>)
 80013f6:	f000 fd69 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40021000 	.word	0x40021000
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400

0800141c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001424:	f00b fe10 	bl	800d048 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while( 1 )
  {
	osDelay(100);
 8001428:	2064      	movs	r0, #100	@ 0x64
 800142a:	f008 fdcb 	bl	8009fc4 <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 800142e:	2101      	movs	r1, #1
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <StartDefaultTask+0x3c>)
 8001432:	f000 fee7 	bl	8002204 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <StartDefaultTask+0x2c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800143c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <StartDefaultTask+0x40>)
 8001442:	f000 ff10 	bl	8002266 <HAL_GPIO_TogglePin>
 8001446:	e7ef      	b.n	8001428 <StartDefaultTask+0xc>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144e:	4803      	ldr	r0, [pc, #12]	@ (800145c <StartDefaultTask+0x40>)
 8001450:	f000 fef0 	bl	8002234 <HAL_GPIO_WritePin>
	osDelay(100);
 8001454:	e7e8      	b.n	8001428 <StartDefaultTask+0xc>
 8001456:	bf00      	nop
 8001458:	40020000 	.word	0x40020000
 800145c:	40020c00 	.word	0x40020c00

08001460 <StartProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProducer */
void StartProducer(void *argument)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b092      	sub	sp, #72	@ 0x48
 8001464:	af02      	add	r7, sp, #8
 8001466:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint16_t randInt;
  uint16_t myRandInt;
  for(;;)
  {
	HAL_RNG_GenerateRandomNumber(&hrng, &randInt);
 8001468:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800146c:	4619      	mov	r1, r3
 800146e:	4820      	ldr	r0, [pc, #128]	@ (80014f0 <StartProducer+0x90>)
 8001470:	f004 fc4e 	bl	8005d10 <HAL_RNG_GenerateRandomNumber>
	myRandInt = randInt % 10;
 8001474:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <StartProducer+0x94>)
 8001478:	fba3 1302 	umull	r1, r3, r3, r2
 800147c:	08d9      	lsrs	r1, r3, #3
 800147e:	460b      	mov	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b29b      	uxth	r3, r3
 800148a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	osMessageQueuePut(hinwegHandle, &myRandInt, 0, osWaitForever);
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <StartProducer+0x98>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2200      	movs	r2, #0
 800149a:	f008 fee1 	bl	800a260 <osMessageQueuePut>
	if(myRandInt == 0) {
 800149e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d11f      	bne.n	80014e4 <StartProducer+0x84>
		uint16_t result;
		osMessageQueueGet(rueckwegHandle, &result, 0, osWaitForever);
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <StartProducer+0x9c>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	2200      	movs	r2, #0
 80014b2:	f008 ff35 	bl	800a320 <osMessageQueueGet>
		char buffer2[50];
		sprintf(buffer2, "Mittelwert: %ld", result);
 80014b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80014b8:	461a      	mov	r2, r3
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4910      	ldr	r1, [pc, #64]	@ (8001500 <StartProducer+0xa0>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00d f8d5 	bl	800e670 <siprintf>
		LCD_ClearDisplay( RED );
 80014c6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80014ca:	f00c fa3f 	bl	800d94c <LCD_ClearDisplay>
		LCD_WriteString( 10, 10, WHITE, RED, buffer2);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	210a      	movs	r1, #10
 80014de:	200a      	movs	r0, #10
 80014e0:	f00c fac2 	bl	800da68 <LCD_WriteString>
	}
	osDelay(1000);
 80014e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e8:	f008 fd6c 	bl	8009fc4 <osDelay>
	HAL_RNG_GenerateRandomNumber(&hrng, &randInt);
 80014ec:	e7bc      	b.n	8001468 <StartProducer+0x8>
 80014ee:	bf00      	nop
 80014f0:	20002ab4 	.word	0x20002ab4
 80014f4:	cccccccd 	.word	0xcccccccd
 80014f8:	200030c0 	.word	0x200030c0
 80014fc:	200030c4 	.word	0x200030c4
 8001500:	08010860 	.word	0x08010860

08001504 <StartConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumer */
void StartConsumer(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConsumer */
  /* Infinite loop */
  uint16_t number;
  uint32_t amount = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t count = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  uint16_t mittelwert = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	81bb      	strh	r3, [r7, #12]
  for(;;)
  {
	osMessageQueueGet(hinwegHandle, &number, 0, osWaitForever);
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <StartConsumer+0x70>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f107 010e 	add.w	r1, r7, #14
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	2200      	movs	r2, #0
 8001526:	f008 fefb 	bl	800a320 <osMessageQueueGet>
	if(number != 0) {
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <StartConsumer+0x3e>
		amount += number;
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	461a      	mov	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4413      	add	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
		count++;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3301      	adds	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	e012      	b.n	8001568 <StartConsumer+0x64>
	} else {
		mittelwert = amount/count;
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	81bb      	strh	r3, [r7, #12]
		osMessageQueuePut(rueckwegHandle, &mittelwert, 0, osWaitForever);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <StartConsumer+0x74>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	f107 010c 	add.w	r1, r7, #12
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	2200      	movs	r2, #0
 800155c:	f008 fe80 	bl	800a260 <osMessageQueuePut>
		amount = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
		count = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
	}

    osDelay(1000);
 8001568:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156c:	f008 fd2a 	bl	8009fc4 <osDelay>
	osMessageQueueGet(hinwegHandle, &number, 0, osWaitForever);
 8001570:	e7d2      	b.n	8001518 <StartConsumer+0x14>
 8001572:	bf00      	nop
 8001574:	200030c0 	.word	0x200030c0
 8001578:	200030c4 	.word	0x200030c4

0800157c <Callback01>:
  /* USER CODE END StartConsumer */
}

/* Callback01 function */
void Callback01(void *argument)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
  /* USER CODE END Callback01 */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
		//LCD_ClearDisplay( RED );
		//LCD_WriteString( 10, 10, WHITE, RED, "Schnitzel mit Pommes!");
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a2:	f000 fb6d 	bl	8001c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <Error_Handler+0x8>

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_MspInit+0x54>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a11      	ldr	r2, [pc, #68]	@ (8001614 <HAL_MspInit+0x54>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_MspInit+0x54>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_MspInit+0x54>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <HAL_MspInit+0x54>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <HAL_MspInit+0x54>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	210f      	movs	r1, #15
 8001602:	f06f 0001 	mvn.w	r0, #1
 8001606:	f000 fc37 	bl	8001e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	@ (800169c <HAL_I2C_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001656:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <HAL_I2C_MspInit+0x8c>)
 8001674:	f000 fc2a 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 8001682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_I2C_MspInit+0x88>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a31      	ldr	r2, [pc, #196]	@ (8001798 <HAL_I2S_MspInit+0xf0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d15a      	bne.n	800178e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016d8:	2301      	movs	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016dc:	23c0      	movs	r3, #192	@ 0xc0
 80016de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 f9a5 	bl	8005a38 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80016f4:	f7ff ff5e 	bl	80015b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 8001702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001706:	6413      	str	r3, [r2, #64]	@ 0x40
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	4a18      	ldr	r2, [pc, #96]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_I2S_MspInit+0xf4>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800174c:	2310      	movs	r3, #16
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800175c:	2306      	movs	r3, #6
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	480e      	ldr	r0, [pc, #56]	@ (80017a0 <HAL_I2S_MspInit+0xf8>)
 8001768:	f000 fbb0 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800176c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800177e:	2306      	movs	r3, #6
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <HAL_I2S_MspInit+0xfc>)
 800178a:	f000 fb9f 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	@ 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40003c00 	.word	0x40003c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020800 	.word	0x40020800

080017a8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_RNG_MspInit+0x3c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10d      	bne.n	80017d6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_RNG_MspInit+0x40>)
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_RNG_MspInit+0x40>)
 80017c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <HAL_RNG_MspInit+0x40>)
 80017cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	50060800 	.word	0x50060800
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	@ (8001870 <HAL_SPI_MspInit+0x84>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12b      	bne.n	8001866 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 8001818:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800181c:	6453      	str	r3, [r2, #68]	@ 0x44
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_SPI_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001846:	23e0      	movs	r3, #224	@ 0xe0
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001856:	2305      	movs	r3, #5
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <HAL_SPI_MspInit+0x8c>)
 8001862:	f000 fb33 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40013000 	.word	0x40013000
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <HAL_TIM_Base_MspInit+0x48>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d115      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a0c      	ldr	r2, [pc, #48]	@ (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <HAL_TIM_Base_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	2037      	movs	r0, #55	@ 0x37
 80018b0:	f000 fae2 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018b4:	2037      	movs	r0, #55	@ 0x37
 80018b6:	f000 fafb 	bl	8001eb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40001400 	.word	0x40001400
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	@ 0x38
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <HAL_InitTick+0xe4>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a32      	ldr	r2, [pc, #200]	@ (80019b0 <HAL_InitTick+0xe4>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <HAL_InitTick+0xe4>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f8:	f107 0210 	add.w	r2, r7, #16
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f004 f866 	bl	80059d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001912:	f004 f84b 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 8001916:	6378      	str	r0, [r7, #52]	@ 0x34
 8001918:	e004      	b.n	8001924 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800191a:	f004 f847 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 800191e:	4603      	mov	r3, r0
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001926:	4a23      	ldr	r2, [pc, #140]	@ (80019b4 <HAL_InitTick+0xe8>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	3b01      	subs	r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_InitTick+0xec>)
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_InitTick+0xf0>)
 8001936:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <HAL_InitTick+0xec>)
 800193a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800193e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001940:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <HAL_InitTick+0xec>)
 8001942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001944:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <HAL_InitTick+0xec>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_InitTick+0xec>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <HAL_InitTick+0xec>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001958:	4817      	ldr	r0, [pc, #92]	@ (80019b8 <HAL_InitTick+0xec>)
 800195a:	f004 fab8 	bl	8005ece <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11b      	bne.n	80019a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800196c:	4812      	ldr	r0, [pc, #72]	@ (80019b8 <HAL_InitTick+0xec>)
 800196e:	f004 fafd 	bl	8005f6c <HAL_TIM_Base_Start_IT>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800197c:	2b00      	cmp	r3, #0
 800197e:	d111      	bne.n	80019a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001980:	2036      	movs	r0, #54	@ 0x36
 8001982:	f000 fa95 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d808      	bhi.n	800199e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	2036      	movs	r0, #54	@ 0x36
 8001992:	f000 fa71 	bl	8001e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <HAL_InitTick+0xf4>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e002      	b.n	80019a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3738      	adds	r7, #56	@ 0x38
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	200030cc 	.word	0x200030cc
 80019bc:	40001000 	.word	0x40001000
 80019c0:	20000004 	.word	0x20000004

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <NMI_Handler+0x4>

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <MemManage_Handler+0x4>

080019dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <TIM6_DAC_IRQHandler+0x10>)
 8001a02:	f004 fb23 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200030cc 	.word	0x200030cc

08001a10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <TIM7_IRQHandler+0x10>)
 8001a16:	f004 fb19 	bl	800604c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20002b1c 	.word	0x20002b1c

08001a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <OTG_FS_IRQHandler+0x10>)
 8001a2a:	f000 ff17 	bl	800285c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20007f10 	.word	0x20007f10

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a52:	f00c ff29 	bl	800e8a8 <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7a:	bf00      	nop
 8001a7c:	e7fd      	b.n	8001a7a <_exit+0x12>

08001a7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e00a      	b.n	8001aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a90:	f3af 8000 	nop.w
 8001a94:	4601      	mov	r1, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbf0      	blt.n	8001a90 <_read+0x12>
  }

  return len;
 8001aae:	687b      	ldr	r3, [r7, #4]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e009      	b.n	8001ade <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	60ba      	str	r2, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbf1      	blt.n	8001aca <_write+0x12>
  }
  return len;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_close>:

int _close(int file)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b18:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_isatty>:

int _isatty(int file)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f00c fe8e 	bl	800e8a8 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20020000 	.word	0x20020000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20003114 	.word	0x20003114
 8001bc0:	20008440 	.word	0x20008440

08001bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bec:	f7ff ffea 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	@ (8001c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f00c fe4d 	bl	800e8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7ff f93d 	bl	8000e98 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	200029fc 	.word	0x200029fc
  ldr r2, =_sidata
 8001c2c:	08010ce0 	.word	0x08010ce0
  ldr r2, =_sbss
 8001c30:	200029fc 	.word	0x200029fc
  ldr r4, =_ebss
 8001c34:	2000843c 	.word	0x2000843c

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_Init+0x40>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_Init+0x40>)
 8001c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_Init+0x40>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f8fc 	bl	8001e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f7ff fe2e 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7ff fca6 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20003118 	.word	0x20003118

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20003118 	.word	0x20003118

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4907      	ldr	r1, [pc, #28]	@ (8001da4 <__NVIC_EnableIRQ+0x38>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	@ (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	@ (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff4c 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8a:	f7ff ff61 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68b9      	ldr	r1, [r7, #8]
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	f7ff ffb1 	bl	8001dfc <NVIC_EncodePriority>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff80 	bl	8001da8 <__NVIC_SetPriority>
}
 8001ea8:	bf00      	nop
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff54 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b60      	ldr	r3, [pc, #384]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a5f      	ldr	r2, [pc, #380]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5b      	ldr	r2, [pc, #364]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_GPIO_Init+0x314>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	@ (80021e4 <HAL_GPIO_Init+0x318>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	@ (80021e8 <HAL_GPIO_Init+0x31c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	@ (80021ec <HAL_GPIO_Init+0x320>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	@ (80021f8 <HAL_GPIO_Init+0x32c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	@ (80021fc <HAL_GPIO_Init+0x330>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	@ (80021dc <HAL_GPIO_Init+0x310>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002136:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213c:	4b30      	ldr	r3, [pc, #192]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_GPIO_Init+0x334>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40021c00 	.word	0x40021c00
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002278:	887a      	ldrh	r2, [r7, #2]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43d9      	mvns	r1, r3
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	400b      	ands	r3, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af02      	add	r7, sp, #8
 80022a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e059      	b.n	8002360 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00a ff12 	bl	800d0f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2203      	movs	r2, #3
 80022d0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022da:	d102      	bne.n	80022e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f979 	bl	80065de <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7c1a      	ldrb	r2, [r3, #16]
 80022f4:	f88d 2000 	strb.w	r2, [sp]
 80022f8:	3304      	adds	r3, #4
 80022fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fc:	f004 f8fa 	bl	80064f4 <USB_CoreInit>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e026      	b.n	8002360 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f971 	bl	8006600 <USB_SetCurrentMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e017      	b.n	8002360 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7c1a      	ldrb	r2, [r3, #16]
 8002338:	f88d 2000 	strb.w	r2, [sp]
 800233c:	3304      	adds	r3, #4
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	f004 fb14 	bl	800696c <USB_HostInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e004      	b.n	8002360 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b08b      	sub	sp, #44	@ 0x2c
 800236c:	af04      	add	r7, sp, #16
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	460b      	mov	r3, r1
 800237c:	70bb      	strb	r3, [r7, #2]
 800237e:	4613      	mov	r3, r2
 8002380:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002382:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002384:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_HCD_HC_Init+0x2c>
 8002390:	2302      	movs	r3, #2
 8002392:	e09d      	b.n	80024d0 <HAL_HCD_HC_Init+0x168>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	3319      	adds	r3, #25
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	3314      	adds	r3, #20
 80023c0:	787a      	ldrb	r2, [r7, #1]
 80023c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3315      	adds	r3, #21
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3326      	adds	r3, #38	@ 0x26
 80023e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80023ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	78bb      	ldrb	r3, [r7, #2]
 80023f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3316      	adds	r3, #22
 8002406:	4602      	mov	r2, r0
 8002408:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fbc8 	bl	8002ba4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002414:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0a      	bge.n	8002432 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3317      	adds	r3, #23
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	e009      	b.n	8002446 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3317      	adds	r3, #23
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f004 fbf2 	bl	8006c34 <USB_GetHostSpeed>
 8002450:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002452:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10b      	bne.n	8002472 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800245a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_HCD_HC_Init+0x10a>
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d104      	bne.n	8002472 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2bbc      	cmp	r3, #188	@ 0xbc
 800246c:	d901      	bls.n	8002472 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800246e:	23bc      	movs	r3, #188	@ 0xbc
 8002470:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3318      	adds	r3, #24
 8002482:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	b298      	uxth	r0, r3
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	4602      	mov	r2, r0
 800249e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	787c      	ldrb	r4, [r7, #1]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	78f9      	ldrb	r1, [r7, #3]
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4623      	mov	r3, r4
 80024be:	f004 fbe1 	bl	8006c84 <USB_HC_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}

080024d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_HCD_HC_Halt+0x1e>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e00f      	b.n	8002516 <HAL_HCD_HC_Halt+0x3e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f004 ff73 	bl	80073f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	70fb      	strb	r3, [r7, #3]
 8002532:	460b      	mov	r3, r1
 8002534:	70bb      	strb	r3, [r7, #2]
 8002536:	4613      	mov	r3, r2
 8002538:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3317      	adds	r3, #23
 800254a:	78ba      	ldrb	r2, [r7, #2]
 800254c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3326      	adds	r3, #38	@ 0x26
 800255e:	787a      	ldrb	r2, [r7, #1]
 8002560:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d114      	bne.n	8002592 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	332a      	adds	r3, #42	@ 0x2a
 8002578:	2203      	movs	r2, #3
 800257a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3319      	adds	r3, #25
 800258c:	7f3a      	ldrb	r2, [r7, #28]
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e009      	b.n	80025a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	332a      	adds	r3, #42	@ 0x2a
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025a6:	787b      	ldrb	r3, [r7, #1]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	f200 8102 	bhi.w	80027b2 <HAL_HCD_HC_SubmitRequest+0x292>
 80025ae:	a201      	add	r2, pc, #4	@ (adr r2, 80025b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	0800279d 	.word	0x0800279d
 80025bc:	08002689 	.word	0x08002689
 80025c0:	08002713 	.word	0x08002713
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80025c4:	7c3b      	ldrb	r3, [r7, #16]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 80f5 	bne.w	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80025cc:	78bb      	ldrb	r3, [r7, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d12d      	bne.n	800262e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80025d2:	8b3b      	ldrh	r3, [r7, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	333d      	adds	r3, #61	@ 0x3d
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	333d      	adds	r3, #61	@ 0x3d
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	332a      	adds	r3, #42	@ 0x2a
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002616:	e0ce      	b.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	332a      	adds	r3, #42	@ 0x2a
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
      break;
 800262c:	e0c3      	b.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	331a      	adds	r3, #26
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 80b8 	bne.w	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	333c      	adds	r3, #60	@ 0x3c
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	332a      	adds	r3, #42	@ 0x2a
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
      break;
 8002670:	e0a1      	b.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	332a      	adds	r3, #42	@ 0x2a
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e096      	b.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002688:	78bb      	ldrb	r3, [r7, #2]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d120      	bne.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	333d      	adds	r3, #61	@ 0x3d
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	332a      	adds	r3, #42	@ 0x2a
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026b8:	e07e      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	332a      	adds	r3, #42	@ 0x2a
 80026ca:	2202      	movs	r2, #2
 80026cc:	701a      	strb	r2, [r3, #0]
      break;
 80026ce:	e073      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	333c      	adds	r3, #60	@ 0x3c
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	332a      	adds	r3, #42	@ 0x2a
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
      break;
 80026fa:	e05d      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	332a      	adds	r3, #42	@ 0x2a
 800270c:	2202      	movs	r2, #2
 800270e:	701a      	strb	r2, [r3, #0]
      break;
 8002710:	e052      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002712:	78bb      	ldrb	r3, [r7, #2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d120      	bne.n	800275a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	333d      	adds	r3, #61	@ 0x3d
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	332a      	adds	r3, #42	@ 0x2a
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002742:	e039      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	332a      	adds	r3, #42	@ 0x2a
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e02e      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	333c      	adds	r3, #60	@ 0x3c
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	332a      	adds	r3, #42	@ 0x2a
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
      break;
 8002784:	e018      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	332a      	adds	r3, #42	@ 0x2a
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
      break;
 800279a:	e00d      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	332a      	adds	r3, #42	@ 0x2a
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
      break;
 80027b0:	e002      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80027b6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	332c      	adds	r3, #44	@ 0x2c
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	8b39      	ldrh	r1, [r7, #24]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4403      	add	r3, r0
 80027dc:	3334      	adds	r3, #52	@ 0x34
 80027de:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	334c      	adds	r3, #76	@ 0x4c
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3338      	adds	r3, #56	@ 0x38
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3315      	adds	r3, #21
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334d      	adds	r3, #77	@ 0x4d
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	3310      	adds	r3, #16
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	1d19      	adds	r1, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	799b      	ldrb	r3, [r3, #6]
 800284a:	461a      	mov	r2, r3
 800284c:	f004 fb46 	bl	8006edc <USB_HC_StartXfer>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop

0800285c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f004 f83a 	bl	80068ec <USB_GetMode>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	f040 80fb 	bne.w	8002a76 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fffd 	bl	8006884 <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80f1 	beq.w	8002a74 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f003 fff4 	bl	8006884 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028a6:	d104      	bne.n	80028b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ffe4 	bl	8006884 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028c6:	d104      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 ffd4 	bl	8006884 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e6:	d104      	bne.n	80028f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 ffc4 	bl	8006884 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d103      	bne.n	800290e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2202      	movs	r2, #2
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f003 ffb6 	bl	8006884 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800291e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002922:	d120      	bne.n	8002966 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800292c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d113      	bne.n	8002966 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800293e:	2110      	movs	r1, #16
 8002940:	6938      	ldr	r0, [r7, #16]
 8002942:	f003 fea9 	bl	8006698 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002946:	6938      	ldr	r0, [r7, #16]
 8002948:	f003 fed8 	bl	80066fc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7a5b      	ldrb	r3, [r3, #9]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d105      	bne.n	8002960 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f004 f8ca 	bl	8006af4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f00a fc43 	bl	800d1ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 ff8a 	bl	8006884 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297a:	d102      	bne.n	8002982 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f001 fd4d 	bl	800441c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f003 ff7c 	bl	8006884 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d106      	bne.n	80029a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f00a fc0c 	bl	800d1b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 ff6b 	bl	8006884 <USB_ReadInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029b8:	d139      	bne.n	8002a2e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fd06 	bl	80073d0 <USB_HC_ReadInterrupt>
 80029c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e025      	b.n	8002a18 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d018      	beq.n	8002a12 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f6:	d106      	bne.n	8002a06 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f905 	bl	8002c0e <HCD_HC_IN_IRQHandler>
 8002a04:	e005      	b.n	8002a12 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 ff67 	bl	80038e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	795b      	ldrb	r3, [r3, #5]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d3d3      	bcc.n	80029cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 ff26 	bl	8006884 <USB_ReadInterrupts>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d101      	bne.n	8002a46 <HAL_HCD_IRQHandler+0x1ea>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_HCD_IRQHandler+0x1ec>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d014      	beq.n	8002a76 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0210 	bic.w	r2, r2, #16
 8002a5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f001 fbfe 	bl	800425e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0210 	orr.w	r2, r2, #16
 8002a70:	619a      	str	r2, [r3, #24]
 8002a72:	e000      	b.n	8002a76 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a74:	bf00      	nop
    }
  }
}
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_HCD_Start+0x16>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e013      	b.n	8002aba <HAL_HCD_Start+0x3e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 f88e 	bl	8006bc2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fd86 	bl	80065bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_HCD_Stop+0x16>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e00d      	b.n	8002af4 <HAL_HCD_Stop+0x32>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 fde1 	bl	80076ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f830 	bl	8006b6e <USB_ResetPort>
 8002b0e:	4603      	mov	r3, r0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334c      	adds	r3, #76	@ 0x4c
 8002b34:	781b      	ldrb	r3, [r3, #0]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3338      	adds	r3, #56	@ 0x38
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 f872 	bl	8006c62 <USB_GetCurrentFrame>
 8002b7e:	4603      	mov	r3, r0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 f84d 	bl	8006c34 <USB_GetHostSpeed>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	331a      	adds	r3, #26
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	331b      	adds	r3, #27
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3325      	adds	r3, #37	@ 0x25
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3324      	adds	r3, #36	@ 0x24
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fe3c 	bl	80068aa <USB_ReadChInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11a      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334d      	adds	r3, #77	@ 0x4d
 8002c5e:	2207      	movs	r2, #7
 8002c60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 fbc1 	bl	80073f2 <USB_HC_Halt>
 8002c70:	e09e      	b.n	8002db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fe15 	bl	80068aa <USB_ReadChInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8a:	d11b      	bne.n	8002cc4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	334d      	adds	r3, #77	@ 0x4d
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f004 fb98 	bl	80073f2 <USB_HC_Halt>
 8002cc2:	e075      	b.n	8002db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fdec 	bl	80068aa <USB_ReadChInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d11a      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2308      	movs	r3, #8
 8002cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334d      	adds	r3, #77	@ 0x4d
 8002cfe:	2206      	movs	r2, #6
 8002d00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fb71 	bl	80073f2 <USB_HC_Halt>
 8002d10:	e04e      	b.n	8002db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fdc5 	bl	80068aa <USB_ReadChInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2a:	d11b      	bne.n	8002d64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334d      	adds	r3, #77	@ 0x4d
 8002d50:	2209      	movs	r2, #9
 8002d52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fb48 	bl	80073f2 <USB_HC_Halt>
 8002d62:	e025      	b.n	8002db0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fd9c 	bl	80068aa <USB_ReadChInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d78:	2b80      	cmp	r3, #128	@ 0x80
 8002d7a:	d119      	bne.n	8002db0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	334d      	adds	r3, #77	@ 0x4d
 8002d9e:	2207      	movs	r2, #7
 8002da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 fb21 	bl	80073f2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fd76 	bl	80068aa <USB_ReadChInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc8:	d112      	bne.n	8002df0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fb0d 	bl	80073f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dea:	6093      	str	r3, [r2, #8]
 8002dec:	f000 bd75 	b.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fd56 	bl	80068aa <USB_ReadChInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 8128 	bne.w	800305a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	2320      	movs	r3, #32
 8002e1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	331b      	adds	r3, #27
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d119      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	331b      	adds	r3, #27
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	0151      	lsls	r1, r2, #5
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	440a      	add	r2, r1
 8002e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	799b      	ldrb	r3, [r3, #6]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01b      	beq.n	8002ea6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3330      	adds	r3, #48	@ 0x30
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	1ac9      	subs	r1, r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4403      	add	r3, r0
 8002ea2:	3338      	adds	r3, #56	@ 0x38
 8002ea4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334d      	adds	r3, #77	@ 0x4d
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	@ 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	2301      	movs	r3, #1
 8002ede:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3326      	adds	r3, #38	@ 0x26
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3326      	adds	r3, #38	@ 0x26
 8002f06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d110      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fa6c 	bl	80073f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	2310      	movs	r3, #16
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	e03d      	b.n	8002faa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3326      	adds	r3, #38	@ 0x26
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d00a      	beq.n	8002f5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3326      	adds	r3, #38	@ 0x26
 8002f54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d127      	bne.n	8002faa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	0151      	lsls	r1, r2, #5
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	440a      	add	r2, r1
 8002f70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	334c      	adds	r3, #76	@ 0x4c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	334c      	adds	r3, #76	@ 0x4c
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f00a f92f 	bl	800d208 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	799b      	ldrb	r3, [r3, #6]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d13b      	bne.n	800302a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3338      	adds	r3, #56	@ 0x38
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3328      	adds	r3, #40	@ 0x28
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	440b      	add	r3, r1
 8002fd8:	1e59      	subs	r1, r3, #1
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4403      	add	r3, r0
 8002fe8:	3328      	adds	r3, #40	@ 0x28
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8470 	beq.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	333c      	adds	r3, #60	@ 0x3c
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2d8      	uxtb	r0, r3
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	333c      	adds	r3, #60	@ 0x3c
 8003022:	4602      	mov	r2, r0
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	f000 bc58 	b.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	333c      	adds	r3, #60	@ 0x3c
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2d8      	uxtb	r0, r3
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	333c      	adds	r3, #60	@ 0x3c
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
 8003056:	f000 bc40 	b.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fc21 	bl	80068aa <USB_ReadChInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d131      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307e:	461a      	mov	r2, r3
 8003080:	2320      	movs	r3, #32
 8003082:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331a      	adds	r3, #26
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 841f 	bne.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	331b      	adds	r3, #27
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334d      	adds	r3, #77	@ 0x4d
 80030c0:	2203      	movs	r2, #3
 80030c2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 f990 	bl	80073f2 <USB_HC_Halt>
 80030d2:	f000 bc02 	b.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fbe3 	bl	80068aa <USB_ReadChInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	f040 8305 	bne.w	80036fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2302      	movs	r3, #2
 8003100:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	334d      	adds	r3, #77	@ 0x4d
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d114      	bne.n	8003142 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	334d      	adds	r3, #77	@ 0x4d
 8003128:	2202      	movs	r2, #2
 800312a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334c      	adds	r3, #76	@ 0x4c
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e2cc      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d114      	bne.n	8003182 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	334d      	adds	r3, #77	@ 0x4d
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334c      	adds	r3, #76	@ 0x4c
 800317c:	2205      	movs	r2, #5
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e2ac      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334d      	adds	r3, #77	@ 0x4d
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b07      	cmp	r3, #7
 8003196:	d00b      	beq.n	80031b0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	334d      	adds	r3, #77	@ 0x4d
 80031a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	f040 80a6 	bne.w	80032fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334d      	adds	r3, #77	@ 0x4d
 80031c0:	2202      	movs	r2, #2
 80031c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3344      	adds	r3, #68	@ 0x44
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4403      	add	r3, r0
 80031e4:	3344      	adds	r3, #68	@ 0x44
 80031e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3344      	adds	r3, #68	@ 0x44
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d943      	bls.n	8003286 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3344      	adds	r3, #68	@ 0x44
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	331a      	adds	r3, #26
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d123      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	331b      	adds	r3, #27
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	331c      	adds	r3, #28
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	440a      	add	r2, r1
 8003266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800326a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334c      	adds	r3, #76	@ 0x4c
 8003280:	2204      	movs	r2, #4
 8003282:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003284:	e229      	b.n	80036da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334c      	adds	r3, #76	@ 0x4c
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3326      	adds	r3, #38	@ 0x26
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3326      	adds	r3, #38	@ 0x26
 80032c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	f040 8209 	bne.w	80036da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032fa:	e1ee      	b.n	80036da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b05      	cmp	r3, #5
 8003310:	f040 80c8 	bne.w	80034a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334d      	adds	r3, #77	@ 0x4d
 8003324:	2202      	movs	r2, #2
 8003326:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331b      	adds	r3, #27
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 81ce 	bne.w	80036dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3326      	adds	r3, #38	@ 0x26
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d16b      	bne.n	800342e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3348      	adds	r3, #72	@ 0x48
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4403      	add	r3, r0
 8003376:	3348      	adds	r3, #72	@ 0x48
 8003378:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3348      	adds	r3, #72	@ 0x48
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d943      	bls.n	8003418 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3348      	adds	r3, #72	@ 0x48
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	331b      	adds	r3, #27
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3344      	adds	r3, #68	@ 0x44
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d809      	bhi.n	80033e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	331c      	adds	r3, #28
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	0151      	lsls	r1, r2, #5
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	440a      	add	r2, r1
 80033f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003400:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334c      	adds	r3, #76	@ 0x4c
 8003412:	2204      	movs	r2, #4
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e014      	b.n	8003442 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	@ 0x4c
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e009      	b.n	8003442 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	334c      	adds	r3, #76	@ 0x4c
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3326      	adds	r3, #38	@ 0x26
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3326      	adds	r3, #38	@ 0x26
 8003468:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346a:	2b02      	cmp	r3, #2
 800346c:	f040 8136 	bne.w	80036dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e11b      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	f040 8081 	bne.w	80035be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	334d      	adds	r3, #77	@ 0x4d
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	331b      	adds	r3, #27
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	f040 80fa 	bne.w	80036dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334c      	adds	r3, #76	@ 0x4c
 80034f8:	2202      	movs	r2, #2
 80034fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	440a      	add	r2, r1
 8003512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800353a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	0151      	lsls	r1, r2, #5
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	440a      	add	r2, r1
 8003552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003556:	f023 0320 	bic.w	r3, r3, #32
 800355a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3326      	adds	r3, #38	@ 0x26
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	@ 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80a9 	bne.w	80036dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e08e      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	334d      	adds	r3, #77	@ 0x4d
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d143      	bne.n	800365c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	2202      	movs	r2, #2
 80035e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334c      	adds	r3, #76	@ 0x4c
 80035f8:	2202      	movs	r2, #2
 80035fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3326      	adds	r3, #38	@ 0x26
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3326      	adds	r3, #38	@ 0x26
 8003622:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003624:	2b02      	cmp	r3, #2
 8003626:	d159      	bne.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003646:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e03f      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334d      	adds	r3, #77	@ 0x4d
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d126      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334d      	adds	r3, #77	@ 0x4d
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3344      	adds	r3, #68	@ 0x44
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	1c59      	adds	r1, r3, #1
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	3344      	adds	r3, #68	@ 0x44
 80036a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	334c      	adds	r3, #76	@ 0x4c
 80036ba:	2204      	movs	r2, #4
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e00d      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	f000 8100 	beq.w	80038d8 <HCD_HC_IN_IRQHandler+0xcca>
 80036d8:	e000      	b.n	80036dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	334c      	adds	r3, #76	@ 0x4c
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	4619      	mov	r1, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f009 fd88 	bl	800d208 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036f8:	e0ef      	b.n	80038da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f003 f8d1 	bl	80068aa <USB_ReadChInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b40      	cmp	r3, #64	@ 0x40
 8003710:	d12f      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800371e:	461a      	mov	r2, r3
 8003720:	2340      	movs	r3, #64	@ 0x40
 8003722:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334d      	adds	r3, #77	@ 0x4d
 8003734:	2205      	movs	r2, #5
 8003736:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	331a      	adds	r3, #26
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3344      	adds	r3, #68	@ 0x44
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fe41 	bl	80073f2 <USB_HC_Halt>
 8003770:	e0b3      	b.n	80038da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 f895 	bl	80068aa <USB_ReadChInterrupts>
 8003780:	4603      	mov	r3, r0
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b10      	cmp	r3, #16
 8003788:	f040 80a7 	bne.w	80038da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3326      	adds	r3, #38	@ 0x26
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d11b      	bne.n	80037da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3344      	adds	r3, #68	@ 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	@ 0x4d
 80037c6:	2204      	movs	r2, #4
 80037c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fe0d 	bl	80073f2 <USB_HC_Halt>
 80037d8:	e03f      	b.n	800385a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3326      	adds	r3, #38	@ 0x26
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3326      	adds	r3, #38	@ 0x26
 8003800:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003802:	2b02      	cmp	r3, #2
 8003804:	d129      	bne.n	800385a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3344      	adds	r3, #68	@ 0x44
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	799b      	ldrb	r3, [r3, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HCD_HC_IN_IRQHandler+0xc2a>
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	331b      	adds	r3, #27
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d110      	bne.n	800385a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	334d      	adds	r3, #77	@ 0x4d
 8003848:	2204      	movs	r2, #4
 800384a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f003 fdcc 	bl	80073f2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	331b      	adds	r3, #27
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d129      	bne.n	80038c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	331b      	adds	r3, #27
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	440a      	add	r2, r1
 800389a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800389e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2310      	movs	r3, #16
 80038d4:	6093      	str	r3, [r2, #8]
 80038d6:	e000      	b.n	80038da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80038d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 ffd3 	bl	80068aa <USB_ReadChInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b04      	cmp	r3, #4
 800390c:	d11b      	bne.n	8003946 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2304      	movs	r3, #4
 800391e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334d      	adds	r3, #77	@ 0x4d
 8003930:	2207      	movs	r2, #7
 8003932:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f003 fd58 	bl	80073f2 <USB_HC_Halt>
 8003942:	f000 bc89 	b.w	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f002 ffab 	bl	80068aa <USB_ReadChInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	f040 8082 	bne.w	8003a64 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3319      	adds	r3, #25
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d124      	bne.n	80039d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	3319      	adds	r3, #25
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	334c      	adds	r3, #76	@ 0x4c
 80039ac:	2202      	movs	r2, #2
 80039ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2203      	movs	r2, #3
 80039c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fd10 	bl	80073f2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	331a      	adds	r3, #26
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 8437 	bne.w	8004258 <HCD_HC_OUT_IRQHandler+0x978>
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	331b      	adds	r3, #27
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 842b 	bne.w	8004258 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3326      	adds	r3, #38	@ 0x26
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d009      	beq.n	8003a2c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	331b      	adds	r3, #27
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334d      	adds	r3, #77	@ 0x4d
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fcd2 	bl	80073f2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3344      	adds	r3, #68	@ 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e3f9      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 ff1c 	bl	80068aa <USB_ReadChInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7c:	d111      	bne.n	8003aa2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fca9 	bl	80073f2 <USB_HC_Halt>
 8003aa0:	e3da      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fefd 	bl	80068aa <USB_ReadChInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d168      	bne.n	8003b8c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3344      	adds	r3, #68	@ 0x44
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fee7 	bl	80068aa <USB_ReadChInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b40      	cmp	r3, #64	@ 0x40
 8003ae4:	d112      	bne.n	8003b0c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3319      	adds	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2340      	movs	r3, #64	@ 0x40
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	331b      	adds	r3, #27
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	331b      	adds	r3, #27
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b54:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b62:	461a      	mov	r2, r3
 8003b64:	2301      	movs	r3, #1
 8003b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	334d      	adds	r3, #77	@ 0x4d
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fc34 	bl	80073f2 <USB_HC_Halt>
 8003b8a:	e365      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f002 fe88 	bl	80068aa <USB_ReadChInterrupts>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b40      	cmp	r3, #64	@ 0x40
 8003ba2:	d139      	bne.n	8003c18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	334d      	adds	r3, #77	@ 0x4d
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	331a      	adds	r3, #26
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3319      	adds	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3344      	adds	r3, #68	@ 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fbf7 	bl	80073f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c10:	461a      	mov	r2, r3
 8003c12:	2340      	movs	r3, #64	@ 0x40
 8003c14:	6093      	str	r3, [r2, #8]
 8003c16:	e31f      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f002 fe42 	bl	80068aa <USB_ReadChInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d11a      	bne.n	8003c66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2308      	movs	r3, #8
 8003c40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334d      	adds	r3, #77	@ 0x4d
 8003c52:	2206      	movs	r2, #6
 8003c54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fbc7 	bl	80073f2 <USB_HC_Halt>
 8003c64:	e2f8      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 fe1b 	bl	80068aa <USB_ReadChInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d144      	bne.n	8003d08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3344      	adds	r3, #68	@ 0x44
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334d      	adds	r3, #77	@ 0x4d
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3319      	adds	r3, #25
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d114      	bne.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3318      	adds	r3, #24
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3319      	adds	r3, #25
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 fb7f 	bl	80073f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2310      	movs	r3, #16
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	e2a7      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f002 fdca 	bl	80068aa <USB_ReadChInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b80      	cmp	r3, #128	@ 0x80
 8003d1e:	f040 8083 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	799b      	ldrb	r3, [r3, #6]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d111      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334d      	adds	r3, #77	@ 0x4d
 8003d3a:	2207      	movs	r2, #7
 8003d3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f003 fb53 	bl	80073f2 <USB_HC_Halt>
 8003d4c:	e062      	b.n	8003e14 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3344      	adds	r3, #68	@ 0x44
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4403      	add	r3, r0
 8003d6e:	3344      	adds	r3, #68	@ 0x44
 8003d70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3344      	adds	r3, #68	@ 0x44
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d922      	bls.n	8003dce <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3344      	adds	r3, #68	@ 0x44
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	334c      	adds	r3, #76	@ 0x4c
 8003dac:	2204      	movs	r2, #4
 8003dae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334c      	adds	r3, #76	@ 0x4c
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f009 fa1e 	bl	800d208 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dcc:	e022      	b.n	8003e14 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334c      	adds	r3, #76	@ 0x4c
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003df8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e00:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	6093      	str	r3, [r2, #8]
 8003e26:	e217      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f002 fd3a 	bl	80068aa <USB_ReadChInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e40:	d11b      	bne.n	8003e7a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	2209      	movs	r2, #9
 8003e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 fac7 	bl	80073f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e70:	461a      	mov	r2, r3
 8003e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e76:	6093      	str	r3, [r2, #8]
 8003e78:	e1ee      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 fd11 	bl	80068aa <USB_ReadChInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	f040 81df 	bne.w	8004252 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	334d      	adds	r3, #77	@ 0x4d
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 8093 	bne.w	8003fe4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334d      	adds	r3, #77	@ 0x4d
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334c      	adds	r3, #76	@ 0x4c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3326      	adds	r3, #38	@ 0x26
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d00b      	beq.n	8003f14 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3326      	adds	r3, #38	@ 0x26
 8003f0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	f040 8190 	bne.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	799b      	ldrb	r3, [r3, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d115      	bne.n	8003f48 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	333d      	adds	r3, #61	@ 0x3d
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2d8      	uxtb	r0, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	333d      	adds	r3, #61	@ 0x3d
 8003f44:	4602      	mov	r2, r0
 8003f46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	799b      	ldrb	r3, [r3, #6]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	f040 8171 	bne.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3334      	adds	r3, #52	@ 0x34
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8165 	beq.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3334      	adds	r3, #52	@ 0x34
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4403      	add	r3, r0
 8003f8a:	3328      	adds	r3, #40	@ 0x28
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	440b      	add	r3, r1
 8003f90:	1e59      	subs	r1, r3, #1
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	3328      	adds	r3, #40	@ 0x28
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 813f 	beq.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	333d      	adds	r3, #61	@ 0x3d
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	f083 0301 	eor.w	r3, r3, #1
 8003fce:	b2d8      	uxtb	r0, r3
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	333d      	adds	r3, #61	@ 0x3d
 8003fde:	4602      	mov	r2, r0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e127      	b.n	8004234 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334d      	adds	r3, #77	@ 0x4d
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d120      	bne.n	800403c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334d      	adds	r3, #77	@ 0x4d
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	331b      	adds	r3, #27
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	f040 8107 	bne.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334c      	adds	r3, #76	@ 0x4c
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e0fb      	b.n	8004234 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	@ 0x4d
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b04      	cmp	r3, #4
 8004050:	d13a      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	334d      	adds	r3, #77	@ 0x4d
 8004062:	2202      	movs	r2, #2
 8004064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334c      	adds	r3, #76	@ 0x4c
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	331b      	adds	r3, #27
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 80d1 	bne.w	8004234 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	331b      	adds	r3, #27
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c4:	6053      	str	r3, [r2, #4]
 80040c6:	e0b5      	b.n	8004234 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	334d      	adds	r3, #77	@ 0x4d
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d114      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	334d      	adds	r3, #77	@ 0x4d
 80040ee:	2202      	movs	r2, #2
 80040f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334c      	adds	r3, #76	@ 0x4c
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e095      	b.n	8004234 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	334d      	adds	r3, #77	@ 0x4d
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b06      	cmp	r3, #6
 800411c:	d114      	bne.n	8004148 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	334d      	adds	r3, #77	@ 0x4d
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	334c      	adds	r3, #76	@ 0x4c
 8004142:	2205      	movs	r2, #5
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e075      	b.n	8004234 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334d      	adds	r3, #77	@ 0x4d
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b07      	cmp	r3, #7
 800415c:	d00a      	beq.n	8004174 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	334d      	adds	r3, #77	@ 0x4d
 800416e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004170:	2b09      	cmp	r3, #9
 8004172:	d170      	bne.n	8004256 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	334d      	adds	r3, #77	@ 0x4d
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3344      	adds	r3, #68	@ 0x44
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4403      	add	r3, r0
 80041a8:	3344      	adds	r3, #68	@ 0x44
 80041aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3344      	adds	r3, #68	@ 0x44
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d914      	bls.n	80041ec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	3344      	adds	r3, #68	@ 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	334c      	adds	r3, #76	@ 0x4c
 80041e6:	2204      	movs	r2, #4
 80041e8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041ea:	e022      	b.n	8004232 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	334c      	adds	r3, #76	@ 0x4c
 80041fc:	2202      	movs	r2, #2
 80041fe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004216:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800421e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004232:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	334c      	adds	r3, #76	@ 0x4c
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f008 ffdc 	bl	800d208 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004250:	e002      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004256:	bf00      	nop
  }
}
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	@ 0x28
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	0c5b      	lsrs	r3, r3, #17
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004292:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d004      	beq.n	80042a4 <HCD_RXQLVL_IRQHandler+0x46>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b05      	cmp	r3, #5
 800429e:	f000 80b6 	beq.w	800440e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042a2:	e0b7      	b.n	8004414 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80b3 	beq.w	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	332c      	adds	r3, #44	@ 0x2c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a7 	beq.w	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3338      	adds	r3, #56	@ 0x38
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	18d1      	adds	r1, r2, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3334      	adds	r3, #52	@ 0x34
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4299      	cmp	r1, r3
 80042ee:	f200 8083 	bhi.w	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	332c      	adds	r3, #44	@ 0x2c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	b292      	uxth	r2, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f002 fa61 	bl	80067d4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	332c      	adds	r3, #44	@ 0x2c
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	18d1      	adds	r1, r2, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4403      	add	r3, r0
 8004336:	332c      	adds	r3, #44	@ 0x2c
 8004338:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3338      	adds	r3, #56	@ 0x38
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	18d1      	adds	r1, r2, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4403      	add	r3, r0
 800435e:	3338      	adds	r3, #56	@ 0x38
 8004360:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	0cdb      	lsrs	r3, r3, #19
 8004372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004376:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3328      	adds	r3, #40	@ 0x28
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4293      	cmp	r3, r2
 8004390:	d13f      	bne.n	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03c      	beq.n	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	333c      	adds	r3, #60	@ 0x3c
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f083 0301 	eor.w	r3, r3, #1
 80043e0:	b2d8      	uxtb	r0, r3
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	333c      	adds	r3, #60	@ 0x3c
 80043f2:	4602      	mov	r2, r0
 80043f4:	701a      	strb	r2, [r3, #0]
      break;
 80043f6:	e00c      	b.n	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	334c      	adds	r3, #76	@ 0x4c
 8004408:	2204      	movs	r2, #4
 800440a:	701a      	strb	r2, [r3, #0]
      break;
 800440c:	e001      	b.n	8004412 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004412:	bf00      	nop
  }
}
 8004414:	bf00      	nop
 8004416:	3728      	adds	r7, #40	@ 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004448:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d10b      	bne.n	800446c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d102      	bne.n	8004464 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f008 feb6 	bl	800d1d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d132      	bne.n	80044dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b04      	cmp	r3, #4
 8004486:	d126      	bne.n	80044d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7a5b      	ldrb	r3, [r3, #9]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d113      	bne.n	80044b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004496:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800449a:	d106      	bne.n	80044aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2102      	movs	r1, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f002 fb26 	bl	8006af4 <USB_InitFSLSPClkSel>
 80044a8:	e011      	b.n	80044ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2101      	movs	r1, #1
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 fb1f 	bl	8006af4 <USB_InitFSLSPClkSel>
 80044b6:	e00a      	b.n	80044ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	79db      	ldrb	r3, [r3, #7]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044c6:	461a      	mov	r2, r3
 80044c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80044cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f008 feac 	bl	800d22c <HAL_HCD_PortEnabled_Callback>
 80044d4:	e002      	b.n	80044dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f008 feb6 	bl	800d248 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d103      	bne.n	80044ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0320 	orr.w	r3, r3, #32
 80044ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044f4:	461a      	mov	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e12b      	b.n	800476e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd f874 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	@ 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004568:	f001 fa20 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a81      	ldr	r2, [pc, #516]	@ (8004778 <HAL_I2C_Init+0x274>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d807      	bhi.n	8004588 <HAL_I2C_Init+0x84>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a80      	ldr	r2, [pc, #512]	@ (800477c <HAL_I2C_Init+0x278>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e006      	b.n	8004596 <HAL_I2C_Init+0x92>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a7d      	ldr	r2, [pc, #500]	@ (8004780 <HAL_I2C_Init+0x27c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0e7      	b.n	800476e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a78      	ldr	r2, [pc, #480]	@ (8004784 <HAL_I2C_Init+0x280>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9b      	lsrs	r3, r3, #18
 80045a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004778 <HAL_I2C_Init+0x274>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d802      	bhi.n	80045d8 <HAL_I2C_Init+0xd4>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	e009      	b.n	80045ec <HAL_I2C_Init+0xe8>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	4a69      	ldr	r2, [pc, #420]	@ (8004788 <HAL_I2C_Init+0x284>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	3301      	adds	r3, #1
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	495c      	ldr	r1, [pc, #368]	@ (8004778 <HAL_I2C_Init+0x274>)
 8004608:	428b      	cmp	r3, r1
 800460a:	d819      	bhi.n	8004640 <HAL_I2C_Init+0x13c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e59      	subs	r1, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb1 f3f3 	udiv	r3, r1, r3
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004620:	400b      	ands	r3, r1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_I2C_Init+0x138>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e59      	subs	r1, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fbb1 f3f3 	udiv	r3, r1, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463a:	e051      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800463c:	2304      	movs	r3, #4
 800463e:	e04f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d111      	bne.n	800466c <HAL_I2C_Init+0x168>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e012      	b.n	8004692 <HAL_I2C_Init+0x18e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	0099      	lsls	r1, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	2b00      	cmp	r3, #0
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Init+0x196>
 8004696:	2301      	movs	r3, #1
 8004698:	e022      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <HAL_I2C_Init+0x1bc>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1e58      	subs	r0, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046be:	e00f      	b.n	80046e0 <HAL_I2C_Init+0x1dc>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	6809      	ldr	r1, [r1, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800470e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6911      	ldr	r1, [r2, #16]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	430b      	orrs	r3, r1
 8004722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	000186a0 	.word	0x000186a0
 800477c:	001e847f 	.word	0x001e847f
 8004780:	003d08ff 	.word	0x003d08ff
 8004784:	431bde83 	.word	0x431bde83
 8004788:	10624dd3 	.word	0x10624dd3

0800478c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e128      	b.n	80049f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a90      	ldr	r2, [pc, #576]	@ (80049f8 <HAL_I2S_Init+0x26c>)
 80047b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fc ff75 	bl	80016a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80047d4:	f023 030f 	bic.w	r3, r3, #15
 80047d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d060      	beq.n	80048ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80047f2:	2310      	movs	r3, #16
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e001      	b.n	80047fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d802      	bhi.n	800480a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800480a:	2001      	movs	r0, #1
 800480c:	f001 f9f6 	bl	8005bfc <HAL_RCCEx_GetPeriphCLKFreq>
 8004810:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481a:	d125      	bne.n	8004868 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d010      	beq.n	8004846 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	fbb2 f2f3 	udiv	r2, r2, r3
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	3305      	adds	r3, #5
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e01f      	b.n	8004886 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	3305      	adds	r3, #5
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e00e      	b.n	8004886 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	3305      	adds	r3, #5
 8004884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4a5c      	ldr	r2, [pc, #368]	@ (80049fc <HAL_I2S_Init+0x270>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048ac:	2302      	movs	r3, #2
 80048ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d902      	bls.n	80048c0 <HAL_I2S_Init+0x134>
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2bff      	cmp	r3, #255	@ 0xff
 80048be:	d907      	bls.n	80048d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e08f      	b.n	80049f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	ea42 0103 	orr.w	r1, r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80048ee:	f023 030f 	bic.w	r3, r3, #15
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6851      	ldr	r1, [r2, #4]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6892      	ldr	r2, [r2, #8]
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68d2      	ldr	r2, [r2, #12]
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6992      	ldr	r2, [r2, #24]
 8004906:	430a      	orrs	r2, r1
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004912:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d161      	bne.n	80049e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_I2S_Init+0x274>)
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a37      	ldr	r2, [pc, #220]	@ (8004a04 <HAL_I2S_Init+0x278>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_I2S_Init+0x1a4>
 800492c:	4b36      	ldr	r3, [pc, #216]	@ (8004a08 <HAL_I2S_Init+0x27c>)
 800492e:	e001      	b.n	8004934 <HAL_I2S_Init+0x1a8>
 8004930:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	4932      	ldr	r1, [pc, #200]	@ (8004a04 <HAL_I2S_Init+0x278>)
 800493c:	428a      	cmp	r2, r1
 800493e:	d101      	bne.n	8004944 <HAL_I2S_Init+0x1b8>
 8004940:	4a31      	ldr	r2, [pc, #196]	@ (8004a08 <HAL_I2S_Init+0x27c>)
 8004942:	e001      	b.n	8004948 <HAL_I2S_Init+0x1bc>
 8004944:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004948:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800494c:	f023 030f 	bic.w	r3, r3, #15
 8004950:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <HAL_I2S_Init+0x278>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_I2S_Init+0x1d4>
 800495c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a08 <HAL_I2S_Init+0x27c>)
 800495e:	e001      	b.n	8004964 <HAL_I2S_Init+0x1d8>
 8004960:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004964:	2202      	movs	r2, #2
 8004966:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a25      	ldr	r2, [pc, #148]	@ (8004a04 <HAL_I2S_Init+0x278>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_I2S_Init+0x1ea>
 8004972:	4b25      	ldr	r3, [pc, #148]	@ (8004a08 <HAL_I2S_Init+0x27c>)
 8004974:	e001      	b.n	800497a <HAL_I2S_Init+0x1ee>
 8004976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004986:	d003      	beq.n	8004990 <HAL_I2S_Init+0x204>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d103      	bne.n	8004998 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e001      	b.n	800499c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049a6:	4313      	orrs	r3, r2
 80049a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29a      	uxth	r2, r3
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80049c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004a04 <HAL_I2S_Init+0x278>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <HAL_I2S_Init+0x24c>
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <HAL_I2S_Init+0x27c>)
 80049d6:	e001      	b.n	80049dc <HAL_I2S_Init+0x250>
 80049d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049dc:	897a      	ldrh	r2, [r7, #10]
 80049de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	08004b03 	.word	0x08004b03
 80049fc:	cccccccd 	.word	0xcccccccd
 8004a00:	08004c19 	.word	0x08004c19
 8004a04:	40003800 	.word	0x40003800
 8004a08:	40003400 	.word	0x40003400

08004a0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ffb8 	bl	8004a0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10e      	bne.n	8004afa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff93 	bl	8004a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d13a      	bne.n	8004b94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d109      	bne.n	8004b3c <I2S_IRQHandler+0x3a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b32:	2b40      	cmp	r3, #64	@ 0x40
 8004b34:	d102      	bne.n	8004b3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffb4 	bl	8004aa4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b40      	cmp	r3, #64	@ 0x40
 8004b44:	d126      	bne.n	8004b94 <I2S_IRQHandler+0x92>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d11f      	bne.n	8004b94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	f043 0202 	orr.w	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ff50 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d136      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d109      	bne.n	8004bbe <I2S_IRQHandler+0xbc>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b80      	cmp	r3, #128	@ 0x80
 8004bb6:	d102      	bne.n	8004bbe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff45 	bl	8004a48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d122      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d11b      	bne.n	8004c0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004be4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff13 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a92      	ldr	r2, [pc, #584]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c32:	4b92      	ldr	r3, [pc, #584]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c34:	e001      	b.n	8004c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c50:	4b8a      	ldr	r3, [pc, #552]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c52:	e001      	b.n	8004c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c64:	d004      	beq.n	8004c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 8099 	bne.w	8004da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d107      	bne.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f925 	bl	8004ed4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9c8 	bl	8005034 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d13a      	bne.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d035      	beq.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cc4:	e001      	b.n	8004cca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4969      	ldr	r1, [pc, #420]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	d101      	bne.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cd6:	4b69      	ldr	r3, [pc, #420]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd8:	e001      	b.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ce2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	f043 0202 	orr.w	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe88 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	f040 80c3 	bne.w	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80bd 	beq.w	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a49      	ldr	r2, [pc, #292]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d56:	4b49      	ldr	r3, [pc, #292]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d58:	e001      	b.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4944      	ldr	r1, [pc, #272]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d66:	428b      	cmp	r3, r1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d6a:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d6c:	e001      	b.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff fe4a 	bl	8004a34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004da0:	e089      	b.n	8004eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d107      	bne.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8be 	bl	8004f38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8fd 	bl	8004fd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	d12f      	bne.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02a      	beq.n	8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004df8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e04:	4b1d      	ldr	r3, [pc, #116]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e06:	e001      	b.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4919      	ldr	r1, [pc, #100]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e14:	428b      	cmp	r3, r1
 8004e16:	d101      	bne.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e18:	4b18      	ldr	r3, [pc, #96]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e1a:	e001      	b.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fdfa 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d136      	bne.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d031      	beq.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a07      	ldr	r2, [pc, #28]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e5e:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e60:	e001      	b.n	8004e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4902      	ldr	r1, [pc, #8]	@ (8004e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d106      	bne.n	8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e72:	4b02      	ldr	r3, [pc, #8]	@ (8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e74:	e006      	b.n	8004e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e76:	bf00      	nop
 8004e78:	40003800 	.word	0x40003800
 8004e7c:	40003400 	.word	0x40003400
 8004e80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fdc0 	bl	8004a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	e000      	b.n	8004eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eb6:	bf00      	nop
}
 8004eb8:	bf00      	nop
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1c99      	adds	r1, r3, #2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ee6:	881a      	ldrh	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d113      	bne.n	8004f2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ffc9 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	1c99      	adds	r1, r3, #2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f4a:	8819      	ldrh	r1, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d101      	bne.n	8004f5a <I2SEx_TxISR_I2SExt+0x22>
 8004f56:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f58:	e001      	b.n	8004f5e <I2SEx_TxISR_I2SExt+0x26>
 8004f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f5e:	460a      	mov	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d121      	bne.n	8004fbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a12      	ldr	r2, [pc, #72]	@ (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <I2SEx_TxISR_I2SExt+0x50>
 8004f84:	4b11      	ldr	r3, [pc, #68]	@ (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f86:	e001      	b.n	8004f8c <I2SEx_TxISR_I2SExt+0x54>
 8004f88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	490d      	ldr	r1, [pc, #52]	@ (8004fc8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f94:	428b      	cmp	r3, r1
 8004f96:	d101      	bne.n	8004f9c <I2SEx_TxISR_I2SExt+0x64>
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <I2SEx_TxISR_I2SExt+0x94>)
 8004f9a:	e001      	b.n	8004fa0 <I2SEx_TxISR_I2SExt+0x68>
 8004f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff ff81 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40003800 	.word	0x40003800
 8004fcc:	40003400 	.word	0x40003400

08004fd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68d8      	ldr	r0, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	1c99      	adds	r1, r3, #2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004fe8:	b282      	uxth	r2, r0
 8004fea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005012:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ff4a 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	@ (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <I2SEx_RxISR_I2SExt+0x16>
 8005046:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005048:	e001      	b.n	800504e <I2SEx_RxISR_I2SExt+0x1a>
 800504a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800504e:	68d8      	ldr	r0, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	1c99      	adds	r1, r3, #2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800505a:	b282      	uxth	r2, r0
 800505c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a12      	ldr	r2, [pc, #72]	@ (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <I2SEx_RxISR_I2SExt+0x50>
 8005080:	4b11      	ldr	r3, [pc, #68]	@ (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005082:	e001      	b.n	8005088 <I2SEx_RxISR_I2SExt+0x54>
 8005084:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	490d      	ldr	r1, [pc, #52]	@ (80050c4 <I2SEx_RxISR_I2SExt+0x90>)
 8005090:	428b      	cmp	r3, r1
 8005092:	d101      	bne.n	8005098 <I2SEx_RxISR_I2SExt+0x64>
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <I2SEx_RxISR_I2SExt+0x94>)
 8005096:	e001      	b.n	800509c <I2SEx_RxISR_I2SExt+0x68>
 8005098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800509c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff03 	bl	8004ec0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40003800 	.word	0x40003800
 80050c8:	40003400 	.word	0x40003400

080050cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e267      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d075      	beq.n	80051d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050ea:	4b88      	ldr	r3, [pc, #544]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00c      	beq.n	8005110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050f6:	4b85      	ldr	r3, [pc, #532]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d112      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005102:	4b82      	ldr	r3, [pc, #520]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d10b      	bne.n	8005128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	4b7e      	ldr	r3, [pc, #504]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05b      	beq.n	80051d4 <HAL_RCC_OscConfig+0x108>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d157      	bne.n	80051d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e242      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d106      	bne.n	8005140 <HAL_RCC_OscConfig+0x74>
 8005132:	4b76      	ldr	r3, [pc, #472]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a75      	ldr	r2, [pc, #468]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e01d      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b70      	ldr	r3, [pc, #448]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a6f      	ldr	r2, [pc, #444]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b6d      	ldr	r3, [pc, #436]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6c      	ldr	r2, [pc, #432]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e00b      	b.n	800517c <HAL_RCC_OscConfig+0xb0>
 8005164:	4b69      	ldr	r3, [pc, #420]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a68      	ldr	r2, [pc, #416]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800516a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b66      	ldr	r3, [pc, #408]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a65      	ldr	r2, [pc, #404]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800517a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fc fd90 	bl	8001ca8 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800518c:	f7fc fd8c 	bl	8001ca8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	@ 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e207      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	4b5b      	ldr	r3, [pc, #364]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0xc0>
 80051aa:	e014      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fc fd7c 	bl	8001ca8 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b4:	f7fc fd78 	bl	8001ca8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1f3      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	4b51      	ldr	r3, [pc, #324]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0xe8>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d063      	beq.n	80052aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051e2:	4b4a      	ldr	r3, [pc, #296]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d11c      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d116      	bne.n	8005234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005206:	4b41      	ldr	r3, [pc, #260]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e1c7      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521e:	4b3b      	ldr	r3, [pc, #236]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4937      	ldr	r1, [pc, #220]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	e03a      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800523c:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <HAL_RCC_OscConfig+0x244>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fc fd31 	bl	8001ca8 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524a:	f7fc fd2d 	bl	8001ca8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e1a8      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b28      	ldr	r3, [pc, #160]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4925      	ldr	r1, [pc, #148]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 8005278:	4313      	orrs	r3, r2
 800527a:	600b      	str	r3, [r1, #0]
 800527c:	e015      	b.n	80052aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <HAL_RCC_OscConfig+0x244>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fd10 	bl	8001ca8 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528c:	f7fc fd0c 	bl	8001ca8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e187      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d036      	beq.n	8005324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052be:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_RCC_OscConfig+0x248>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c4:	f7fc fcf0 	bl	8001ca8 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052cc:	f7fc fcec 	bl	8001ca8 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e167      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_OscConfig+0x240>)
 80052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x200>
 80052ea:	e01b      	b.n	8005324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_OscConfig+0x248>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fc fcd9 	bl	8001ca8 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f8:	e00e      	b.n	8005318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fc fcd5 	bl	8001ca8 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d907      	bls.n	8005318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e150      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
 800530c:	40023800 	.word	0x40023800
 8005310:	42470000 	.word	0x42470000
 8005314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	4b88      	ldr	r3, [pc, #544]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800531a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ea      	bne.n	80052fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8097 	beq.w	8005460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005332:	2300      	movs	r3, #0
 8005334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b81      	ldr	r3, [pc, #516]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	4b7d      	ldr	r3, [pc, #500]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	4a7c      	ldr	r2, [pc, #496]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005350:	6413      	str	r3, [r2, #64]	@ 0x40
 8005352:	4b7a      	ldr	r3, [pc, #488]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b77      	ldr	r3, [pc, #476]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d118      	bne.n	80053a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800536e:	4b74      	ldr	r3, [pc, #464]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a73      	ldr	r2, [pc, #460]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800537a:	f7fc fc95 	bl	8001ca8 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005382:	f7fc fc91 	bl	8001ca8 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e10c      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCC_OscConfig+0x474>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d106      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2ea>
 80053a8:	4b64      	ldr	r3, [pc, #400]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	4a63      	ldr	r2, [pc, #396]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b4:	e01c      	b.n	80053f0 <HAL_RCC_OscConfig+0x324>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x30c>
 80053be:	4b5f      	ldr	r3, [pc, #380]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	4a5e      	ldr	r2, [pc, #376]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ca:	4b5c      	ldr	r3, [pc, #368]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	4a5b      	ldr	r2, [pc, #364]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d6:	e00b      	b.n	80053f0 <HAL_RCC_OscConfig+0x324>
 80053d8:	4b58      	ldr	r3, [pc, #352]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	4a57      	ldr	r2, [pc, #348]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e4:	4b55      	ldr	r3, [pc, #340]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	4a54      	ldr	r2, [pc, #336]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80053ea:	f023 0304 	bic.w	r3, r3, #4
 80053ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7fc fc56 	bl	8001ca8 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fc fc52 	bl	8001ca8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0cb      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005416:	4b49      	ldr	r3, [pc, #292]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ee      	beq.n	8005400 <HAL_RCC_OscConfig+0x334>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005424:	f7fc fc40 	bl	8001ca8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fc fc3c 	bl	8001ca8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e0b5      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005442:	4b3e      	ldr	r3, [pc, #248]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1ee      	bne.n	800542c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d105      	bne.n	8005460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005454:	4b39      	ldr	r3, [pc, #228]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	4a38      	ldr	r2, [pc, #224]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800545e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80a1 	beq.w	80055ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800546a:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b08      	cmp	r3, #8
 8005474:	d05c      	beq.n	8005530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d141      	bne.n	8005502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fc fc10 	bl	8001ca8 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548c:	f7fc fc0c 	bl	8001ca8 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e087      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	4b27      	ldr	r3, [pc, #156]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	3b01      	subs	r3, #1
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	061b      	lsls	r3, r3, #24
 80054ce:	491b      	ldr	r1, [pc, #108]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fc fbe5 	bl	8001ca8 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fc fbe1 	bl	8001ca8 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e05c      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x416>
 8005500:	e054      	b.n	80055ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCC_OscConfig+0x478>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fc fbce 	bl	8001ca8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7fc fbca 	bl	8001ca8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e045      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_OscConfig+0x470>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x444>
 800552e:	e03d      	b.n	80055ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e038      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
 800553c:	40023800 	.word	0x40023800
 8005540:	40007000 	.word	0x40007000
 8005544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005548:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <HAL_RCC_OscConfig+0x4ec>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d028      	beq.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d121      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d11a      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005578:	4013      	ands	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800557e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005580:	4293      	cmp	r3, r2
 8005582:	d111      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	3b01      	subs	r3, #1
 8005592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d001      	beq.n	80055ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40023800 	.word	0x40023800

080055bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0cc      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055d0:	4b68      	ldr	r3, [pc, #416]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90c      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b65      	ldr	r3, [pc, #404]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b63      	ldr	r3, [pc, #396]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0b8      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d020      	beq.n	8005646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005610:	4b59      	ldr	r3, [pc, #356]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a58      	ldr	r2, [pc, #352]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800561a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005628:	4b53      	ldr	r3, [pc, #332]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a52      	ldr	r2, [pc, #328]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b50      	ldr	r3, [pc, #320]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	494d      	ldr	r1, [pc, #308]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d044      	beq.n	80056dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b47      	ldr	r3, [pc, #284]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d119      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e07f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d003      	beq.n	800567a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567a:	4b3f      	ldr	r3, [pc, #252]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	4b3b      	ldr	r3, [pc, #236]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e067      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4b37      	ldr	r3, [pc, #220]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4934      	ldr	r1, [pc, #208]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056ac:	f7fc fafc 	bl	8001ca8 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b4:	f7fc faf8 	bl	8001ca8 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e04f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 020c 	and.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1eb      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056dc:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d20c      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e032      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4916      	ldr	r1, [pc, #88]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b12      	ldr	r3, [pc, #72]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	490e      	ldr	r1, [pc, #56]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005742:	f000 f821 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005746:	4602      	mov	r2, r0
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	490a      	ldr	r1, [pc, #40]	@ (800577c <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	5ccb      	ldrb	r3, [r1, r3]
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a09      	ldr	r2, [pc, #36]	@ (8005780 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800575e:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <HAL_RCC_ClockConfig+0x1c8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fc f8b2 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023c00 	.word	0x40023c00
 8005778:	40023800 	.word	0x40023800
 800577c:	08010944 	.word	0x08010944
 8005780:	20000000 	.word	0x20000000
 8005784:	20000004 	.word	0x20000004

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800578c:	b094      	sub	sp, #80	@ 0x50
 800578e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a0:	4b79      	ldr	r3, [pc, #484]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d00d      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x40>
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	f200 80e1 	bhi.w	8005974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x34>
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ba:	e0db      	b.n	8005974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057bc:	4b73      	ldr	r3, [pc, #460]	@ (800598c <HAL_RCC_GetSysClockFreq+0x204>)
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c0:	e0db      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c2:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_GetSysClockFreq+0x208>)
 80057c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c6:	e0d8      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057d2:	4b6d      	ldr	r3, [pc, #436]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d063      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057de:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	2200      	movs	r2, #0
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	f04f 0000 	mov.w	r0, #0
 8005802:	f04f 0100 	mov.w	r1, #0
 8005806:	0159      	lsls	r1, r3, #5
 8005808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800580c:	0150      	lsls	r0, r2, #5
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	4621      	mov	r1, r4
 8005814:	1a51      	subs	r1, r2, r1
 8005816:	6139      	str	r1, [r7, #16]
 8005818:	4629      	mov	r1, r5
 800581a:	eb63 0301 	sbc.w	r3, r3, r1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800582c:	4659      	mov	r1, fp
 800582e:	018b      	lsls	r3, r1, #6
 8005830:	4651      	mov	r1, sl
 8005832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005836:	4651      	mov	r1, sl
 8005838:	018a      	lsls	r2, r1, #6
 800583a:	4651      	mov	r1, sl
 800583c:	ebb2 0801 	subs.w	r8, r2, r1
 8005840:	4659      	mov	r1, fp
 8005842:	eb63 0901 	sbc.w	r9, r3, r1
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585a:	4690      	mov	r8, r2
 800585c:	4699      	mov	r9, r3
 800585e:	4623      	mov	r3, r4
 8005860:	eb18 0303 	adds.w	r3, r8, r3
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	462b      	mov	r3, r5
 8005868:	eb49 0303 	adc.w	r3, r9, r3
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800587a:	4629      	mov	r1, r5
 800587c:	024b      	lsls	r3, r1, #9
 800587e:	4621      	mov	r1, r4
 8005880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005884:	4621      	mov	r1, r4
 8005886:	024a      	lsls	r2, r1, #9
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	2200      	movs	r2, #0
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005898:	f7fb f986 	bl	8000ba8 <__aeabi_uldivmod>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4613      	mov	r3, r2
 80058a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a4:	e058      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a6:	4b38      	ldr	r3, [pc, #224]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	099b      	lsrs	r3, r3, #6
 80058ac:	2200      	movs	r2, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	4611      	mov	r1, r2
 80058b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80058bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	f04f 0000 	mov.w	r0, #0
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	0159      	lsls	r1, r3, #5
 80058ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d2:	0150      	lsls	r0, r2, #5
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4641      	mov	r1, r8
 80058da:	ebb2 0a01 	subs.w	sl, r2, r1
 80058de:	4649      	mov	r1, r9
 80058e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058f8:	ebb2 040a 	subs.w	r4, r2, sl
 80058fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	00eb      	lsls	r3, r5, #3
 800590a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800590e:	00e2      	lsls	r2, r4, #3
 8005910:	4614      	mov	r4, r2
 8005912:	461d      	mov	r5, r3
 8005914:	4643      	mov	r3, r8
 8005916:	18e3      	adds	r3, r4, r3
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	464b      	mov	r3, r9
 800591c:	eb45 0303 	adc.w	r3, r5, r3
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800592e:	4629      	mov	r1, r5
 8005930:	028b      	lsls	r3, r1, #10
 8005932:	4621      	mov	r1, r4
 8005934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005938:	4621      	mov	r1, r4
 800593a:	028a      	lsls	r2, r1, #10
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005942:	2200      	movs	r2, #0
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800594c:	f7fb f92c 	bl	8000ba8 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4613      	mov	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	3301      	adds	r3, #1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005972:	e002      	b.n	800597a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005974:	4b05      	ldr	r3, [pc, #20]	@ (800598c <HAL_RCC_GetSysClockFreq+0x204>)
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800597c:	4618      	mov	r0, r3
 800597e:	3750      	adds	r7, #80	@ 0x50
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	00f42400 	.word	0x00f42400
 8005990:	007a1200 	.word	0x007a1200

08005994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000000 	.word	0x20000000

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059b0:	f7ff fff0 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b05      	ldr	r3, [pc, #20]	@ (80059cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	0a9b      	lsrs	r3, r3, #10
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4903      	ldr	r1, [pc, #12]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40023800 	.word	0x40023800
 80059d0:	08010954 	.word	0x08010954

080059d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	220f      	movs	r2, #15
 80059e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059e4:	4b12      	ldr	r3, [pc, #72]	@ (8005a30 <HAL_RCC_GetClockConfig+0x5c>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0203 	and.w	r2, r3, #3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a30 <HAL_RCC_GetClockConfig+0x5c>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <HAL_RCC_GetClockConfig+0x5c>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a08:	4b09      	ldr	r3, [pc, #36]	@ (8005a30 <HAL_RCC_GetClockConfig+0x5c>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	08db      	lsrs	r3, r3, #3
 8005a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <HAL_RCC_GetClockConfig+0x60>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0207 	and.w	r2, r3, #7
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	601a      	str	r2, [r3, #0]
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40023c00 	.word	0x40023c00

08005a38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d035      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a60:	4b62      	ldr	r3, [pc, #392]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a66:	f7fc f91f 	bl	8001ca8 <HAL_GetTick>
 8005a6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a6e:	f7fc f91b 	bl	8001ca8 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e0b0      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a80:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	019a      	lsls	r2, r3, #6
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	071b      	lsls	r3, r3, #28
 8005a98:	4955      	ldr	r1, [pc, #340]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aa0:	4b52      	ldr	r3, [pc, #328]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa6:	f7fc f8ff 	bl	8001ca8 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aae:	f7fc f8fb 	bl	8001ca8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e090      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8083 	beq.w	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b44      	ldr	r3, [pc, #272]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	4a43      	ldr	r2, [pc, #268]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aea:	4b41      	ldr	r3, [pc, #260]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005af6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b02:	f7fc f8d1 	bl	8001ca8 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0a:	f7fc f8cd 	bl	8001ca8 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e062      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b1c:	4b35      	ldr	r3, [pc, #212]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b28:	4b31      	ldr	r3, [pc, #196]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b30:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d02f      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d028      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b46:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b50:	4b29      	ldr	r3, [pc, #164]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b56:	4b28      	ldr	r3, [pc, #160]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b5c:	4a24      	ldr	r2, [pc, #144]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b62:	4b23      	ldr	r3, [pc, #140]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d114      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b6e:	f7fc f89b 	bl	8001ca8 <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fc f897 	bl	8001ca8 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e02a      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ee      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bba:	490d      	ldr	r1, [pc, #52]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	608b      	str	r3, [r1, #8]
 8005bc0:	e005      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bcc:	6093      	str	r3, [r2, #8]
 8005bce:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	4905      	ldr	r1, [pc, #20]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	42470068 	.word	0x42470068
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470e40 	.word	0x42470e40

08005bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d13f      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005c1a:	4b24      	ldr	r3, [pc, #144]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d006      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c30:	d12f      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c34:	617b      	str	r3, [r7, #20]
          break;
 8005c36:	e02f      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c38:	4b1c      	ldr	r3, [pc, #112]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c44:	d108      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c46:	4b19      	ldr	r3, [pc, #100]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c4e:	4a19      	ldr	r2, [pc, #100]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e007      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c60:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c68:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c82:	0f1b      	lsrs	r3, r3, #28
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	617b      	str	r3, [r7, #20]
          break;
 8005c90:	e002      	b.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
          break;
 8005c96:	bf00      	nop
        }
      }
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005c9a:	bf00      	nop
    }
  }
  return frequency;
 8005c9c:	697b      	ldr	r3, [r7, #20]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00bb8000 	.word	0x00bb8000
 8005cb4:	007a1200 	.word	0x007a1200
 8005cb8:	00f42400 	.word	0x00f42400

08005cbc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e01c      	b.n	8005d08 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	795b      	ldrb	r3, [r3, #5]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb fd62 	bl	80017a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0204 	orr.w	r2, r2, #4
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	791b      	ldrb	r3, [r3, #4]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e044      	b.n	8005db4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	795b      	ldrb	r3, [r3, #5]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d133      	bne.n	8005da2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d40:	f7fb ffb2 	bl	8001ca8 <HAL_GetTick>
 8005d44:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d46:	e018      	b.n	8005d7a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d48:	f7fb ffae 	bl	8001ca8 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d911      	bls.n	8005d7a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d00a      	beq.n	8005d7a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e01c      	b.n	8005db4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d1df      	bne.n	8005d48 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	715a      	strb	r2, [r3, #5]
 8005da0:	e004      	b.n	8005dac <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2204      	movs	r2, #4
 8005da6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	711a      	strb	r2, [r3, #4]

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e07b      	b.n	8005ec6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dde:	d009      	beq.n	8005df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	61da      	str	r2, [r3, #28]
 8005de6:	e005      	b.n	8005df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb fcec 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e78:	ea42 0103 	orr.w	r1, r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	f003 0104 	and.w	r1, r3, #4
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	f003 0210 	and.w	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e041      	b.n	8005f64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7fb fcc1 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 f9b5 	bl	800627c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d001      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e04e      	b.n	8006022 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0201 	orr.w	r2, r2, #1
 8005f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	@ (8006030 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fae:	d01d      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006034 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006038 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <HAL_TIM_Base_Start_IT+0xd0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	@ (8006044 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x80>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	@ (8006048 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d111      	bne.n	8006010 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d010      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	e007      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40001800 	.word	0x40001800

0800604c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d020      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0202 	mvn.w	r2, #2
 8006080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8d2 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8c4 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8d5 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0204 	mvn.w	r2, #4
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2202      	movs	r2, #2
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8ac 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f89e 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f8af 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d020      	beq.n	8006148 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0308 	and.w	r3, r3, #8
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01b      	beq.n	8006148 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0208 	mvn.w	r2, #8
 8006118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2204      	movs	r2, #4
 800611e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f886 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f878 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f889 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	d020      	beq.n	8006194 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0210 	mvn.w	r2, #16
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2208      	movs	r2, #8
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f860 	bl	8006240 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f852 	bl	800622c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f863 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0201 	mvn.w	r2, #1
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb f9ec 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00c      	beq.n	80061dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f982 	bl	80064e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f834 	bl	8006268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00c      	beq.n	8006224 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0220 	mvn.w	r2, #32
 800621c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f954 	bl	80064cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a46      	ldr	r2, [pc, #280]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d013      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a43      	ldr	r2, [pc, #268]	@ (80063ac <TIM_Base_SetConfig+0x130>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a42      	ldr	r2, [pc, #264]	@ (80063b0 <TIM_Base_SetConfig+0x134>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a41      	ldr	r2, [pc, #260]	@ (80063b4 <TIM_Base_SetConfig+0x138>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a40      	ldr	r2, [pc, #256]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d108      	bne.n	80062ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a35      	ldr	r2, [pc, #212]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d02b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062dc:	d027      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a32      	ldr	r2, [pc, #200]	@ (80063ac <TIM_Base_SetConfig+0x130>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d023      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a31      	ldr	r2, [pc, #196]	@ (80063b0 <TIM_Base_SetConfig+0x134>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a30      	ldr	r2, [pc, #192]	@ (80063b4 <TIM_Base_SetConfig+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2f      	ldr	r2, [pc, #188]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d017      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2e      	ldr	r2, [pc, #184]	@ (80063bc <TIM_Base_SetConfig+0x140>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a2d      	ldr	r2, [pc, #180]	@ (80063c0 <TIM_Base_SetConfig+0x144>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00f      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a2c      	ldr	r2, [pc, #176]	@ (80063c4 <TIM_Base_SetConfig+0x148>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00b      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2b      	ldr	r2, [pc, #172]	@ (80063c8 <TIM_Base_SetConfig+0x14c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2a      	ldr	r2, [pc, #168]	@ (80063cc <TIM_Base_SetConfig+0x150>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d003      	beq.n	800632e <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a29      	ldr	r2, [pc, #164]	@ (80063d0 <TIM_Base_SetConfig+0x154>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a10      	ldr	r2, [pc, #64]	@ (80063a8 <TIM_Base_SetConfig+0x12c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0xf8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <TIM_Base_SetConfig+0x13c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	611a      	str	r2, [r3, #16]
  }
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40010400 	.word	0x40010400
 80063bc:	40014000 	.word	0x40014000
 80063c0:	40014400 	.word	0x40014400
 80063c4:	40014800 	.word	0x40014800
 80063c8:	40001800 	.word	0x40001800
 80063cc:	40001c00 	.word	0x40001c00
 80063d0:	40002000 	.word	0x40002000

080063d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e05a      	b.n	80064a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a21      	ldr	r2, [pc, #132]	@ (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006438:	d01d      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1a      	ldr	r2, [pc, #104]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10c      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800647c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40001800 	.word	0x40001800

080064cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f4:	b084      	sub	sp, #16
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	f107 001c 	add.w	r0, r7, #28
 8006502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006506:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800650a:	2b01      	cmp	r3, #1
 800650c:	d123      	bne.n	8006556 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9dc 	bl	8006908 <USB_CoreReset>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e01b      	b.n	800658e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9d0 	bl	8006908 <USB_CoreReset>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800656c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006580:	e005      	b.n	800658e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800658e:	7fbb      	ldrb	r3, [r7, #30]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10b      	bne.n	80065ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f043 0206 	orr.w	r2, r3, #6
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f043 0220 	orr.w	r2, r3, #32
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b8:	b004      	add	sp, #16
 80065ba:	4770      	bx	lr

080065bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f043 0201 	orr.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d115      	bne.n	800664e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800662e:	200a      	movs	r0, #10
 8006630:	f7fb fb46 	bl	8001cc0 <HAL_Delay>
      ms += 10U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	330a      	adds	r3, #10
 8006638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f956 	bl	80068ec <USB_GetMode>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d01e      	beq.n	8006684 <USB_SetCurrentMode+0x84>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2bc7      	cmp	r3, #199	@ 0xc7
 800664a:	d9f0      	bls.n	800662e <USB_SetCurrentMode+0x2e>
 800664c:	e01a      	b.n	8006684 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006660:	200a      	movs	r0, #10
 8006662:	f7fb fb2d 	bl	8001cc0 <HAL_Delay>
      ms += 10U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	330a      	adds	r3, #10
 800666a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f93d 	bl	80068ec <USB_GetMode>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <USB_SetCurrentMode+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2bc7      	cmp	r3, #199	@ 0xc7
 800667c:	d9f0      	bls.n	8006660 <USB_SetCurrentMode+0x60>
 800667e:	e001      	b.n	8006684 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e005      	b.n	8006690 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2bc8      	cmp	r3, #200	@ 0xc8
 8006688:	d101      	bne.n	800668e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b2:	d901      	bls.n	80066b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01b      	b.n	80066f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	daf2      	bge.n	80066a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	019b      	lsls	r3, r3, #6
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066dc:	d901      	bls.n	80066e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e006      	b.n	80066f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d0f0      	beq.n	80066d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3301      	adds	r3, #1
 800670c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006714:	d901      	bls.n	800671a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e018      	b.n	800674c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	daf2      	bge.n	8006708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2210      	movs	r2, #16
 800672a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006738:	d901      	bls.n	800673e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e006      	b.n	800674c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d0f0      	beq.n	800672c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	@ 0x24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	460b      	mov	r3, r1
 8006768:	71fb      	strb	r3, [r7, #7]
 800676a:	4613      	mov	r3, r2
 800676c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006776:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d123      	bne.n	80067c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800677e:	88bb      	ldrh	r3, [r7, #4]
 8006780:	3303      	adds	r3, #3
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006786:	2300      	movs	r3, #0
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e018      	b.n	80067be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	031a      	lsls	r2, r3, #12
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4413      	add	r3, r2
 8006794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006798:	461a      	mov	r2, r3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	3301      	adds	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	3301      	adds	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	3301      	adds	r3, #1
 80067b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	3301      	adds	r3, #1
 80067b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d3e2      	bcc.n	800678c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3724      	adds	r7, #36	@ 0x24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b08b      	sub	sp, #44	@ 0x2c
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	089b      	lsrs	r3, r3, #2
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067fa:	2300      	movs	r3, #0
 80067fc:	623b      	str	r3, [r7, #32]
 80067fe:	e014      	b.n	800682a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	601a      	str	r2, [r3, #0]
    pDest++;
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	3301      	adds	r3, #1
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	3301      	adds	r3, #1
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	3301      	adds	r3, #1
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	3301      	adds	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3301      	adds	r3, #1
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	429a      	cmp	r2, r3
 8006830:	d3e6      	bcc.n	8006800 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006832:	8bfb      	ldrh	r3, [r7, #30]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01e      	beq.n	8006876 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006842:	461a      	mov	r2, r3
 8006844:	f107 0310 	add.w	r3, r7, #16
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	701a      	strb	r2, [r3, #0]
      i++;
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	3301      	adds	r3, #1
 8006862:	623b      	str	r3, [r7, #32]
      pDest++;
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	3301      	adds	r3, #1
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800686a:	8bfb      	ldrh	r3, [r7, #30]
 800686c:	3b01      	subs	r3, #1
 800686e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006870:	8bfb      	ldrh	r3, [r7, #30]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ea      	bne.n	800684c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006878:	4618      	mov	r0, r3
 800687a:	372c      	adds	r7, #44	@ 0x2c
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4013      	ands	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	460b      	mov	r3, r1
 80068b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	4013      	ands	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068de:	68bb      	ldr	r3, [r7, #8]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0301 	and.w	r3, r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006920:	d901      	bls.n	8006926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e01b      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	daf2      	bge.n	8006914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800694a:	d901      	bls.n	8006950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e006      	b.n	800695e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d0f0      	beq.n	800693e <USB_CoreReset+0x36>

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800696c:	b084      	sub	sp, #16
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800697a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d119      	bne.n	80069f6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10a      	bne.n	80069e0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069d8:	f043 0304 	orr.w	r3, r3, #4
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e014      	b.n	8006a0a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069ee:	f023 0304 	bic.w	r3, r3, #4
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e009      	b.n	8006a0a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fe43 	bl	8006698 <USB_FlushTxFifo>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fe6d 	bl	80066fc <USB_FlushRxFifo>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	e015      	b.n	8006a5e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a52:	461a      	mov	r2, r3
 8006a54:	2300      	movs	r3, #0
 8006a56:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006a62:	461a      	mov	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d3e3      	bcc.n	8006a32 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295
 8006a76:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <USB_HostInit+0x170>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10b      	bne.n	8006a98 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a86:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ae0 <USB_HostInit+0x174>)
 8006a8c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a14      	ldr	r2, [pc, #80]	@ (8006ae4 <USB_HostInit+0x178>)
 8006a92:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006a96:	e009      	b.n	8006aac <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2280      	movs	r2, #128	@ 0x80
 8006a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a11      	ldr	r2, [pc, #68]	@ (8006ae8 <USB_HostInit+0x17c>)
 8006aa2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a11      	ldr	r2, [pc, #68]	@ (8006aec <USB_HostInit+0x180>)
 8006aa8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <USB_HostInit+0x184>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad8:	b004      	add	sp, #16
 8006ada:	4770      	bx	lr
 8006adc:	40040000 	.word	0x40040000
 8006ae0:	01000200 	.word	0x01000200
 8006ae4:	00e00300 	.word	0x00e00300
 8006ae8:	00600080 	.word	0x00600080
 8006aec:	004000e0 	.word	0x004000e0
 8006af0:	a3200008 	.word	0xa3200008

08006af4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d107      	bne.n	8006b46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b42:	6053      	str	r3, [r2, #4]
 8006b44:	e00c      	b.n	8006b60 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d107      	bne.n	8006b5c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b52:	461a      	mov	r2, r3
 8006b54:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	e001      	b.n	8006b60 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006b8e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b9c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b9e:	2064      	movs	r0, #100	@ 0x64
 8006ba0:	f7fb f88e 	bl	8001cc0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bb0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006bb2:	200a      	movs	r0, #10
 8006bb4:	f7fb f884 	bl	8001cc0 <HAL_Delay>

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006be6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <USB_DriveVbus+0x44>
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d106      	bne.n	8006c06 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c04:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c10:	d109      	bne.n	8006c26 <USB_DriveVbus+0x64>
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c24:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0c5b      	lsrs	r3, r3, #17
 8006c52:	f003 0303 	and.w	r3, r3, #3
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	b29b      	uxth	r3, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	70fb      	strb	r3, [r7, #3]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70bb      	strb	r3, [r7, #2]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d87c      	bhi.n	8006dbc <USB_HC_Init+0x138>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <USB_HC_Init+0x44>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cd9 	.word	0x08006cd9
 8006ccc:	08006d7f 	.word	0x08006d7f
 8006cd0:	08006cd9 	.word	0x08006cd9
 8006cd4:	08006d41 	.word	0x08006d41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006cea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da10      	bge.n	8006d16 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	78fa      	ldrb	r2, [r7, #3]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d12:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006d14:	e055      	b.n	8006dc2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a6f      	ldr	r2, [pc, #444]	@ (8006ed8 <USB_HC_Init+0x254>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d151      	bne.n	8006dc2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d38:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d3c:	60d3      	str	r3, [r2, #12]
      break;
 8006d3e:	e040      	b.n	8006dc2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006d52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da34      	bge.n	8006dc6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d7c:	e023      	b.n	8006dc6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f240 2325 	movw	r3, #549	@ 0x225
 8006d90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da17      	bge.n	8006dca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006db4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006db8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006dba:	e006      	b.n	8006dca <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
      break;
 8006dc0:	e004      	b.n	8006dcc <USB_HC_Init+0x148>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <USB_HC_Init+0x148>
      break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <USB_HC_Init+0x148>
      break;
 8006dca:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	78fa      	ldrb	r2, [r7, #3]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e12:	6939      	ldr	r1, [r7, #16]
 8006e14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da03      	bge.n	8006e38 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	e001      	b.n	8006e3c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fef9 	bl	8006c34 <USB_GetHostSpeed>
 8006e42:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d106      	bne.n	8006e5a <USB_HC_Init+0x1d6>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d003      	beq.n	8006e5a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e001      	b.n	8006e5e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e5e:	787b      	ldrb	r3, [r7, #1]
 8006e60:	059b      	lsls	r3, r3, #22
 8006e62:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e66:	78bb      	ldrb	r3, [r7, #2]
 8006e68:	02db      	lsls	r3, r3, #11
 8006e6a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e6e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e74:	049b      	lsls	r3, r3, #18
 8006e76:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e7a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006e7c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e82:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e9c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d003      	beq.n	8006eae <USB_HC_Init+0x22a>
 8006ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d10f      	bne.n	8006ece <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ec8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ecc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40040000 	.word	0x40040000

08006edc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	@ 0x30
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006ef4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ef8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a5d      	ldr	r2, [pc, #372]	@ (8007074 <USB_HC_StartXfer+0x198>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d12f      	bne.n	8006f62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d11c      	bne.n	8006f42 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	7c9b      	ldrb	r3, [r3, #18]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <USB_HC_StartXfer+0x3c>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	7c9b      	ldrb	r3, [r3, #18]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d124      	bne.n	8006f62 <USB_HC_StartXfer+0x86>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	799b      	ldrb	r3, [r3, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d120      	bne.n	8006f62 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3e:	60d3      	str	r3, [r2, #12]
 8006f40:	e00f      	b.n	8006f62 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	791b      	ldrb	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <USB_HC_StartXfer+0x86>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	795b      	ldrb	r3, [r3, #5]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d107      	bne.n	8006f62 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fb6b 	bl	8007634 <USB_DoPing>
        return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e232      	b.n	80073c8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	799b      	ldrb	r3, [r3, #6]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d158      	bne.n	800701c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	8a92      	ldrh	r2, [r2, #20]
 8006f7c:	fb03 f202 	mul.w	r2, r3, r2
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	61da      	str	r2, [r3, #28]
 8006f84:	e07c      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	7c9b      	ldrb	r3, [r3, #18]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d130      	bne.n	8006ff0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	2bbc      	cmp	r3, #188	@ 0xbc
 8006f94:	d918      	bls.n	8006fc8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	8a9b      	ldrh	r3, [r3, #20]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d003      	beq.n	8006fb8 <USB_HC_StartXfer+0xdc>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d103      	bne.n	8006fc0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	e05f      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e05b      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d007      	beq.n	8006fe8 <USB_HC_StartXfer+0x10c>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d003      	beq.n	8006fe8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e04b      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2203      	movs	r2, #3
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	e047      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10d      	bne.n	8007012 <USB_HC_StartXfer+0x136>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	8a92      	ldrh	r2, [r2, #20]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d907      	bls.n	8007012 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	8a92      	ldrh	r2, [r2, #20]
 8007008:	fb03 f202 	mul.w	r2, r3, r2
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	61da      	str	r2, [r3, #28]
 8007010:	e036      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	61da      	str	r2, [r3, #28]
 800701a:	e031      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d018      	beq.n	8007056 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	8a92      	ldrh	r2, [r2, #20]
 800702c:	4413      	add	r3, r2
 800702e:	3b01      	subs	r3, #1
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	8a92      	ldrh	r2, [r2, #20]
 8007034:	fbb3 f3f2 	udiv	r3, r3, r2
 8007038:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800703a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800703c:	8b7b      	ldrh	r3, [r7, #26]
 800703e:	429a      	cmp	r2, r3
 8007040:	d90b      	bls.n	800705a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007042:	8b7b      	ldrh	r3, [r7, #26]
 8007044:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007046:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	8a92      	ldrh	r2, [r2, #20]
 800704c:	fb03 f202 	mul.w	r2, r3, r2
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	61da      	str	r2, [r3, #28]
 8007054:	e001      	b.n	800705a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007056:	2301      	movs	r3, #1
 8007058:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	78db      	ldrb	r3, [r3, #3]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007062:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	8a92      	ldrh	r2, [r2, #20]
 8007068:	fb03 f202 	mul.w	r2, r3, r2
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	61da      	str	r2, [r3, #28]
 8007070:	e006      	b.n	8007080 <USB_HC_StartXfer+0x1a4>
 8007072:	bf00      	nop
 8007074:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007088:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800708a:	04d9      	lsls	r1, r3, #19
 800708c:	4ba3      	ldr	r3, [pc, #652]	@ (800731c <USB_HC_StartXfer+0x440>)
 800708e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007090:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	7d9b      	ldrb	r3, [r3, #22]
 8007096:	075b      	lsls	r3, r3, #29
 8007098:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800709c:	69f9      	ldr	r1, [r7, #28]
 800709e:	0148      	lsls	r0, r1, #5
 80070a0:	6a39      	ldr	r1, [r7, #32]
 80070a2:	4401      	add	r1, r0
 80070a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6999      	ldr	r1, [r3, #24]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c2:	460a      	mov	r2, r1
 80070c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bf0c      	ite	eq
 80070d6:	2301      	moveq	r3, #1
 80070d8:	2300      	movne	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	6a3a      	ldr	r2, [r7, #32]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	7e7b      	ldrb	r3, [r7, #25]
 800710e:	075b      	lsls	r3, r3, #29
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	0148      	lsls	r0, r1, #5
 8007114:	6a39      	ldr	r1, [r7, #32]
 8007116:	4401      	add	r1, r0
 8007118:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800711c:	4313      	orrs	r3, r2
 800711e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	799b      	ldrb	r3, [r3, #6]
 8007124:	2b01      	cmp	r3, #1
 8007126:	f040 80c3 	bne.w	80072b0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	7c5b      	ldrb	r3, [r3, #17]
 800712e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007134:	4313      	orrs	r3, r2
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	6a3a      	ldr	r2, [r7, #32]
 800713c:	440a      	add	r2, r1
 800713e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007146:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	4413      	add	r3, r2
 8007150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	440a      	add	r2, r1
 800715e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	79db      	ldrb	r3, [r3, #7]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d123      	bne.n	80071b8 <USB_HC_StartXfer+0x2dc>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d11f      	bne.n	80071b8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	440a      	add	r2, r1
 800718e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007196:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	6a3a      	ldr	r2, [r7, #32]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	7c9b      	ldrb	r3, [r3, #18]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d003      	beq.n	80071c8 <USB_HC_StartXfer+0x2ec>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	7c9b      	ldrb	r3, [r3, #18]
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d117      	bne.n	80071f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d113      	bne.n	80071f8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10f      	bne.n	80071f8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071f6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	7c9b      	ldrb	r3, [r3, #18]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d162      	bne.n	80072c6 <USB_HC_StartXfer+0x3ea>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	78db      	ldrb	r3, [r3, #3]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d15e      	bne.n	80072c6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	3b01      	subs	r3, #1
 800720e:	2b03      	cmp	r3, #3
 8007210:	d858      	bhi.n	80072c4 <USB_HC_StartXfer+0x3e8>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <USB_HC_StartXfer+0x33c>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007229 	.word	0x08007229
 800721c:	0800724b 	.word	0x0800724b
 8007220:	0800726d 	.word	0x0800726d
 8007224:	0800728f 	.word	0x0800728f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	69fa      	ldr	r2, [r7, #28]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	6a3a      	ldr	r2, [r7, #32]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007246:	6053      	str	r3, [r2, #4]
          break;
 8007248:	e03d      	b.n	80072c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	6a3a      	ldr	r2, [r7, #32]
 800725e:	440a      	add	r2, r1
 8007260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007264:	f043 030e 	orr.w	r3, r3, #14
 8007268:	6053      	str	r3, [r2, #4]
          break;
 800726a:	e02c      	b.n	80072c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800728a:	6053      	str	r3, [r2, #4]
          break;
 800728c:	e01b      	b.n	80072c6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072ac:	6053      	str	r3, [r2, #4]
          break;
 80072ae:	e00a      	b.n	80072c6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072bc:	461a      	mov	r2, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	6053      	str	r3, [r2, #4]
 80072c2:	e000      	b.n	80072c6 <USB_HC_StartXfer+0x3ea>
          break;
 80072c4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072dc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	78db      	ldrb	r3, [r3, #3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	e003      	b.n	80072f8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072f6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072fe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730c:	461a      	mov	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e055      	b.n	80073c8 <USB_HC_StartXfer+0x4ec>
 800731c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	78db      	ldrb	r3, [r3, #3]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d14e      	bne.n	80073c6 <USB_HC_StartXfer+0x4ea>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d04a      	beq.n	80073c6 <USB_HC_StartXfer+0x4ea>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	79db      	ldrb	r3, [r3, #7]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d146      	bne.n	80073c6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	7c9b      	ldrb	r3, [r3, #18]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d831      	bhi.n	80073a4 <USB_HC_StartXfer+0x4c8>
 8007340:	a201      	add	r2, pc, #4	@ (adr r2, 8007348 <USB_HC_StartXfer+0x46c>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007359 	.word	0x08007359
 800734c:	0800737d 	.word	0x0800737d
 8007350:	08007359 	.word	0x08007359
 8007354:	0800737d 	.word	0x0800737d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	3303      	adds	r3, #3
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007362:	8afa      	ldrh	r2, [r7, #22]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007368:	b29b      	uxth	r3, r3
 800736a:	429a      	cmp	r2, r3
 800736c:	d91c      	bls.n	80073a8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f043 0220 	orr.w	r2, r3, #32
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	619a      	str	r2, [r3, #24]
        }
        break;
 800737a:	e015      	b.n	80073a8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	3303      	adds	r3, #3
 8007382:	089b      	lsrs	r3, r3, #2
 8007384:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007386:	8afa      	ldrh	r2, [r7, #22]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	b29b      	uxth	r3, r3
 8007392:	429a      	cmp	r2, r3
 8007394:	d90a      	bls.n	80073ac <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80073a2:	e003      	b.n	80073ac <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80073a4:	bf00      	nop
 80073a6:	e002      	b.n	80073ae <USB_HC_StartXfer+0x4d2>
        break;
 80073a8:	bf00      	nop
 80073aa:	e000      	b.n	80073ae <USB_HC_StartXfer+0x4d2>
        break;
 80073ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6999      	ldr	r1, [r3, #24]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	785a      	ldrb	r2, [r3, #1]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2000      	movs	r0, #0
 80073be:	9000      	str	r0, [sp, #0]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7ff f9c9 	bl	8006758 <USB_WritePacket>
  }

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3728      	adds	r7, #40	@ 0x28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	b29b      	uxth	r3, r3
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b089      	sub	sp, #36	@ 0x24
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0c9b      	lsrs	r3, r3, #18
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	0fdb      	lsrs	r3, r3, #31
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	0fdb      	lsrs	r3, r3, #31
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b20      	cmp	r3, #32
 8007456:	d10d      	bne.n	8007474 <USB_HC_Halt+0x82>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USB_HC_Halt+0x82>
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d002      	beq.n	8007470 <USB_HC_Halt+0x7e>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d101      	bne.n	8007474 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e0d8      	b.n	8007626 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <USB_HC_Halt+0x8e>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d173      	bne.n	8007568 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800749a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800749e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d14a      	bne.n	8007542 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d133      	bne.n	8007520 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074d6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074f6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007504:	d82e      	bhi.n	8007564 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800751c:	d0ec      	beq.n	80074f8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800751e:	e081      	b.n	8007624 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	0151      	lsls	r1, r2, #5
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	440a      	add	r2, r1
 8007536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800753a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800753e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007540:	e070      	b.n	8007624 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	440a      	add	r2, r1
 8007558:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007560:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007562:	e05f      	b.n	8007624 <USB_HC_Halt+0x232>
            break;
 8007564:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007566:	e05d      	b.n	8007624 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007586:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d133      	bne.n	8007600 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3301      	adds	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075e4:	d81d      	bhi.n	8007622 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075fc:	d0ec      	beq.n	80075d8 <USB_HC_Halt+0x1e6>
 80075fe:	e011      	b.n	8007624 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	440a      	add	r2, r1
 8007616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800761a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e000      	b.n	8007624 <USB_HC_Halt+0x232>
          break;
 8007622:	bf00      	nop
    }
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3724      	adds	r7, #36	@ 0x24
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007648:	2301      	movs	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	04da      	lsls	r2, r3, #19
 8007650:	4b15      	ldr	r3, [pc, #84]	@ (80076a8 <USB_DoPing+0x74>)
 8007652:	4013      	ands	r3, r2
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	0151      	lsls	r1, r2, #5
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	440a      	add	r2, r1
 800765c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007660:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007664:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800767c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007684:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007692:	461a      	mov	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	1ff80000 	.word	0x1ff80000

080076ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fe ff8c 	bl	80065de <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076c6:	2110      	movs	r1, #16
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7fe ffe5 	bl	8006698 <USB_FlushTxFifo>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff f80f 	bl	80066fc <USB_FlushRxFifo>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e01f      	b.n	800772e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007704:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800770c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007714:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007722:	461a      	mov	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	3301      	adds	r3, #1
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b0f      	cmp	r3, #15
 8007732:	d9dc      	bls.n	80076ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007734:	2300      	movs	r3, #0
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	e034      	b.n	80077a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007750:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007758:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007760:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	4413      	add	r3, r2
 800776a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776e:	461a      	mov	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007780:	d80c      	bhi.n	800779c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007798:	d0ec      	beq.n	8007774 <USB_StopHost+0xc8>
 800779a:	e000      	b.n	800779e <USB_StopHost+0xf2>
        break;
 800779c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d9c7      	bls.n	800773a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b0:	461a      	mov	r2, r3
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295
 80077b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fe fefb 	bl	80065bc <USB_EnableGlobalInt>

  return ret;
 80077c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3720      	adds	r7, #32
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b089      	sub	sp, #36	@ 0x24
 80077d4:	af04      	add	r7, sp, #16
 80077d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80077d8:	2301      	movs	r3, #1
 80077da:	2202      	movs	r2, #2
 80077dc:	2102      	movs	r1, #2
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fcd1 	bl	8008186 <USBH_FindInterface>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	2bff      	cmp	r3, #255	@ 0xff
 80077ec:	d002      	beq.n	80077f4 <USBH_CDC_InterfaceInit+0x24>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d901      	bls.n	80077f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077f4:	2302      	movs	r3, #2
 80077f6:	e13d      	b.n	8007a74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fca6 	bl	800814e <USBH_SelectInterface>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800780c:	2302      	movs	r3, #2
 800780e:	e131      	b.n	8007a74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007816:	2050      	movs	r0, #80	@ 0x50
 8007818:	f006 f952 	bl	800dac0 <malloc>
 800781c:	4603      	mov	r3, r0
 800781e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007830:	2302      	movs	r3, #2
 8007832:	e11f      	b.n	8007a74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007834:	2250      	movs	r2, #80	@ 0x50
 8007836:	2100      	movs	r1, #0
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	f006 ff7c 	bl	800e736 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	211a      	movs	r1, #26
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	4413      	add	r3, r2
 800784a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b25b      	sxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	da15      	bge.n	8007882 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	211a      	movs	r1, #26
 800785c:	fb01 f303 	mul.w	r3, r1, r3
 8007860:	4413      	add	r3, r2
 8007862:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	211a      	movs	r1, #26
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800787c:	881a      	ldrh	r2, [r3, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f002 fa18 	bl	8009cbe <USBH_AllocPipe>
 800788e:	4603      	mov	r3, r0
 8007890:	461a      	mov	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	7819      	ldrb	r1, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	7858      	ldrb	r0, [r3, #1]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	8952      	ldrh	r2, [r2, #10]
 80078ae:	9202      	str	r2, [sp, #8]
 80078b0:	2203      	movs	r2, #3
 80078b2:	9201      	str	r2, [sp, #4]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	4623      	mov	r3, r4
 80078b8:	4602      	mov	r2, r0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 f9d0 	bl	8009c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2200      	movs	r2, #0
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f005 fe3b 	bl	800d544 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80078ce:	2300      	movs	r3, #0
 80078d0:	2200      	movs	r2, #0
 80078d2:	210a      	movs	r1, #10
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc56 	bl	8008186 <USBH_FindInterface>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2bff      	cmp	r3, #255	@ 0xff
 80078e2:	d002      	beq.n	80078ea <USBH_CDC_InterfaceInit+0x11a>
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d901      	bls.n	80078ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80078ea:	2302      	movs	r3, #2
 80078ec:	e0c2      	b.n	8007a74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	211a      	movs	r1, #26
 80078f4:	fb01 f303 	mul.w	r3, r1, r3
 80078f8:	4413      	add	r3, r2
 80078fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b25b      	sxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	da16      	bge.n	8007934 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	211a      	movs	r1, #26
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	211a      	movs	r1, #26
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	4413      	add	r3, r2
 8007928:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	835a      	strh	r2, [r3, #26]
 8007932:	e015      	b.n	8007960 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	211a      	movs	r1, #26
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	211a      	movs	r1, #26
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	211a      	movs	r1, #26
 8007966:	fb01 f303 	mul.w	r3, r1, r3
 800796a:	4413      	add	r3, r2
 800796c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b25b      	sxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	da16      	bge.n	80079a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	211a      	movs	r1, #26
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	211a      	movs	r1, #26
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	4413      	add	r3, r2
 800799a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	835a      	strh	r2, [r3, #26]
 80079a4:	e015      	b.n	80079d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	211a      	movs	r1, #26
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	211a      	movs	r1, #26
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80079cc:	881a      	ldrh	r2, [r3, #0]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	7b9b      	ldrb	r3, [r3, #14]
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f002 f970 	bl	8009cbe <USBH_AllocPipe>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	7bdb      	ldrb	r3, [r3, #15]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f002 f966 	bl	8009cbe <USBH_AllocPipe>
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	7b59      	ldrb	r1, [r3, #13]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	7b98      	ldrb	r0, [r3, #14]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	8b12      	ldrh	r2, [r2, #24]
 8007a12:	9202      	str	r2, [sp, #8]
 8007a14:	2202      	movs	r2, #2
 8007a16:	9201      	str	r2, [sp, #4]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f002 f91e 	bl	8009c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	7b19      	ldrb	r1, [r3, #12]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	7bd8      	ldrb	r0, [r3, #15]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	8b52      	ldrh	r2, [r2, #26]
 8007a3c:	9202      	str	r2, [sp, #8]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	9201      	str	r2, [sp, #4]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4623      	mov	r3, r4
 8007a46:	4602      	mov	r2, r0
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f002 f909 	bl	8009c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	7b5b      	ldrb	r3, [r3, #13]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f005 fd70 	bl	800d544 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	7b1b      	ldrb	r3, [r3, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f005 fd69 	bl	800d544 <USBH_LL_SetToggle>

  return USBH_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd90      	pop	{r4, r7, pc}

08007a7c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f002 f8fe 	bl	8009c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f002 f929 	bl	8009d00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	7b1b      	ldrb	r3, [r3, #12]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f002 f8eb 	bl	8009c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	7b1b      	ldrb	r3, [r3, #12]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f002 f916 	bl	8009d00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	7b5b      	ldrb	r3, [r3, #13]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00e      	beq.n	8007b00 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	7b5b      	ldrb	r3, [r3, #13]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f002 f8d8 	bl	8009c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	7b5b      	ldrb	r3, [r3, #13]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 f903 	bl	8009d00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f005 ffdb 	bl	800dad0 <free>
    phost->pActiveClass->pData = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b20:	2200      	movs	r2, #0
 8007b22:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3340      	adds	r3, #64	@ 0x40
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8b1 	bl	8007cae <GetLineCoding>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d877      	bhi.n	8007c80 <USBH_CDC_Process+0x114>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <USBH_CDC_Process+0x2c>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bb3 	.word	0x08007bb3
 8007ba0:	08007be3 	.word	0x08007be3
 8007ba4:	08007c57 	.word	0x08007c57
 8007ba8:	08007c65 	.word	0x08007c65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb0:	e06d      	b.n	8007c8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f897 	bl	8007cec <SetLineCoding>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007bd0:	e058      	b.n	8007c84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d055      	beq.n	8007c84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007be0:	e050      	b.n	8007c84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3340      	adds	r3, #64	@ 0x40
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f860 	bl	8007cae <GetLineCoding>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d126      	bne.n	8007c46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d13b      	bne.n	8007c88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d133      	bne.n	8007c88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d12b      	bne.n	8007c88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d124      	bne.n	8007c88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f982 	bl	8007f48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c44:	e020      	b.n	8007c88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d01d      	beq.n	8007c88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007c54:	e018      	b.n	8007c88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f867 	bl	8007d2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8f6 	bl	8007e4e <CDC_ProcessReception>
      break;
 8007c62:	e014      	b.n	8007c8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 f984 	bl	8008f74 <USBH_ClrFeature>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007c7e:	e005      	b.n	8007c8c <USBH_CDC_Process+0x120>

    default:
      break;
 8007c80:	bf00      	nop
 8007c82:	e004      	b.n	8007c8e <USBH_CDC_Process+0x122>
      break;
 8007c84:	bf00      	nop
 8007c86:	e002      	b.n	8007c8e <USBH_CDC_Process+0x122>
      break;
 8007c88:	bf00      	nop
 8007c8a:	e000      	b.n	8007c8e <USBH_CDC_Process+0x122>
      break;
 8007c8c:	bf00      	nop

  }

  return status;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	22a1      	movs	r2, #161	@ 0xa1
 8007cbc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2221      	movs	r2, #33	@ 0x21
 8007cc2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2207      	movs	r2, #7
 8007cd4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2207      	movs	r2, #7
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 fc7e 	bl	80095de <USBH_CtlReq>
 8007ce2:	4603      	mov	r3, r0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2221      	movs	r2, #33	@ 0x21
 8007cfa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2207      	movs	r2, #7
 8007d12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2207      	movs	r2, #7
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fc5f 	bl	80095de <USBH_CtlReq>
 8007d20:	4603      	mov	r3, r0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af02      	add	r7, sp, #8
 8007d30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d002      	beq.n	8007d50 <CDC_ProcessTransmission+0x26>
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d023      	beq.n	8007d96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d4e:	e07a      	b.n	8007e46 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	8b12      	ldrh	r2, [r2, #24]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d90b      	bls.n	8007d74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	69d9      	ldr	r1, [r3, #28]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8b1a      	ldrh	r2, [r3, #24]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7b5b      	ldrb	r3, [r3, #13]
 8007d68:	2001      	movs	r0, #1
 8007d6a:	9000      	str	r0, [sp, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 ff34 	bl	8009bda <USBH_BulkSendData>
 8007d72:	e00b      	b.n	8007d8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	7b5b      	ldrb	r3, [r3, #13]
 8007d82:	2001      	movs	r0, #1
 8007d84:	9000      	str	r0, [sp, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 ff27 	bl	8009bda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007d94:	e057      	b.n	8007e46 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	7b5b      	ldrb	r3, [r3, #13]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f005 fba7 	bl	800d4f0 <USBH_LL_GetURBState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d136      	bne.n	8007e1a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	8b12      	ldrh	r2, [r2, #24]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d90e      	bls.n	8007dd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	8b12      	ldrh	r2, [r2, #24]
 8007dc0:	1a9a      	subs	r2, r3, r2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	8b12      	ldrh	r2, [r2, #24]
 8007dce:	441a      	add	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	61da      	str	r2, [r3, #28]
 8007dd4:	e002      	b.n	8007ddc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007dec:	e006      	b.n	8007dfc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f892 	bl	8007f20 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e10:	2300      	movs	r3, #0
 8007e12:	2200      	movs	r2, #0
 8007e14:	f002 fa24 	bl	800a260 <osMessageQueuePut>
      break;
 8007e18:	e014      	b.n	8007e44 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d111      	bne.n	8007e44 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f002 fa0e 	bl	800a260 <osMessageQueuePut>
      break;
 8007e44:	bf00      	nop
  }
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d002      	beq.n	8007e74 <CDC_ProcessReception+0x26>
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d00e      	beq.n	8007e90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e72:	e051      	b.n	8007f18 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6a19      	ldr	r1, [r3, #32]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	8b5a      	ldrh	r2, [r3, #26]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	7b1b      	ldrb	r3, [r3, #12]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fecf 	bl	8009c24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2204      	movs	r2, #4
 8007e8a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007e8e:	e043      	b.n	8007f18 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	7b1b      	ldrb	r3, [r3, #12]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f005 fb2a 	bl	800d4f0 <USBH_LL_GetURBState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ea0:	7cfb      	ldrb	r3, [r7, #19]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d137      	bne.n	8007f16 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	7b1b      	ldrb	r3, [r3, #12]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f005 fa8d 	bl	800d3cc <USBH_LL_GetLastXferSize>
 8007eb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d016      	beq.n	8007eec <CDC_ProcessReception+0x9e>
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	8b5b      	ldrh	r3, [r3, #26]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d110      	bne.n	8007eec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	6a1a      	ldr	r2, [r3, #32]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	441a      	add	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8007eea:	e006      	b.n	8007efa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f81d 	bl	8007f34 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2204      	movs	r2, #4
 8007efe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2200      	movs	r2, #0
 8007f12:	f002 f9a5 	bl	800a260 <osMessageQueuePut>
      break;
 8007f16:	bf00      	nop
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3718      	adds	r7, #24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f70:	2302      	movs	r3, #2
 8007f72:	e044      	b.n	8007ffe <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	79fa      	ldrb	r2, [r7, #7]
 8007f78:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f841 	bl	8008014 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2104      	movs	r1, #4
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f002 f8d7 	bl	800a178 <osMessageQueueNew>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <USBH_Init+0xac>)
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800800c <USBH_Init+0xb0>)
 8007fd6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8008008 <USBH_Init+0xac>)
 8007fda:	2280      	movs	r2, #128	@ 0x80
 8007fdc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007fde:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <USBH_Init+0xac>)
 8007fe0:	2218      	movs	r2, #24
 8007fe2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007fe4:	4a08      	ldr	r2, [pc, #32]	@ (8008008 <USBH_Init+0xac>)
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	4809      	ldr	r0, [pc, #36]	@ (8008010 <USBH_Init+0xb4>)
 8007fea:	f001 ff59 	bl	8009ea0 <osThreadNew>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f005 f934 	bl	800d264 <USBH_LL_Init>

  return USBH_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	2000311c 	.word	0x2000311c
 800800c:	08010874 	.word	0x08010874
 8008010:	08008cc5 	.word	0x08008cc5

08008014 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e009      	b.n	800803a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	33e0      	adds	r3, #224	@ 0xe0
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b0f      	cmp	r3, #15
 800803e:	d9f2      	bls.n	8008026 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e009      	b.n	800805a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008060:	d3f1      	bcc.n	8008046 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2240      	movs	r2, #64	@ 0x40
 8008086:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	331c      	adds	r3, #28
 80080b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f006 fb3c 	bl	800e736 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80080c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f006 fb33 	bl	800e736 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080d6:	2212      	movs	r2, #18
 80080d8:	2100      	movs	r1, #0
 80080da:	4618      	mov	r0, r3
 80080dc:	f006 fb2b 	bl	800e736 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80080e6:	223e      	movs	r2, #62	@ 0x3e
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f006 fb23 	bl	800e736 <memset>

  return USBH_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d016      	beq.n	800813c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10e      	bne.n	8008136 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	33de      	adds	r3, #222	@ 0xde
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
 8008134:	e004      	b.n	8008140 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	73fb      	strb	r3, [r7, #15]
 800813a:	e001      	b.n	8008140 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800813c:	2302      	movs	r3, #2
 800813e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	429a      	cmp	r2, r3
 8008168:	d204      	bcs.n	8008174 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008172:	e001      	b.n	8008178 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008174:	2302      	movs	r3, #2
 8008176:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008186:	b480      	push	{r7}
 8008188:	b087      	sub	sp, #28
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	4603      	mov	r3, r0
 8008196:	70fb      	strb	r3, [r7, #3]
 8008198:	460b      	mov	r3, r1
 800819a:	70bb      	strb	r3, [r7, #2]
 800819c:	4613      	mov	r3, r2
 800819e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80081ae:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081b0:	e025      	b.n	80081fe <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	221a      	movs	r2, #26
 80081b6:	fb02 f303 	mul.w	r3, r2, r3
 80081ba:	3308      	adds	r3, #8
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	3302      	adds	r3, #2
 80081c2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	795b      	ldrb	r3, [r3, #5]
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d002      	beq.n	80081d4 <USBH_FindInterface+0x4e>
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	2bff      	cmp	r3, #255	@ 0xff
 80081d2:	d111      	bne.n	80081f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80081d8:	78ba      	ldrb	r2, [r7, #2]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d002      	beq.n	80081e4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081de:	78bb      	ldrb	r3, [r7, #2]
 80081e0:	2bff      	cmp	r3, #255	@ 0xff
 80081e2:	d109      	bne.n	80081f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80081e8:	787a      	ldrb	r2, [r7, #1]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d002      	beq.n	80081f4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80081ee:	787b      	ldrb	r3, [r7, #1]
 80081f0:	2bff      	cmp	r3, #255	@ 0xff
 80081f2:	d101      	bne.n	80081f8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
 80081f6:	e006      	b.n	8008206 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	3301      	adds	r3, #1
 80081fc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d9d6      	bls.n	80081b2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008204:	23ff      	movs	r3, #255	@ 0xff
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f005 f85e 	bl	800d2dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f005 f977 	bl	800d516 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af04      	add	r7, sp, #16
 800823a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800823c:	2302      	movs	r3, #2
 800823e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	d102      	bne.n	8008256 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2203      	movs	r2, #3
 8008254:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b0b      	cmp	r3, #11
 800825e:	f200 8244 	bhi.w	80086ea <USBH_Process+0x4b6>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <USBH_Process+0x34>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008299 	.word	0x08008299
 800826c:	080082e7 	.word	0x080082e7
 8008270:	0800836b 	.word	0x0800836b
 8008274:	08008669 	.word	0x08008669
 8008278:	080086eb 	.word	0x080086eb
 800827c:	08008427 	.word	0x08008427
 8008280:	080085f3 	.word	0x080085f3
 8008284:	08008479 	.word	0x08008479
 8008288:	080084b5 	.word	0x080084b5
 800828c:	080084ed 	.word	0x080084ed
 8008290:	0800854b 	.word	0x0800854b
 8008294:	08008651 	.word	0x08008651
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8224 	beq.w	80086ee <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80082ac:	20c8      	movs	r0, #200	@ 0xc8
 80082ae:	f005 f97c 	bl	800d5aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f005 f86f 	bl	800d396 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80082dc:	2300      	movs	r3, #0
 80082de:	2200      	movs	r2, #0
 80082e0:	f001 ffbe 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80082e4:	e203      	b.n	80086ee <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d107      	bne.n	8008300 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e025      	b.n	800834c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008306:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800830a:	d914      	bls.n	8008336 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008312:	3301      	adds	r3, #1
 8008314:	b2da      	uxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008322:	2b03      	cmp	r3, #3
 8008324:	d903      	bls.n	800832e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220d      	movs	r2, #13
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	e00e      	b.n	800834c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e00a      	b.n	800834c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800833c:	f103 020a 	add.w	r2, r3, #10
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008346:	200a      	movs	r0, #10
 8008348:	f005 f92f 	bl	800d5aa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008360:	2300      	movs	r3, #0
 8008362:	2200      	movs	r2, #0
 8008364:	f001 ff7c 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 8008368:	e1c8      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800837a:	2104      	movs	r1, #4
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008380:	2064      	movs	r0, #100	@ 0x64
 8008382:	f005 f912 	bl	800d5aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f004 ffde 	bl	800d348 <USBH_LL_GetSpeed>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2205      	movs	r2, #5
 800839a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fc8d 	bl	8009cbe <USBH_AllocPipe>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80083ac:	2180      	movs	r1, #128	@ 0x80
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fc85 	bl	8009cbe <USBH_AllocPipe>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7919      	ldrb	r1, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	9201      	str	r2, [sp, #4]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	2280      	movs	r2, #128	@ 0x80
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fc3f 	bl	8009c60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	7959      	ldrb	r1, [r3, #5]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083f6:	9202      	str	r2, [sp, #8]
 80083f8:	2200      	movs	r2, #0
 80083fa:	9201      	str	r2, [sp, #4]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	4603      	mov	r3, r0
 8008400:	2200      	movs	r2, #0
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fc2c 	bl	8009c60 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	f001 ff1e 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 8008424:	e16a      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f96e 	bl	8008708 <USBH_HandleEnum>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 815c 	bne.w	80086f2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008448:	2b01      	cmp	r3, #1
 800844a:	d103      	bne.n	8008454 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2208      	movs	r2, #8
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e002      	b.n	800845a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2207      	movs	r2, #7
 8008458:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2205      	movs	r2, #5
 800845e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	f001 fef5 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008476:	e13c      	b.n	80086f2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8139 	beq.w	80086f6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800848a:	2101      	movs	r1, #1
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2208      	movs	r2, #8
 8008494:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2205      	movs	r2, #5
 800849a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084aa:	2300      	movs	r3, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	f001 fed7 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80084b2:	e120      	b.n	80086f6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fd12 	bl	8008ee6 <USBH_SetCfg>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2209      	movs	r2, #9
 80084cc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084e2:	2300      	movs	r3, #0
 80084e4:	2200      	movs	r2, #0
 80084e6:	f001 febb 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 80084ea:	e107      	b.n	80086fc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d015      	beq.n	8008526 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80084fa:	2101      	movs	r1, #1
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fd15 	bl	8008f2c <USBH_SetFeature>
 8008502:	4603      	mov	r3, r0
 8008504:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008506:	7bbb      	ldrb	r3, [r7, #14]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d103      	bne.n	8008516 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	220a      	movs	r2, #10
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e00a      	b.n	800852c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d106      	bne.n	800852c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	220a      	movs	r2, #10
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	e002      	b.n	800852c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	220a      	movs	r2, #10
 800852a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008540:	2300      	movs	r3, #0
 8008542:	2200      	movs	r2, #0
 8008544:	f001 fe8c 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 8008548:	e0d8      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008550:	2b00      	cmp	r3, #0
 8008552:	d03f      	beq.n	80085d4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
 8008560:	e016      	b.n	8008590 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	32de      	adds	r2, #222	@ 0xde
 8008568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856c:	791a      	ldrb	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008574:	429a      	cmp	r2, r3
 8008576:	d108      	bne.n	800858a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008578:	7bfa      	ldrb	r2, [r7, #15]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	32de      	adds	r2, #222	@ 0xde
 800857e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008588:	e005      	b.n	8008596 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	3301      	adds	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0e5      	beq.n	8008562 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d016      	beq.n	80085ce <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	4798      	blx	r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d109      	bne.n	80085c6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2206      	movs	r2, #6
 80085b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085be:	2103      	movs	r1, #3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	e006      	b.n	80085d4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	220d      	movs	r2, #13
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e002      	b.n	80085d4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	220d      	movs	r2, #13
 80085d2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2205      	movs	r2, #5
 80085d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085e8:	2300      	movs	r3, #0
 80085ea:	2200      	movs	r2, #0
 80085ec:	f001 fe38 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 80085f0:	e084      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d017      	beq.n	800862c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	220b      	movs	r2, #11
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e00a      	b.n	8008632 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d106      	bne.n	8008632 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	220d      	movs	r2, #13
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e002      	b.n	8008632 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	220d      	movs	r2, #13
 8008630:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2205      	movs	r2, #5
 8008636:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008646:	2300      	movs	r3, #0
 8008648:	2200      	movs	r2, #0
 800864a:	f001 fe09 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 800864e:	e055      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04f      	beq.n	80086fa <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
      }
      break;
 8008666:	e048      	b.n	80086fa <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fccf 	bl	8008014 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086a4:	2105      	movs	r1, #5
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fda7 	bl	8008212 <USBH_Start>
 80086c4:	e002      	b.n	80086cc <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f004 fe08 	bl	800d2dc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	f001 fdbc 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      break;
 80086e8:	e008      	b.n	80086fc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80086ea:	bf00      	nop
 80086ec:	e006      	b.n	80086fc <USBH_Process+0x4c8>
      break;
 80086ee:	bf00      	nop
 80086f0:	e004      	b.n	80086fc <USBH_Process+0x4c8>
      break;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <USBH_Process+0x4c8>
    break;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <USBH_Process+0x4c8>
      break;
 80086fa:	bf00      	nop
  }
  return USBH_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b088      	sub	sp, #32
 800870c:	af04      	add	r7, sp, #16
 800870e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b07      	cmp	r3, #7
 800871e:	f200 8204 	bhi.w	8008b2a <USBH_HandleEnum+0x422>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <USBH_HandleEnum+0x20>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008749 	.word	0x08008749
 800872c:	08008803 	.word	0x08008803
 8008730:	0800886d 	.word	0x0800886d
 8008734:	080088f7 	.word	0x080088f7
 8008738:	08008961 	.word	0x08008961
 800873c:	080089d1 	.word	0x080089d1
 8008740:	08008a6d 	.word	0x08008a6d
 8008744:	08008aeb 	.word	0x08008aeb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008748:	2108      	movs	r1, #8
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fae8 	bl	8008d20 <USBH_Get_DevDesc>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d12e      	bne.n	80087b8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7919      	ldrb	r1, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800877e:	9202      	str	r2, [sp, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	4603      	mov	r3, r0
 8008788:	2280      	movs	r2, #128	@ 0x80
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fa68 	bl	8009c60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7959      	ldrb	r1, [r3, #5]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087a4:	9202      	str	r2, [sp, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	4603      	mov	r3, r0
 80087ae:	2200      	movs	r2, #0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 fa55 	bl	8009c60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80087b6:	e1ba      	b.n	8008b2e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	f040 81b7 	bne.w	8008b2e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087c6:	3301      	adds	r3, #1
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d903      	bls.n	80087e2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	220d      	movs	r2, #13
 80087de:	701a      	strb	r2, [r3, #0]
      break;
 80087e0:	e1a5      	b.n	8008b2e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	795b      	ldrb	r3, [r3, #5]
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fa89 	bl	8009d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 fa83 	bl	8009d00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
      break;
 8008800:	e195      	b.n	8008b2e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008802:	2112      	movs	r1, #18
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fa8b 	bl	8008d20 <USBH_Get_DevDesc>
 800880a:	4603      	mov	r3, r0
 800880c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800881a:	e18a      	b.n	8008b32 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b03      	cmp	r3, #3
 8008820:	f040 8187 	bne.w	8008b32 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800882a:	3301      	adds	r3, #1
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800883a:	2b03      	cmp	r3, #3
 800883c:	d903      	bls.n	8008846 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	220d      	movs	r2, #13
 8008842:	701a      	strb	r2, [r3, #0]
      break;
 8008844:	e175      	b.n	8008b32 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fa57 	bl	8009d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	791b      	ldrb	r3, [r3, #4]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fa51 	bl	8009d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	701a      	strb	r2, [r3, #0]
      break;
 800886a:	e162      	b.n	8008b32 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800886c:	2101      	movs	r1, #1
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fb15 	bl	8008e9e <USBH_SetAddress>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d130      	bne.n	80088e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800887e:	2002      	movs	r0, #2
 8008880:	f004 fe93 	bl	800d5aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2203      	movs	r2, #3
 8008890:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7919      	ldrb	r1, [r3, #4]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80088a6:	9202      	str	r2, [sp, #8]
 80088a8:	2200      	movs	r2, #0
 80088aa:	9201      	str	r2, [sp, #4]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4603      	mov	r3, r0
 80088b0:	2280      	movs	r2, #128	@ 0x80
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f9d4 	bl	8009c60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7959      	ldrb	r1, [r3, #5]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088cc:	9202      	str	r2, [sp, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	9201      	str	r2, [sp, #4]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4603      	mov	r3, r0
 80088d6:	2200      	movs	r2, #0
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 f9c1 	bl	8009c60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80088de:	e12a      	b.n	8008b36 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	f040 8127 	bne.w	8008b36 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	220d      	movs	r2, #13
 80088ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	705a      	strb	r2, [r3, #1]
      break;
 80088f4:	e11f      	b.n	8008b36 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80088f6:	2109      	movs	r1, #9
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa3d 	bl	8008d78 <USBH_Get_CfgDesc>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2204      	movs	r2, #4
 800890c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800890e:	e114      	b.n	8008b3a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b03      	cmp	r3, #3
 8008914:	f040 8111 	bne.w	8008b3a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800891e:	3301      	adds	r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800892e:	2b03      	cmp	r3, #3
 8008930:	d903      	bls.n	800893a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220d      	movs	r2, #13
 8008936:	701a      	strb	r2, [r3, #0]
      break;
 8008938:	e0ff      	b.n	8008b3a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 f9dd 	bl	8009d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 f9d7 	bl	8009d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e0ec      	b.n	8008b3a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa05 	bl	8008d78 <USBH_Get_CfgDesc>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2205      	movs	r2, #5
 800897c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800897e:	e0de      	b.n	8008b3e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	2b03      	cmp	r3, #3
 8008984:	f040 80db 	bne.w	8008b3e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800898e:	3301      	adds	r3, #1
 8008990:	b2da      	uxtb	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d903      	bls.n	80089aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	220d      	movs	r2, #13
 80089a6:	701a      	strb	r2, [r3, #0]
      break;
 80089a8:	e0c9      	b.n	8008b3e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	795b      	ldrb	r3, [r3, #5]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 f9a5 	bl	8009d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	791b      	ldrb	r3, [r3, #4]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f99f 	bl	8009d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
      break;
 80089ce:	e0b6      	b.n	8008b3e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d036      	beq.n	8008a48 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80089e6:	23ff      	movs	r3, #255	@ 0xff
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f9ef 	bl	8008dcc <USBH_Get_StringDesc>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d111      	bne.n	8008a1c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2206      	movs	r2, #6
 80089fc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2205      	movs	r2, #5
 8008a02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a12:	2300      	movs	r3, #0
 8008a14:	2200      	movs	r2, #0
 8008a16:	f001 fc23 	bl	800a260 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a1a:	e092      	b.n	8008b42 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 808f 	bne.w	8008b42 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2206      	movs	r2, #6
 8008a28:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2205      	movs	r2, #5
 8008a2e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	f001 fc0d 	bl	800a260 <osMessageQueuePut>
      break;
 8008a46:	e07c      	b.n	8008b42 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2206      	movs	r2, #6
 8008a4c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2205      	movs	r2, #5
 8008a52:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a62:	2300      	movs	r3, #0
 8008a64:	2200      	movs	r2, #0
 8008a66:	f001 fbfb 	bl	800a260 <osMessageQueuePut>
      break;
 8008a6a:	e06a      	b.n	8008b42 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d027      	beq.n	8008ac6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a82:	23ff      	movs	r3, #255	@ 0xff
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9a1 	bl	8008dcc <USBH_Get_StringDesc>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2207      	movs	r2, #7
 8008a98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a9a:	e054      	b.n	8008b46 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d151      	bne.n	8008b46 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2207      	movs	r2, #7
 8008aa6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008abc:	2300      	movs	r3, #0
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f001 fbce 	bl	800a260 <osMessageQueuePut>
      break;
 8008ac4:	e03f      	b.n	8008b46 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2207      	movs	r2, #7
 8008aca:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2205      	movs	r2, #5
 8008ad0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f001 fbbc 	bl	800a260 <osMessageQueuePut>
      break;
 8008ae8:	e02d      	b.n	8008b46 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d017      	beq.n	8008b24 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b00:	23ff      	movs	r3, #255	@ 0xff
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f962 	bl	8008dcc <USBH_Get_StringDesc>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b16:	e018      	b.n	8008b4a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d115      	bne.n	8008b4a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
      break;
 8008b22:	e012      	b.n	8008b4a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e00f      	b.n	8008b4a <USBH_HandleEnum+0x442>

    default:
      break;
 8008b2a:	bf00      	nop
 8008b2c:	e00e      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b2e:	bf00      	nop
 8008b30:	e00c      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b32:	bf00      	nop
 8008b34:	e00a      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b36:	bf00      	nop
 8008b38:	e008      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b3a:	bf00      	nop
 8008b3c:	e006      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b3e:	bf00      	nop
 8008b40:	e004      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <USBH_HandleEnum+0x444>
      break;
 8008b4a:	bf00      	nop
  }
  return Status;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f804 	bl	8008b9a <USBH_HandleSof>
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b0b      	cmp	r3, #11
 8008baa:	d10a      	bne.n	8008bc2 <USBH_HandleSof+0x28>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f001 fb35 	bl	800a260 <osMessageQueuePut>
#endif
#endif

  return;
 8008bf6:	bf00      	nop
}
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008c0e:	bf00      	nop
}
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2200      	movs	r2, #0
 8008c52:	f001 fb05 	bl	800a260 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f004 fb46 	bl	800d312 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	791b      	ldrb	r3, [r3, #4]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f837 	bl	8009d00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f831 	bl	8009d00 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f001 fad3 	bl	800a260 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f001 fb1f 	bl	800a320 <osMessageQueueGet>
 8008ce2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff faa2 	bl	8008234 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008cf0:	e7ec      	b.n	8008ccc <USBH_Process_OS+0x8>

08008cf2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2200      	movs	r2, #0
 8008d12:	f001 faa5 	bl	800a260 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008d2c:	887b      	ldrh	r3, [r7, #2]
 8008d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d32:	d901      	bls.n	8008d38 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e01b      	b.n	8008d70 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008d3e:	887b      	ldrh	r3, [r7, #2]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	4613      	mov	r3, r2
 8008d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d48:	2100      	movs	r1, #0
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f872 	bl	8008e34 <USBH_GetDescriptor>
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d60:	887a      	ldrh	r2, [r7, #2]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f929 	bl	8008fbc <USBH_ParseDevDesc>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	331c      	adds	r3, #28
 8008d88:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d90:	d901      	bls.n	8008d96 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e016      	b.n	8008dc4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d96:	887b      	ldrh	r3, [r7, #2]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008da0:	2100      	movs	r1, #0
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f846 	bl	8008e34 <USBH_GetDescriptor>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d107      	bne.n	8008dc2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	461a      	mov	r2, r3
 8008db6:	68b9      	ldr	r1, [r7, #8]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f9af 	bl	800911c <USBH_ParseCfgDesc>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	607a      	str	r2, [r7, #4]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	460b      	mov	r3, r1
 8008dda:	72fb      	strb	r3, [r7, #11]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008de0:	893b      	ldrh	r3, [r7, #8]
 8008de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de6:	d802      	bhi.n	8008dee <USBH_Get_StringDesc+0x22>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e01c      	b.n	8008e2c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008dfa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008e02:	893b      	ldrh	r3, [r7, #8]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	460b      	mov	r3, r1
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f812 	bl	8008e34 <USBH_GetDescriptor>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d107      	bne.n	8008e2a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e20:	893a      	ldrh	r2, [r7, #8]
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fb8d 	bl	8009544 <USBH_ParseStringDesc>
  }

  return status;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	607b      	str	r3, [r7, #4]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	72fb      	strb	r3, [r7, #11]
 8008e42:	4613      	mov	r3, r2
 8008e44:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	789b      	ldrb	r3, [r3, #2]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d11c      	bne.n	8008e88 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	893a      	ldrh	r2, [r7, #8]
 8008e64:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008e66:	893b      	ldrh	r3, [r7, #8]
 8008e68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e70:	d104      	bne.n	8008e7c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f240 4209 	movw	r2, #1033	@ 0x409
 8008e78:	829a      	strh	r2, [r3, #20]
 8008e7a:	e002      	b.n	8008e82 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8b3a      	ldrh	r2, [r7, #24]
 8008e86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e88:	8b3b      	ldrh	r3, [r7, #24]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 fba5 	bl	80095de <USBH_CtlReq>
 8008e94:	4603      	mov	r3, r0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	789b      	ldrb	r3, [r3, #2]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10f      	bne.n	8008ed2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2205      	movs	r2, #5
 8008ebc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb81 	bl	80095de <USBH_CtlReq>
 8008edc:	4603      	mov	r3, r0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	789b      	ldrb	r3, [r3, #2]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d10e      	bne.n	8008f18 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2209      	movs	r2, #9
 8008f04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	887a      	ldrh	r2, [r7, #2]
 8008f0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb5e 	bl	80095de <USBH_CtlReq>
 8008f22:	4603      	mov	r3, r0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	789b      	ldrb	r3, [r3, #2]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d10f      	bne.n	8008f60 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2203      	movs	r2, #3
 8008f4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f60:	2200      	movs	r2, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fb3a 	bl	80095de <USBH_CtlReq>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	789b      	ldrb	r3, [r3, #2]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d10f      	bne.n	8008fa8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008fa8:	2200      	movs	r2, #0
 8008faa:	2100      	movs	r1, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fb16 	bl	80095de <USBH_CtlReq>
 8008fb2:	4603      	mov	r3, r0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008fd0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e094      	b.n	800910a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	781a      	ldrb	r2, [r3, #0]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	785a      	ldrb	r2, [r3, #1]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	3303      	adds	r3, #3
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	b29b      	uxth	r3, r3
 8009002:	4313      	orrs	r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	791a      	ldrb	r2, [r3, #4]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	795a      	ldrb	r2, [r3, #5]
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	799a      	ldrb	r2, [r3, #6]
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	79da      	ldrb	r2, [r3, #7]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800903a:	2b01      	cmp	r3, #1
 800903c:	d11b      	bne.n	8009076 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	79db      	ldrb	r3, [r3, #7]
 8009042:	2b20      	cmp	r3, #32
 8009044:	dc0f      	bgt.n	8009066 <USBH_ParseDevDesc+0xaa>
 8009046:	2b08      	cmp	r3, #8
 8009048:	db0f      	blt.n	800906a <USBH_ParseDevDesc+0xae>
 800904a:	3b08      	subs	r3, #8
 800904c:	4a32      	ldr	r2, [pc, #200]	@ (8009118 <USBH_ParseDevDesc+0x15c>)
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	bf14      	ite	ne
 800905a:	2301      	movne	r3, #1
 800905c:	2300      	moveq	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <USBH_ParseDevDesc+0xb6>
 8009064:	e001      	b.n	800906a <USBH_ParseDevDesc+0xae>
 8009066:	2b40      	cmp	r3, #64	@ 0x40
 8009068:	d003      	beq.n	8009072 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2208      	movs	r2, #8
 800906e:	71da      	strb	r2, [r3, #7]
        break;
 8009070:	e000      	b.n	8009074 <USBH_ParseDevDesc+0xb8>
        break;
 8009072:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009074:	e00e      	b.n	8009094 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800907c:	2b02      	cmp	r3, #2
 800907e:	d107      	bne.n	8009090 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	79db      	ldrb	r3, [r3, #7]
 8009084:	2b08      	cmp	r3, #8
 8009086:	d005      	beq.n	8009094 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2208      	movs	r2, #8
 800908c:	71da      	strb	r2, [r3, #7]
 800908e:	e001      	b.n	8009094 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009090:	2303      	movs	r3, #3
 8009092:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009094:	88fb      	ldrh	r3, [r7, #6]
 8009096:	2b08      	cmp	r3, #8
 8009098:	d936      	bls.n	8009108 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	3308      	adds	r3, #8
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3309      	adds	r3, #9
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	021b      	lsls	r3, r3, #8
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	330a      	adds	r3, #10
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	330b      	adds	r3, #11
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4313      	orrs	r3, r2
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	330c      	adds	r3, #12
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	330d      	adds	r3, #13
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	7b9a      	ldrb	r2, [r3, #14]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	7bda      	ldrb	r2, [r3, #15]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	7c1a      	ldrb	r2, [r3, #16]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	7c5a      	ldrb	r2, [r3, #17]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	01000101 	.word	0x01000101

0800911c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08c      	sub	sp, #48	@ 0x30
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009130:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800914a:	2302      	movs	r3, #2
 800914c:	e0da      	b.n	8009304 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b09      	cmp	r3, #9
 8009158:	d002      	beq.n	8009160 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	2209      	movs	r2, #9
 800915e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	781a      	ldrb	r2, [r3, #0]
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	785a      	ldrb	r2, [r3, #1]
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3302      	adds	r3, #2
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3303      	adds	r3, #3
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	021b      	lsls	r3, r3, #8
 8009180:	b29b      	uxth	r3, r3
 8009182:	4313      	orrs	r3, r2
 8009184:	b29b      	uxth	r3, r3
 8009186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800918a:	bf28      	it	cs
 800918c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009190:	b29a      	uxth	r2, r3
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	791a      	ldrb	r2, [r3, #4]
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	795a      	ldrb	r2, [r3, #5]
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	799a      	ldrb	r2, [r3, #6]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	79da      	ldrb	r2, [r3, #7]
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	7a1a      	ldrb	r2, [r3, #8]
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	2b09      	cmp	r3, #9
 80091c2:	f240 809d 	bls.w	8009300 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80091c6:	2309      	movs	r3, #9
 80091c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80091ce:	e081      	b.n	80092d4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091d0:	f107 0316 	add.w	r3, r7, #22
 80091d4:	4619      	mov	r1, r3
 80091d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d8:	f000 f9e7 	bl	80095aa <USBH_GetNextDesc>
 80091dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d176      	bne.n	80092d4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d002      	beq.n	80091f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	2209      	movs	r2, #9
 80091f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80091f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091f8:	221a      	movs	r2, #26
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
 80091fe:	3308      	adds	r3, #8
 8009200:	6a3a      	ldr	r2, [r7, #32]
 8009202:	4413      	add	r3, r2
 8009204:	3302      	adds	r3, #2
 8009206:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800920a:	69f8      	ldr	r0, [r7, #28]
 800920c:	f000 f87e 	bl	800930c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800921a:	e043      	b.n	80092a4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800921c:	f107 0316 	add.w	r3, r7, #22
 8009220:	4619      	mov	r1, r3
 8009222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009224:	f000 f9c1 	bl	80095aa <USBH_GetNextDesc>
 8009228:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b05      	cmp	r3, #5
 8009230:	d138      	bne.n	80092a4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	795b      	ldrb	r3, [r3, #5]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d113      	bne.n	8009262 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800923e:	2b02      	cmp	r3, #2
 8009240:	d003      	beq.n	800924a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	799b      	ldrb	r3, [r3, #6]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d10b      	bne.n	8009262 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	79db      	ldrb	r3, [r3, #7]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <USBH_ParseCfgDesc+0x14e>
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b09      	cmp	r3, #9
 8009258:	d007      	beq.n	800926a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	2209      	movs	r2, #9
 800925e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009260:	e003      	b.n	800926a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	2207      	movs	r2, #7
 8009266:	701a      	strb	r2, [r3, #0]
 8009268:	e000      	b.n	800926c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800926a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800926c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009270:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009274:	3201      	adds	r2, #1
 8009276:	00d2      	lsls	r2, r2, #3
 8009278:	211a      	movs	r1, #26
 800927a:	fb01 f303 	mul.w	r3, r1, r3
 800927e:	4413      	add	r3, r2
 8009280:	3308      	adds	r3, #8
 8009282:	6a3a      	ldr	r2, [r7, #32]
 8009284:	4413      	add	r3, r2
 8009286:	3304      	adds	r3, #4
 8009288:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800928a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800928c:	69b9      	ldr	r1, [r7, #24]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f870 	bl	8009374 <USBH_ParseEPDesc>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800929a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800929e:	3301      	adds	r3, #1
 80092a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	791b      	ldrb	r3, [r3, #4]
 80092a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d204      	bcs.n	80092ba <USBH_ParseCfgDesc+0x19e>
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	885a      	ldrh	r2, [r3, #2]
 80092b4:	8afb      	ldrh	r3, [r7, #22]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d8b0      	bhi.n	800921c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	791b      	ldrb	r3, [r3, #4]
 80092be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d201      	bcs.n	80092ca <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e01c      	b.n	8009304 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80092ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ce:	3301      	adds	r3, #1
 80092d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d805      	bhi.n	80092e8 <USBH_ParseCfgDesc+0x1cc>
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	885a      	ldrh	r2, [r3, #2]
 80092e0:	8afb      	ldrh	r3, [r7, #22]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	f63f af74 	bhi.w	80091d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	791b      	ldrb	r3, [r3, #4]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	bf28      	it	cs
 80092f0:	2302      	movcs	r3, #2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d201      	bcs.n	8009300 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e001      	b.n	8009304 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009304:	4618      	mov	r0, r3
 8009306:	3730      	adds	r7, #48	@ 0x30
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785a      	ldrb	r2, [r3, #1]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	789a      	ldrb	r2, [r3, #2]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	78da      	ldrb	r2, [r3, #3]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	3304      	adds	r3, #4
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b02      	cmp	r3, #2
 800933e:	bf28      	it	cs
 8009340:	2302      	movcs	r3, #2
 8009342:	b2da      	uxtb	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	795a      	ldrb	r2, [r3, #5]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	799a      	ldrb	r2, [r3, #6]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	79da      	ldrb	r2, [r3, #7]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	7a1a      	ldrb	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	721a      	strb	r2, [r3, #8]
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	781a      	ldrb	r2, [r3, #0]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	785a      	ldrb	r2, [r3, #1]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	789a      	ldrb	r2, [r3, #2]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	78da      	ldrb	r2, [r3, #3]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3304      	adds	r3, #4
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3305      	adds	r3, #5
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4313      	orrs	r3, r2
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	799a      	ldrb	r2, [r3, #6]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	889b      	ldrh	r3, [r3, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80093d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093d6:	d804      	bhi.n	80093e2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80093dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e0:	d901      	bls.n	80093e6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80093e2:	2303      	movs	r3, #3
 80093e4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d136      	bne.n	800945e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	78db      	ldrb	r3, [r3, #3]
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d108      	bne.n	800940e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	889b      	ldrh	r3, [r3, #4]
 8009400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009404:	f240 8097 	bls.w	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009408:	2303      	movs	r3, #3
 800940a:	75fb      	strb	r3, [r7, #23]
 800940c:	e093      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	78db      	ldrb	r3, [r3, #3]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	889b      	ldrh	r3, [r3, #4]
 800941e:	2b40      	cmp	r3, #64	@ 0x40
 8009420:	f240 8089 	bls.w	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009424:	2303      	movs	r3, #3
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	e085      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	78db      	ldrb	r3, [r3, #3]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b01      	cmp	r3, #1
 8009434:	d005      	beq.n	8009442 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	78db      	ldrb	r3, [r3, #3]
 800943a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800943e:	2b03      	cmp	r3, #3
 8009440:	d10a      	bne.n	8009458 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	799b      	ldrb	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <USBH_ParseEPDesc+0xde>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	799b      	ldrb	r3, [r3, #6]
 800944e:	2b10      	cmp	r3, #16
 8009450:	d970      	bls.n	8009534 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009452:	2303      	movs	r3, #3
 8009454:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009456:	e06d      	b.n	8009534 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009458:	2303      	movs	r3, #3
 800945a:	75fb      	strb	r3, [r7, #23]
 800945c:	e06b      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009464:	2b01      	cmp	r3, #1
 8009466:	d13c      	bne.n	80094e2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	78db      	ldrb	r3, [r3, #3]
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b02      	cmp	r3, #2
 8009472:	d005      	beq.n	8009480 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	889b      	ldrh	r3, [r3, #4]
 8009484:	2b40      	cmp	r3, #64	@ 0x40
 8009486:	d956      	bls.n	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009488:	2303      	movs	r3, #3
 800948a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800948c:	e053      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	78db      	ldrb	r3, [r3, #3]
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	2b01      	cmp	r3, #1
 8009498:	d10e      	bne.n	80094b8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	799b      	ldrb	r3, [r3, #6]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80094a6:	2b10      	cmp	r3, #16
 80094a8:	d803      	bhi.n	80094b2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80094ae:	2b40      	cmp	r3, #64	@ 0x40
 80094b0:	d941      	bls.n	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094b2:	2303      	movs	r3, #3
 80094b4:	75fb      	strb	r3, [r7, #23]
 80094b6:	e03e      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	78db      	ldrb	r3, [r3, #3]
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	d10b      	bne.n	80094dc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	799b      	ldrb	r3, [r3, #6]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <USBH_ParseEPDesc+0x162>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	889b      	ldrh	r3, [r3, #4]
 80094d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d4:	d32f      	bcc.n	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094d6:	2303      	movs	r3, #3
 80094d8:	75fb      	strb	r3, [r7, #23]
 80094da:	e02c      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094dc:	2303      	movs	r3, #3
 80094de:	75fb      	strb	r3, [r7, #23]
 80094e0:	e029      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d120      	bne.n	800952e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	889b      	ldrh	r3, [r3, #4]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d01a      	beq.n	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009500:	2303      	movs	r3, #3
 8009502:	75fb      	strb	r3, [r7, #23]
 8009504:	e017      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	78db      	ldrb	r3, [r3, #3]
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d10a      	bne.n	8009528 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	799b      	ldrb	r3, [r3, #6]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <USBH_ParseEPDesc+0x1ae>
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	889b      	ldrh	r3, [r3, #4]
 800951e:	2b08      	cmp	r3, #8
 8009520:	d909      	bls.n	8009536 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009522:	2303      	movs	r3, #3
 8009524:	75fb      	strb	r3, [r7, #23]
 8009526:	e006      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009528:	2303      	movs	r3, #3
 800952a:	75fb      	strb	r3, [r7, #23]
 800952c:	e003      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800952e:	2303      	movs	r3, #3
 8009530:	75fb      	strb	r3, [r7, #23]
 8009532:	e000      	b.n	8009536 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009534:	bf00      	nop
  }

  return status;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
}
 8009538:	4618      	mov	r0, r3
 800953a:	371c      	adds	r7, #28
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b03      	cmp	r3, #3
 800955a:	d120      	bne.n	800959e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	1e9a      	subs	r2, r3, #2
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	4293      	cmp	r3, r2
 8009566:	bf28      	it	cs
 8009568:	4613      	movcs	r3, r2
 800956a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3302      	adds	r3, #2
 8009570:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009572:	2300      	movs	r3, #0
 8009574:	82fb      	strh	r3, [r7, #22]
 8009576:	e00b      	b.n	8009590 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009578:	8afb      	ldrh	r3, [r7, #22]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3301      	adds	r3, #1
 8009588:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800958a:	8afb      	ldrh	r3, [r7, #22]
 800958c:	3302      	adds	r3, #2
 800958e:	82fb      	strh	r3, [r7, #22]
 8009590:	8afa      	ldrh	r2, [r7, #22]
 8009592:	8abb      	ldrh	r3, [r7, #20]
 8009594:	429a      	cmp	r2, r3
 8009596:	d3ef      	bcc.n	8009578 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
  }
}
 800959e:	bf00      	nop
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	7812      	ldrb	r2, [r2, #0]
 80095bc:	4413      	add	r3, r2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80095d0:	68fb      	ldr	r3, [r7, #12]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b086      	sub	sp, #24
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	4613      	mov	r3, r2
 80095ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	789b      	ldrb	r3, [r3, #2]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <USBH_CtlReq+0x20>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d01d      	beq.n	8009638 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80095fc:	e043      	b.n	8009686 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2202      	movs	r2, #2
 8009614:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2203      	movs	r2, #3
 800961e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800962e:	2300      	movs	r3, #0
 8009630:	2200      	movs	r2, #0
 8009632:	f000 fe15 	bl	800a260 <osMessageQueuePut>
      break;
 8009636:	e026      	b.n	8009686 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f829 	bl	8009690 <USBH_HandleControl>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <USBH_CtlReq+0x70>
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d106      	bne.n	800965c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	761a      	strb	r2, [r3, #24]
 800965a:	e005      	b.n	8009668 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	2b02      	cmp	r3, #2
 8009660:	d102      	bne.n	8009668 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2203      	movs	r2, #3
 800966c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	f000 fdee 	bl	800a260 <osMessageQueuePut>
      break;
 8009684:	bf00      	nop
  }
  return status;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af02      	add	r7, sp, #8
 8009696:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7e1b      	ldrb	r3, [r3, #24]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	2b0a      	cmp	r3, #10
 80096a8:	f200 8229 	bhi.w	8009afe <USBH_HandleControl+0x46e>
 80096ac:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <USBH_HandleControl+0x24>)
 80096ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b2:	bf00      	nop
 80096b4:	080096e1 	.word	0x080096e1
 80096b8:	080096fb 	.word	0x080096fb
 80096bc:	0800979d 	.word	0x0800979d
 80096c0:	080097c3 	.word	0x080097c3
 80096c4:	0800984f 	.word	0x0800984f
 80096c8:	08009879 	.word	0x08009879
 80096cc:	0800993b 	.word	0x0800993b
 80096d0:	0800995d 	.word	0x0800995d
 80096d4:	080099ef 	.word	0x080099ef
 80096d8:	08009a15 	.word	0x08009a15
 80096dc:	08009aa7 	.word	0x08009aa7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 0110 	add.w	r1, r3, #16
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	795b      	ldrb	r3, [r3, #5]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fa17 	bl	8009b20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	761a      	strb	r2, [r3, #24]
      break;
 80096f8:	e20c      	b.n	8009b14 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	795b      	ldrb	r3, [r3, #5]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f003 fef5 	bl	800d4f0 <USBH_LL_GetURBState>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d12c      	bne.n	800976a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7c1b      	ldrb	r3, [r3, #16]
 8009714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009718:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	8adb      	ldrh	r3, [r3, #22]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009722:	7b7b      	ldrb	r3, [r7, #13]
 8009724:	2b80      	cmp	r3, #128	@ 0x80
 8009726:	d103      	bne.n	8009730 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2203      	movs	r2, #3
 800972c:	761a      	strb	r2, [r3, #24]
 800972e:	e00d      	b.n	800974c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2205      	movs	r2, #5
 8009734:	761a      	strb	r2, [r3, #24]
 8009736:	e009      	b.n	800974c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009738:	7b7b      	ldrb	r3, [r7, #13]
 800973a:	2b80      	cmp	r3, #128	@ 0x80
 800973c:	d103      	bne.n	8009746 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2209      	movs	r2, #9
 8009742:	761a      	strb	r2, [r3, #24]
 8009744:	e002      	b.n	800974c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2207      	movs	r2, #7
 800974a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2203      	movs	r2, #3
 8009750:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009760:	2300      	movs	r3, #0
 8009762:	2200      	movs	r2, #0
 8009764:	f000 fd7c 	bl	800a260 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009768:	e1cb      	b.n	8009b02 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	2b04      	cmp	r3, #4
 800976e:	d003      	beq.n	8009778 <USBH_HandleControl+0xe8>
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	2b02      	cmp	r3, #2
 8009774:	f040 81c5 	bne.w	8009b02 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	220b      	movs	r2, #11
 800977c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2203      	movs	r2, #3
 8009782:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009792:	2300      	movs	r3, #0
 8009794:	2200      	movs	r2, #0
 8009796:	f000 fd63 	bl	800a260 <osMessageQueuePut>
      break;
 800979a:	e1b2      	b.n	8009b02 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6899      	ldr	r1, [r3, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	899a      	ldrh	r2, [r3, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9f2 	bl	8009b9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2204      	movs	r2, #4
 80097be:	761a      	strb	r2, [r3, #24]
      break;
 80097c0:	e1a8      	b.n	8009b14 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f003 fe91 	bl	800d4f0 <USBH_LL_GetURBState>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d110      	bne.n	80097fa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2209      	movs	r2, #9
 80097dc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2203      	movs	r2, #3
 80097e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80097f2:	2300      	movs	r3, #0
 80097f4:	2200      	movs	r2, #0
 80097f6:	f000 fd33 	bl	800a260 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b05      	cmp	r3, #5
 80097fe:	d110      	bne.n	8009822 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2203      	movs	r2, #3
 8009808:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009818:	2300      	movs	r3, #0
 800981a:	2200      	movs	r2, #0
 800981c:	f000 fd20 	bl	800a260 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009820:	e171      	b.n	8009b06 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b04      	cmp	r3, #4
 8009826:	f040 816e 	bne.w	8009b06 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	220b      	movs	r2, #11
 800982e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2203      	movs	r2, #3
 8009834:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009844:	2300      	movs	r3, #0
 8009846:	2200      	movs	r2, #0
 8009848:	f000 fd0a 	bl	800a260 <osMessageQueuePut>
      break;
 800984c:	e15b      	b.n	8009b06 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6899      	ldr	r1, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	899a      	ldrh	r2, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	795b      	ldrb	r3, [r3, #5]
 800985a:	2001      	movs	r0, #1
 800985c:	9000      	str	r0, [sp, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f978 	bl	8009b54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2206      	movs	r2, #6
 8009874:	761a      	strb	r2, [r3, #24]
      break;
 8009876:	e14d      	b.n	8009b14 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	795b      	ldrb	r3, [r3, #5]
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f003 fe36 	bl	800d4f0 <USBH_LL_GetURBState>
 8009884:	4603      	mov	r3, r0
 8009886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d111      	bne.n	80098b2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2207      	movs	r2, #7
 8009892:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2203      	movs	r2, #3
 8009898:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80098a8:	2300      	movs	r3, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	f000 fcd8 	bl	800a260 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098b0:	e12b      	b.n	8009b0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d113      	bne.n	80098e0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	220c      	movs	r2, #12
 80098bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80098be:	2303      	movs	r3, #3
 80098c0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2203      	movs	r2, #3
 80098c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80098d6:	2300      	movs	r3, #0
 80098d8:	2200      	movs	r2, #0
 80098da:	f000 fcc1 	bl	800a260 <osMessageQueuePut>
      break;
 80098de:	e114      	b.n	8009b0a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d111      	bne.n	800990a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2205      	movs	r2, #5
 80098ea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2203      	movs	r2, #3
 80098f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009900:	2300      	movs	r3, #0
 8009902:	2200      	movs	r2, #0
 8009904:	f000 fcac 	bl	800a260 <osMessageQueuePut>
      break;
 8009908:	e0ff      	b.n	8009b0a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b04      	cmp	r3, #4
 800990e:	f040 80fc 	bne.w	8009b0a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	220b      	movs	r2, #11
 8009916:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009918:	2302      	movs	r3, #2
 800991a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2203      	movs	r2, #3
 8009920:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	f000 fc94 	bl	800a260 <osMessageQueuePut>
      break;
 8009938:	e0e7      	b.n	8009b0a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	791b      	ldrb	r3, [r3, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	2100      	movs	r1, #0
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f92b 	bl	8009b9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2208      	movs	r2, #8
 8009958:	761a      	strb	r2, [r3, #24]

      break;
 800995a:	e0db      	b.n	8009b14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	791b      	ldrb	r3, [r3, #4]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f003 fdc4 	bl	800d4f0 <USBH_LL_GetURBState>
 8009968:	4603      	mov	r3, r0
 800996a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d113      	bne.n	800999a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	220d      	movs	r2, #13
 8009976:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2203      	movs	r2, #3
 8009980:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009990:	2300      	movs	r3, #0
 8009992:	2200      	movs	r2, #0
 8009994:	f000 fc64 	bl	800a260 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009998:	e0b9      	b.n	8009b0e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	2b04      	cmp	r3, #4
 800999e:	d111      	bne.n	80099c4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	220b      	movs	r2, #11
 80099a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2203      	movs	r2, #3
 80099aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80099ba:	2300      	movs	r3, #0
 80099bc:	2200      	movs	r2, #0
 80099be:	f000 fc4f 	bl	800a260 <osMessageQueuePut>
      break;
 80099c2:	e0a4      	b.n	8009b0e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	f040 80a1 	bne.w	8009b0e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80099cc:	2303      	movs	r3, #3
 80099ce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2203      	movs	r2, #3
 80099d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80099e4:	2300      	movs	r3, #0
 80099e6:	2200      	movs	r2, #0
 80099e8:	f000 fc3a 	bl	800a260 <osMessageQueuePut>
      break;
 80099ec:	e08f      	b.n	8009b0e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	795b      	ldrb	r3, [r3, #5]
 80099f2:	2201      	movs	r2, #1
 80099f4:	9200      	str	r2, [sp, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	2100      	movs	r1, #0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8aa 	bl	8009b54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	220a      	movs	r2, #10
 8009a10:	761a      	strb	r2, [r3, #24]
      break;
 8009a12:	e07f      	b.n	8009b14 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	795b      	ldrb	r3, [r3, #5]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f003 fd68 	bl	800d4f0 <USBH_LL_GetURBState>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d113      	bne.n	8009a52 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	220d      	movs	r2, #13
 8009a32:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2203      	movs	r2, #3
 8009a38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f000 fc08 	bl	800a260 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a50:	e05f      	b.n	8009b12 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d111      	bne.n	8009a7c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2209      	movs	r2, #9
 8009a5c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2203      	movs	r2, #3
 8009a62:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a72:	2300      	movs	r3, #0
 8009a74:	2200      	movs	r2, #0
 8009a76:	f000 fbf3 	bl	800a260 <osMessageQueuePut>
      break;
 8009a7a:	e04a      	b.n	8009b12 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d147      	bne.n	8009b12 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	220b      	movs	r2, #11
 8009a86:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f000 fbde 	bl	800a260 <osMessageQueuePut>
      break;
 8009aa4:	e035      	b.n	8009b12 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7e5b      	ldrb	r3, [r3, #25]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	765a      	strb	r2, [r3, #25]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7e5b      	ldrb	r3, [r3, #25]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d806      	bhi.n	8009ac8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009ac6:	e025      	b.n	8009b14 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ace:	2106      	movs	r1, #6
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	795b      	ldrb	r3, [r3, #5]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f90d 	bl	8009d00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	791b      	ldrb	r3, [r3, #4]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f907 	bl	8009d00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	73fb      	strb	r3, [r7, #15]
      break;
 8009afc:	e00a      	b.n	8009b14 <USBH_HandleControl+0x484>

    default:
      break;
 8009afe:	bf00      	nop
 8009b00:	e008      	b.n	8009b14 <USBH_HandleControl+0x484>
      break;
 8009b02:	bf00      	nop
 8009b04:	e006      	b.n	8009b14 <USBH_HandleControl+0x484>
      break;
 8009b06:	bf00      	nop
 8009b08:	e004      	b.n	8009b14 <USBH_HandleControl+0x484>
      break;
 8009b0a:	bf00      	nop
 8009b0c:	e002      	b.n	8009b14 <USBH_HandleControl+0x484>
      break;
 8009b0e:	bf00      	nop
 8009b10:	e000      	b.n	8009b14 <USBH_HandleControl+0x484>
      break;
 8009b12:	bf00      	nop
  }

  return status;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop

08009b20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b2e:	79f9      	ldrb	r1, [r7, #7]
 8009b30:	2300      	movs	r3, #0
 8009b32:	9303      	str	r3, [sp, #12]
 8009b34:	2308      	movs	r3, #8
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	2200      	movs	r2, #0
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f003 fca2 	bl	800d48e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4611      	mov	r1, r2
 8009b60:	461a      	mov	r2, r3
 8009b62:	460b      	mov	r3, r1
 8009b64:	80fb      	strh	r3, [r7, #6]
 8009b66:	4613      	mov	r3, r2
 8009b68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b78:	7979      	ldrb	r1, [r7, #5]
 8009b7a:	7e3b      	ldrb	r3, [r7, #24]
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	9302      	str	r3, [sp, #8]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	2301      	movs	r3, #1
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f003 fc7d 	bl	800d48e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b088      	sub	sp, #32
 8009ba2:	af04      	add	r7, sp, #16
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	461a      	mov	r2, r3
 8009bac:	460b      	mov	r3, r1
 8009bae:	80fb      	strh	r3, [r7, #6]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bb4:	7979      	ldrb	r1, [r7, #5]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	9302      	str	r3, [sp, #8]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2201      	movs	r2, #1
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f003 fc5f 	bl	800d48e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009bd0:	2300      	movs	r3, #0

}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b088      	sub	sp, #32
 8009bde:	af04      	add	r7, sp, #16
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	4611      	mov	r1, r2
 8009be6:	461a      	mov	r2, r3
 8009be8:	460b      	mov	r3, r1
 8009bea:	80fb      	strh	r3, [r7, #6]
 8009bec:	4613      	mov	r3, r2
 8009bee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bfe:	7979      	ldrb	r1, [r7, #5]
 8009c00:	7e3b      	ldrb	r3, [r7, #24]
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	9302      	str	r3, [sp, #8]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	2302      	movs	r3, #2
 8009c12:	2200      	movs	r2, #0
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f003 fc3a 	bl	800d48e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	4611      	mov	r1, r2
 8009c30:	461a      	mov	r2, r3
 8009c32:	460b      	mov	r3, r1
 8009c34:	80fb      	strh	r3, [r7, #6]
 8009c36:	4613      	mov	r3, r2
 8009c38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c3a:	7979      	ldrb	r1, [r7, #5]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	88fb      	ldrh	r3, [r7, #6]
 8009c42:	9302      	str	r3, [sp, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	2201      	movs	r2, #1
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f003 fc1c 	bl	800d48e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af04      	add	r7, sp, #16
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	70fb      	strb	r3, [r7, #3]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70bb      	strb	r3, [r7, #2]
 8009c76:	4613      	mov	r3, r2
 8009c78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009c7a:	7878      	ldrb	r0, [r7, #1]
 8009c7c:	78ba      	ldrb	r2, [r7, #2]
 8009c7e:	78f9      	ldrb	r1, [r7, #3]
 8009c80:	8b3b      	ldrh	r3, [r7, #24]
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	7d3b      	ldrb	r3, [r7, #20]
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	7c3b      	ldrb	r3, [r7, #16]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f003 fbaf 	bl	800d3f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f003 fbce 	bl	800d450 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f836 	bl	8009d3c <USBH_GetFreePipe>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009cd4:	89fb      	ldrh	r3, [r7, #14]
 8009cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d00a      	beq.n	8009cf4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	89fb      	ldrh	r3, [r7, #14]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	33e0      	adds	r3, #224	@ 0xe0
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009cf4:	89fb      	ldrh	r3, [r7, #14]
 8009cf6:	b2db      	uxtb	r3, r3
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	2b0f      	cmp	r3, #15
 8009d10:	d80d      	bhi.n	8009d2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	33e0      	adds	r3, #224	@ 0xe0
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4413      	add	r3, r2
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	33e0      	adds	r3, #224	@ 0xe0
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
 8009d4c:	e00f      	b.n	8009d6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	33e0      	adds	r3, #224	@ 0xe0
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	e007      	b.n	8009d78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	73fb      	strb	r3, [r7, #15]
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	d9ec      	bls.n	8009d4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009d74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <__NVIC_SetPriority>:
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	6039      	str	r1, [r7, #0]
 8009d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	db0a      	blt.n	8009dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	490c      	ldr	r1, [pc, #48]	@ (8009dd0 <__NVIC_SetPriority+0x4c>)
 8009d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da2:	0112      	lsls	r2, r2, #4
 8009da4:	b2d2      	uxtb	r2, r2
 8009da6:	440b      	add	r3, r1
 8009da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009dac:	e00a      	b.n	8009dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	4908      	ldr	r1, [pc, #32]	@ (8009dd4 <__NVIC_SetPriority+0x50>)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	3b04      	subs	r3, #4
 8009dbc:	0112      	lsls	r2, r2, #4
 8009dbe:	b2d2      	uxtb	r2, r2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	761a      	strb	r2, [r3, #24]
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	e000e100 	.word	0xe000e100
 8009dd4:	e000ed00 	.word	0xe000ed00

08009dd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ddc:	4b05      	ldr	r3, [pc, #20]	@ (8009df4 <SysTick_Handler+0x1c>)
 8009dde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009de0:	f001 fff4 	bl	800bdcc <xTaskGetSchedulerState>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d001      	beq.n	8009dee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009dea:	f002 fead 	bl	800cb48 <xPortSysTickHandler>
  }
}
 8009dee:	bf00      	nop
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	e000e010 	.word	0xe000e010

08009df8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	f06f 0004 	mvn.w	r0, #4
 8009e02:	f7ff ffbf 	bl	8009d84 <__NVIC_SetPriority>
#endif
}
 8009e06:	bf00      	nop
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e12:	f3ef 8305 	mrs	r3, IPSR
 8009e16:	603b      	str	r3, [r7, #0]
  return(result);
 8009e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e1e:	f06f 0305 	mvn.w	r3, #5
 8009e22:	607b      	str	r3, [r7, #4]
 8009e24:	e00c      	b.n	8009e40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e26:	4b0a      	ldr	r3, [pc, #40]	@ (8009e50 <osKernelInitialize+0x44>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e2e:	4b08      	ldr	r3, [pc, #32]	@ (8009e50 <osKernelInitialize+0x44>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	e002      	b.n	8009e40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e40:	687b      	ldr	r3, [r7, #4]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	20003140 	.word	0x20003140

08009e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e5a:	f3ef 8305 	mrs	r3, IPSR
 8009e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d003      	beq.n	8009e6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e66:	f06f 0305 	mvn.w	r3, #5
 8009e6a:	607b      	str	r3, [r7, #4]
 8009e6c:	e010      	b.n	8009e90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e9c <osKernelStart+0x48>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d109      	bne.n	8009e8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e76:	f7ff ffbf 	bl	8009df8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e7a:	4b08      	ldr	r3, [pc, #32]	@ (8009e9c <osKernelStart+0x48>)
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e80:	f001 fb40 	bl	800b504 <vTaskStartScheduler>
      stat = osOK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	607b      	str	r3, [r7, #4]
 8009e88:	e002      	b.n	8009e90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e90:	687b      	ldr	r3, [r7, #4]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20003140 	.word	0x20003140

08009ea0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08e      	sub	sp, #56	@ 0x38
 8009ea4:	af04      	add	r7, sp, #16
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eb0:	f3ef 8305 	mrs	r3, IPSR
 8009eb4:	617b      	str	r3, [r7, #20]
  return(result);
 8009eb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d17e      	bne.n	8009fba <osThreadNew+0x11a>
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d07b      	beq.n	8009fba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ec2:	2380      	movs	r3, #128	@ 0x80
 8009ec4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ec6:	2318      	movs	r3, #24
 8009ec8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009ece:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d045      	beq.n	8009f66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <osThreadNew+0x48>
        name = attr->name;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <osThreadNew+0x6e>
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2b38      	cmp	r3, #56	@ 0x38
 8009f00:	d805      	bhi.n	8009f0e <osThreadNew+0x6e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <osThreadNew+0x72>
        return (NULL);
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e054      	b.n	8009fbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	089b      	lsrs	r3, r3, #2
 8009f20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00e      	beq.n	8009f48 <osThreadNew+0xa8>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	2ba7      	cmp	r3, #167	@ 0xa7
 8009f30:	d90a      	bls.n	8009f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d006      	beq.n	8009f48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <osThreadNew+0xa8>
        mem = 1;
 8009f42:	2301      	movs	r3, #1
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	e010      	b.n	8009f6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10c      	bne.n	8009f6a <osThreadNew+0xca>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <osThreadNew+0xca>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <osThreadNew+0xca>
          mem = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61bb      	str	r3, [r7, #24]
 8009f64:	e001      	b.n	8009f6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d110      	bne.n	8009f92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f78:	9202      	str	r2, [sp, #8]
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	6a3a      	ldr	r2, [r7, #32]
 8009f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f001 f8c8 	bl	800b11c <xTaskCreateStatic>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	613b      	str	r3, [r7, #16]
 8009f90:	e013      	b.n	8009fba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d110      	bne.n	8009fba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	f107 0310 	add.w	r3, r7, #16
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f001 f916 	bl	800b1dc <xTaskCreate>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d001      	beq.n	8009fba <osThreadNew+0x11a>
            hTask = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fba:	693b      	ldr	r3, [r7, #16]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3728      	adds	r7, #40	@ 0x28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fcc:	f3ef 8305 	mrs	r3, IPSR
 8009fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <osDelay+0x1c>
    stat = osErrorISR;
 8009fd8:	f06f 0305 	mvn.w	r3, #5
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e007      	b.n	8009ff0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fa54 	bl	800b498 <vTaskDelay>
    }
  }

  return (stat);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f002 fbbc 	bl	800c780 <pvTimerGetTimerID>
 800a008:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <TimerCallback+0x22>
    callb->func (callb->arg);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	6852      	ldr	r2, [r2, #4]
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
  }
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b08c      	sub	sp, #48	@ 0x30
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	460b      	mov	r3, r1
 800a032:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a038:	f3ef 8305 	mrs	r3, IPSR
 800a03c:	613b      	str	r3, [r7, #16]
  return(result);
 800a03e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a040:	2b00      	cmp	r3, #0
 800a042:	d163      	bne.n	800a10c <osTimerNew+0xe8>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d060      	beq.n	800a10c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a04a:	2008      	movs	r0, #8
 800a04c:	f002 fe0e 	bl	800cc6c <pvPortMalloc>
 800a050:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d059      	beq.n	800a10c <osTimerNew+0xe8>
      callb->func = func;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a064:	7afb      	ldrb	r3, [r7, #11]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d102      	bne.n	800a070 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
 800a06e:	e001      	b.n	800a074 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a070:	2301      	movs	r3, #1
 800a072:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a074:	f04f 33ff 	mov.w	r3, #4294967295
 800a078:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d01c      	beq.n	800a0be <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <osTimerNew+0x6e>
          name = attr->name;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <osTimerNew+0x84>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a0a0:	d902      	bls.n	800a0a8 <osTimerNew+0x84>
          mem = 1;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	61bb      	str	r3, [r7, #24]
 800a0a6:	e00c      	b.n	800a0c2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d108      	bne.n	800a0c2 <osTimerNew+0x9e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <osTimerNew+0x9e>
            mem = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	e001      	b.n	800a0c2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d10c      	bne.n	800a0e2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	4b12      	ldr	r3, [pc, #72]	@ (800a118 <osTimerNew+0xf4>)
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0da:	f001 ffc4 	bl	800c066 <xTimerCreateStatic>
 800a0de:	6238      	str	r0, [r7, #32]
 800a0e0:	e00b      	b.n	800a0fa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <osTimerNew+0xf4>)
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	69fa      	ldr	r2, [r7, #28]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0f4:	f001 ff96 	bl	800c024 <xTimerCreate>
 800a0f8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d105      	bne.n	800a10c <osTimerNew+0xe8>
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <osTimerNew+0xe8>
        vPortFree (callb);
 800a106:	6978      	ldr	r0, [r7, #20]
 800a108:	f002 fe7e 	bl	800ce08 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a10c:	6a3b      	ldr	r3, [r7, #32]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3728      	adds	r7, #40	@ 0x28
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	08009ffb 	.word	0x08009ffb

0800a11c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a12a:	f3ef 8305 	mrs	r3, IPSR
 800a12e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a130:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osTimerStart+0x22>
    stat = osErrorISR;
 800a136:	f06f 0305 	mvn.w	r3, #5
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e017      	b.n	800a16e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <osTimerStart+0x30>
    stat = osErrorParameter;
 800a144:	f06f 0303 	mvn.w	r3, #3
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e010      	b.n	800a16e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a14c:	2300      	movs	r3, #0
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	2104      	movs	r1, #4
 800a156:	6938      	ldr	r0, [r7, #16]
 800a158:	f002 f802 	bl	800c160 <xTimerGenericCommand>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d102      	bne.n	800a168 <osTimerStart+0x4c>
      stat = osOK;
 800a162:	2300      	movs	r3, #0
 800a164:	617b      	str	r3, [r7, #20]
 800a166:	e002      	b.n	800a16e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a168:	f06f 0302 	mvn.w	r3, #2
 800a16c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a16e:	697b      	ldr	r3, [r7, #20]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	@ 0x28
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a184:	2300      	movs	r3, #0
 800a186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a188:	f3ef 8305 	mrs	r3, IPSR
 800a18c:	613b      	str	r3, [r7, #16]
  return(result);
 800a18e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a190:	2b00      	cmp	r3, #0
 800a192:	d15f      	bne.n	800a254 <osMessageQueueNew+0xdc>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d05c      	beq.n	800a254 <osMessageQueueNew+0xdc>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d059      	beq.n	800a254 <osMessageQueueNew+0xdc>
    mem = -1;
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d029      	beq.n	800a200 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d012      	beq.n	800a1da <osMessageQueueNew+0x62>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a1ba:	d90e      	bls.n	800a1da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00a      	beq.n	800a1da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	695a      	ldr	r2, [r3, #20]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68b9      	ldr	r1, [r7, #8]
 800a1cc:	fb01 f303 	mul.w	r3, r1, r3
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d302      	bcc.n	800a1da <osMessageQueueNew+0x62>
        mem = 1;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	61bb      	str	r3, [r7, #24]
 800a1d8:	e014      	b.n	800a204 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d110      	bne.n	800a204 <osMessageQueueNew+0x8c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10c      	bne.n	800a204 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d108      	bne.n	800a204 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d104      	bne.n	800a204 <osMessageQueueNew+0x8c>
          mem = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	e001      	b.n	800a204 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d10b      	bne.n	800a222 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691a      	ldr	r2, [r3, #16]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	2100      	movs	r1, #0
 800a214:	9100      	str	r1, [sp, #0]
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fa31 	bl	800a680 <xQueueGenericCreateStatic>
 800a21e:	61f8      	str	r0, [r7, #28]
 800a220:	e008      	b.n	800a234 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a228:	2200      	movs	r2, #0
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 faa4 	bl	800a77a <xQueueGenericCreate>
 800a232:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e001      	b.n	800a24c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	69f8      	ldr	r0, [r7, #28]
 800a250:	f000 ff06 	bl	800b060 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a254:	69fb      	ldr	r3, [r7, #28]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3720      	adds	r7, #32
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a278:	f3ef 8305 	mrs	r3, IPSR
 800a27c:	617b      	str	r3, [r7, #20]
  return(result);
 800a27e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a280:	2b00      	cmp	r3, #0
 800a282:	d028      	beq.n	800a2d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <osMessageQueuePut+0x36>
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <osMessageQueuePut+0x36>
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a296:	f06f 0303 	mvn.w	r3, #3
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	e038      	b.n	800a310 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a2a2:	f107 0210 	add.w	r2, r7, #16
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	69b8      	ldr	r0, [r7, #24]
 800a2ac:	f000 fbc6 	bl	800aa3c <xQueueGenericSendFromISR>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d003      	beq.n	800a2be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a2b6:	f06f 0302 	mvn.w	r3, #2
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	e028      	b.n	800a310 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d025      	beq.n	800a310 <osMessageQueuePut+0xb0>
 800a2c4:	4b15      	ldr	r3, [pc, #84]	@ (800a31c <osMessageQueuePut+0xbc>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	e01c      	b.n	800a310 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <osMessageQueuePut+0x82>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a2e2:	f06f 0303 	mvn.w	r3, #3
 800a2e6:	61fb      	str	r3, [r7, #28]
 800a2e8:	e012      	b.n	800a310 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	69b8      	ldr	r0, [r7, #24]
 800a2f2:	f000 faa1 	bl	800a838 <xQueueGenericSend>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d009      	beq.n	800a310 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a302:	f06f 0301 	mvn.w	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	e002      	b.n	800a310 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a30a:	f06f 0302 	mvn.w	r3, #2
 800a30e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a310:	69fb      	ldr	r3, [r7, #28]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	e000ed04 	.word	0xe000ed04

0800a320 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a332:	2300      	movs	r3, #0
 800a334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a336:	f3ef 8305 	mrs	r3, IPSR
 800a33a:	617b      	str	r3, [r7, #20]
  return(result);
 800a33c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d028      	beq.n	800a394 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <osMessageQueueGet+0x34>
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <osMessageQueueGet+0x34>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a354:	f06f 0303 	mvn.w	r3, #3
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	e037      	b.n	800a3cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a360:	f107 0310 	add.w	r3, r7, #16
 800a364:	461a      	mov	r2, r3
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	69b8      	ldr	r0, [r7, #24]
 800a36a:	f000 fce7 	bl	800ad3c <xQueueReceiveFromISR>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b01      	cmp	r3, #1
 800a372:	d003      	beq.n	800a37c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a374:	f06f 0302 	mvn.w	r3, #2
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	e027      	b.n	800a3cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d024      	beq.n	800a3cc <osMessageQueueGet+0xac>
 800a382:	4b15      	ldr	r3, [pc, #84]	@ (800a3d8 <osMessageQueueGet+0xb8>)
 800a384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	e01b      	b.n	800a3cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <osMessageQueueGet+0x80>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a3a0:	f06f 0303 	mvn.w	r3, #3
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	e011      	b.n	800a3cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	69b8      	ldr	r0, [r7, #24]
 800a3ae:	f000 fbe3 	bl	800ab78 <xQueueReceive>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d009      	beq.n	800a3cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a3be:	f06f 0301 	mvn.w	r3, #1
 800a3c2:	61fb      	str	r3, [r7, #28]
 800a3c4:	e002      	b.n	800a3cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a3c6:	f06f 0302 	mvn.w	r3, #2
 800a3ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a3cc:	69fb      	ldr	r3, [r7, #28]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3720      	adds	r7, #32
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4a07      	ldr	r2, [pc, #28]	@ (800a408 <vApplicationGetIdleTaskMemory+0x2c>)
 800a3ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	4a06      	ldr	r2, [pc, #24]	@ (800a40c <vApplicationGetIdleTaskMemory+0x30>)
 800a3f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2280      	movs	r2, #128	@ 0x80
 800a3f8:	601a      	str	r2, [r3, #0]
}
 800a3fa:	bf00      	nop
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	20003144 	.word	0x20003144
 800a40c:	200031ec 	.word	0x200031ec

0800a410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a07      	ldr	r2, [pc, #28]	@ (800a43c <vApplicationGetTimerTaskMemory+0x2c>)
 800a420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4a06      	ldr	r2, [pc, #24]	@ (800a440 <vApplicationGetTimerTaskMemory+0x30>)
 800a426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a42e:	601a      	str	r2, [r3, #0]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	200033ec 	.word	0x200033ec
 800a440:	20003494 	.word	0x20003494

0800a444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f103 0208 	add.w	r2, r3, #8
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f103 0208 	add.w	r2, r3, #8
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f103 0208 	add.w	r2, r3, #8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a492:	bf00      	nop
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d103      	bne.n	800a506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e00c      	b.n	800a520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3308      	adds	r3, #8
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e002      	b.n	800a514 <vListInsert+0x2e>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	60fb      	str	r3, [r7, #12]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d2f6      	bcs.n	800a50e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
}
 800a54c:	bf00      	nop
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6892      	ldr	r2, [r2, #8]
 800a56e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	6852      	ldr	r2, [r2, #4]
 800a578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d103      	bne.n	800a58c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	1e5a      	subs	r2, r3, #1
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10b      	bne.n	800a5d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5d8:	f002 fa26 	bl	800ca28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e4:	68f9      	ldr	r1, [r7, #12]
 800a5e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a5e8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a608:	3b01      	subs	r3, #1
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	441a      	add	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	22ff      	movs	r2, #255	@ 0xff
 800a61c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	22ff      	movs	r2, #255	@ 0xff
 800a624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d114      	bne.n	800a658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d01a      	beq.n	800a66c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3310      	adds	r3, #16
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fa00 	bl	800ba40 <xTaskRemoveFromEventList>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a646:	4b0d      	ldr	r3, [pc, #52]	@ (800a67c <xQueueGenericReset+0xd0>)
 800a648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	e009      	b.n	800a66c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3310      	adds	r3, #16
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fef1 	bl	800a444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3324      	adds	r3, #36	@ 0x24
 800a666:	4618      	mov	r0, r3
 800a668:	f7ff feec 	bl	800a444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a66c:	f002 fa0e 	bl	800ca8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a670:	2301      	movs	r3, #1
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08e      	sub	sp, #56	@ 0x38
 800a684:	af02      	add	r7, sp, #8
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10b      	bne.n	800a6ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <xQueueGenericCreateStatic+0x56>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <xQueueGenericCreateStatic+0x5a>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <xQueueGenericCreateStatic+0x5c>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10b      	bne.n	800a6f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	623b      	str	r3, [r7, #32]
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d102      	bne.n	800a704 <xQueueGenericCreateStatic+0x84>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <xQueueGenericCreateStatic+0x88>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <xQueueGenericCreateStatic+0x8a>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	61fb      	str	r3, [r7, #28]
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a726:	2350      	movs	r3, #80	@ 0x50
 800a728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b50      	cmp	r3, #80	@ 0x50
 800a72e:	d00b      	beq.n	800a748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	61bb      	str	r3, [r7, #24]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00d      	beq.n	800a770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a75c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	68b9      	ldr	r1, [r7, #8]
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 f840 	bl	800a7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a772:	4618      	mov	r0, r3
 800a774:	3730      	adds	r7, #48	@ 0x30
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b08a      	sub	sp, #40	@ 0x28
 800a77e:	af02      	add	r7, sp, #8
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	4613      	mov	r3, r2
 800a786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10b      	bne.n	800a7a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	613b      	str	r3, [r7, #16]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	fb02 f303 	mul.w	r3, r2, r3
 800a7ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	3350      	adds	r3, #80	@ 0x50
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f002 fa59 	bl	800cc6c <pvPortMalloc>
 800a7ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d011      	beq.n	800a7e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	3350      	adds	r3, #80	@ 0x50
 800a7ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7d4:	79fa      	ldrb	r2, [r7, #7]
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f805 	bl	800a7f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d103      	bne.n	800a80c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	e002      	b.n	800a812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a81e:	2101      	movs	r1, #1
 800a820:	69b8      	ldr	r0, [r7, #24]
 800a822:	f7ff fec3 	bl	800a5ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a82e:	bf00      	nop
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08e      	sub	sp, #56	@ 0x38
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a846:	2300      	movs	r3, #0
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <xQueueGenericSend+0x34>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d103      	bne.n	800a87a <xQueueGenericSend+0x42>
 800a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <xQueueGenericSend+0x46>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericSend+0x48>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <xQueueGenericSend+0x64>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a896:	bf00      	nop
 800a898:	bf00      	nop
 800a89a:	e7fd      	b.n	800a898 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d103      	bne.n	800a8aa <xQueueGenericSend+0x72>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d101      	bne.n	800a8ae <xQueueGenericSend+0x76>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e000      	b.n	800a8b0 <xQueueGenericSend+0x78>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <xQueueGenericSend+0x94>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	623b      	str	r3, [r7, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	bf00      	nop
 800a8ca:	e7fd      	b.n	800a8c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8cc:	f001 fa7e 	bl	800bdcc <xTaskGetSchedulerState>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d102      	bne.n	800a8dc <xQueueGenericSend+0xa4>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <xQueueGenericSend+0xa8>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e000      	b.n	800a8e2 <xQueueGenericSend+0xaa>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <xQueueGenericSend+0xc6>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	61fb      	str	r3, [r7, #28]
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8fe:	f002 f893 	bl	800ca28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d302      	bcc.n	800a914 <xQueueGenericSend+0xdc>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d129      	bne.n	800a968 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a91a:	f000 fa91 	bl	800ae40 <prvCopyDataToQueue>
 800a91e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	d010      	beq.n	800a94a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	3324      	adds	r3, #36	@ 0x24
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 f887 	bl	800ba40 <xTaskRemoveFromEventList>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d013      	beq.n	800a960 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a938:	4b3f      	ldr	r3, [pc, #252]	@ (800aa38 <xQueueGenericSend+0x200>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	e00a      	b.n	800a960 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a950:	4b39      	ldr	r3, [pc, #228]	@ (800aa38 <xQueueGenericSend+0x200>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a960:	f002 f894 	bl	800ca8c <vPortExitCritical>
				return pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	e063      	b.n	800aa30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d103      	bne.n	800a976 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a96e:	f002 f88d 	bl	800ca8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a972:	2300      	movs	r3, #0
 800a974:	e05c      	b.n	800aa30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f8c1 	bl	800bb08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a986:	2301      	movs	r3, #1
 800a988:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a98a:	f002 f87f 	bl	800ca8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a98e:	f000 fe29 	bl	800b5e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a992:	f002 f849 	bl	800ca28 <vPortEnterCritical>
 800a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a2:	d103      	bne.n	800a9ac <xQueueGenericSend+0x174>
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9b2:	b25b      	sxtb	r3, r3
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b8:	d103      	bne.n	800a9c2 <xQueueGenericSend+0x18a>
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9c2:	f002 f863 	bl	800ca8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9c6:	1d3a      	adds	r2, r7, #4
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 f8b0 	bl	800bb34 <xTaskCheckForTimeOut>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d124      	bne.n	800aa24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9dc:	f000 fb28 	bl	800b030 <prvIsQueueFull>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d018      	beq.n	800aa18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	3310      	adds	r3, #16
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 ffd4 	bl	800b99c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9f6:	f000 fab3 	bl	800af60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9fa:	f000 fe01 	bl	800b600 <xTaskResumeAll>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f47f af7c 	bne.w	800a8fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aa06:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <xQueueGenericSend+0x200>)
 800aa08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	e772      	b.n	800a8fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa1a:	f000 faa1 	bl	800af60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa1e:	f000 fdef 	bl	800b600 <xTaskResumeAll>
 800aa22:	e76c      	b.n	800a8fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa26:	f000 fa9b 	bl	800af60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa2a:	f000 fde9 	bl	800b600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3738      	adds	r7, #56	@ 0x38
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b090      	sub	sp, #64	@ 0x40
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10b      	bne.n	800aa6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	e7fd      	b.n	800aa68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d103      	bne.n	800aa7a <xQueueGenericSendFromISR+0x3e>
 800aa72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <xQueueGenericSendFromISR+0x42>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueGenericSendFromISR+0x44>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10b      	bne.n	800aa9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d103      	bne.n	800aaaa <xQueueGenericSendFromISR+0x6e>
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d101      	bne.n	800aaae <xQueueGenericSendFromISR+0x72>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <xQueueGenericSendFromISR+0x74>
 800aaae:	2300      	movs	r3, #0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10b      	bne.n	800aacc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	623b      	str	r3, [r7, #32]
}
 800aac6:	bf00      	nop
 800aac8:	bf00      	nop
 800aaca:	e7fd      	b.n	800aac8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aacc:	f002 f88c 	bl	800cbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aad0:	f3ef 8211 	mrs	r2, BASEPRI
 800aad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	61fa      	str	r2, [r7, #28]
 800aae6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aae8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d302      	bcc.n	800aafe <xQueueGenericSendFromISR+0xc2>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d12f      	bne.n	800ab5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab14:	f000 f994 	bl	800ae40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d112      	bne.n	800ab48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d016      	beq.n	800ab58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	3324      	adds	r3, #36	@ 0x24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 ff86 	bl	800ba40 <xTaskRemoveFromEventList>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00e      	beq.n	800ab58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	e007      	b.n	800ab58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	b25a      	sxtb	r2, r3
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ab5c:	e001      	b.n	800ab62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3740      	adds	r7, #64	@ 0x40
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08c      	sub	sp, #48	@ 0x30
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10b      	bne.n	800abaa <xQueueReceive+0x32>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	623b      	str	r3, [r7, #32]
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop
 800aba8:	e7fd      	b.n	800aba6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <xQueueReceive+0x40>
 800abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <xQueueReceive+0x44>
 800abb8:	2301      	movs	r3, #1
 800abba:	e000      	b.n	800abbe <xQueueReceive+0x46>
 800abbc:	2300      	movs	r3, #0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10b      	bne.n	800abda <xQueueReceive+0x62>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	61fb      	str	r3, [r7, #28]
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	e7fd      	b.n	800abd6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abda:	f001 f8f7 	bl	800bdcc <xTaskGetSchedulerState>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <xQueueReceive+0x72>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <xQueueReceive+0x76>
 800abea:	2301      	movs	r3, #1
 800abec:	e000      	b.n	800abf0 <xQueueReceive+0x78>
 800abee:	2300      	movs	r3, #0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10b      	bne.n	800ac0c <xQueueReceive+0x94>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	61bb      	str	r3, [r7, #24]
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	e7fd      	b.n	800ac08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac0c:	f001 ff0c 	bl	800ca28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01f      	beq.n	800ac5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac20:	f000 f978 	bl	800af14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	1e5a      	subs	r2, r3, #1
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00f      	beq.n	800ac54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac36:	3310      	adds	r3, #16
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 ff01 	bl	800ba40 <xTaskRemoveFromEventList>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d007      	beq.n	800ac54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac44:	4b3c      	ldr	r3, [pc, #240]	@ (800ad38 <xQueueReceive+0x1c0>)
 800ac46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac54:	f001 ff1a 	bl	800ca8c <vPortExitCritical>
				return pdPASS;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e069      	b.n	800ad30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d103      	bne.n	800ac6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac62:	f001 ff13 	bl	800ca8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e062      	b.n	800ad30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac70:	f107 0310 	add.w	r3, r7, #16
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 ff47 	bl	800bb08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac7e:	f001 ff05 	bl	800ca8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac82:	f000 fcaf 	bl	800b5e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac86:	f001 fecf 	bl	800ca28 <vPortEnterCritical>
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac90:	b25b      	sxtb	r3, r3
 800ac92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac96:	d103      	bne.n	800aca0 <xQueueReceive+0x128>
 800ac98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d103      	bne.n	800acb6 <xQueueReceive+0x13e>
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acb6:	f001 fee9 	bl	800ca8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acba:	1d3a      	adds	r2, r7, #4
 800acbc:	f107 0310 	add.w	r3, r7, #16
 800acc0:	4611      	mov	r1, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 ff36 	bl	800bb34 <xTaskCheckForTimeOut>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d123      	bne.n	800ad16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd0:	f000 f998 	bl	800b004 <prvIsQueueEmpty>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d017      	beq.n	800ad0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acdc:	3324      	adds	r3, #36	@ 0x24
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fe5a 	bl	800b99c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ace8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acea:	f000 f939 	bl	800af60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acee:	f000 fc87 	bl	800b600 <xTaskResumeAll>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d189      	bne.n	800ac0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800acf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ad38 <xQueueReceive+0x1c0>)
 800acfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	e780      	b.n	800ac0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad0c:	f000 f928 	bl	800af60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad10:	f000 fc76 	bl	800b600 <xTaskResumeAll>
 800ad14:	e77a      	b.n	800ac0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad18:	f000 f922 	bl	800af60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad1c:	f000 fc70 	bl	800b600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad22:	f000 f96f 	bl	800b004 <prvIsQueueEmpty>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f43f af6f 	beq.w	800ac0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3730      	adds	r7, #48	@ 0x30
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08e      	sub	sp, #56	@ 0x38
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10b      	bne.n	800ad6a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	623b      	str	r3, [r7, #32]
}
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop
 800ad68:	e7fd      	b.n	800ad66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <xQueueReceiveFromISR+0x3c>
 800ad70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <xQueueReceiveFromISR+0x40>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <xQueueReceiveFromISR+0x42>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10b      	bne.n	800ad9a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	61fb      	str	r3, [r7, #28]
}
 800ad94:	bf00      	nop
 800ad96:	bf00      	nop
 800ad98:	e7fd      	b.n	800ad96 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad9a:	f001 ff25 	bl	800cbe8 <vPortValidateInterruptPriority>
	__asm volatile
 800ad9e:	f3ef 8211 	mrs	r2, BASEPRI
 800ada2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	61ba      	str	r2, [r7, #24]
 800adb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800adb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d02f      	beq.n	800ae26 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800add0:	68b9      	ldr	r1, [r7, #8]
 800add2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800add4:	f000 f89e 	bl	800af14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	1e5a      	subs	r2, r3, #1
 800addc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ade0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ade4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade8:	d112      	bne.n	800ae10 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d016      	beq.n	800ae20 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf4:	3310      	adds	r3, #16
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fe22 	bl	800ba40 <xTaskRemoveFromEventList>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00e      	beq.n	800ae20 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	e007      	b.n	800ae20 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae14:	3301      	adds	r3, #1
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	b25a      	sxtb	r2, r3
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ae20:	2301      	movs	r3, #1
 800ae22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae24:	e001      	b.n	800ae2a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f383 8811 	msr	BASEPRI, r3
}
 800ae34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3738      	adds	r7, #56	@ 0x38
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10d      	bne.n	800ae7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d14d      	bne.n	800af02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 ffcc 	bl	800be08 <xTaskPriorityDisinherit>
 800ae70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	609a      	str	r2, [r3, #8]
 800ae78:	e043      	b.n	800af02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d119      	bne.n	800aeb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6858      	ldr	r0, [r3, #4]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	f003 fd39 	bl	800e902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae98:	441a      	add	r2, r3
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d32b      	bcc.n	800af02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	605a      	str	r2, [r3, #4]
 800aeb2:	e026      	b.n	800af02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68d8      	ldr	r0, [r3, #12]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	f003 fd1f 	bl	800e902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68da      	ldr	r2, [r3, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	425b      	negs	r3, r3
 800aece:	441a      	add	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d207      	bcs.n	800aef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee8:	425b      	negs	r3, r3
 800aeea:	441a      	add	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d105      	bne.n	800af02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3b01      	subs	r3, #1
 800af00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af0a:	697b      	ldr	r3, [r7, #20]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	d018      	beq.n	800af58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68da      	ldr	r2, [r3, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2e:	441a      	add	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d303      	bcc.n	800af48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68d9      	ldr	r1, [r3, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af50:	461a      	mov	r2, r3
 800af52:	6838      	ldr	r0, [r7, #0]
 800af54:	f003 fcd5 	bl	800e902 <memcpy>
	}
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af68:	f001 fd5e 	bl	800ca28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af74:	e011      	b.n	800af9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d012      	beq.n	800afa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3324      	adds	r3, #36	@ 0x24
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fd5c 	bl	800ba40 <xTaskRemoveFromEventList>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af8e:	f000 fe35 	bl	800bbfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	3b01      	subs	r3, #1
 800af96:	b2db      	uxtb	r3, r3
 800af98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	dce9      	bgt.n	800af76 <prvUnlockQueue+0x16>
 800afa2:	e000      	b.n	800afa6 <prvUnlockQueue+0x46>
					break;
 800afa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	22ff      	movs	r2, #255	@ 0xff
 800afaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afae:	f001 fd6d 	bl	800ca8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afb2:	f001 fd39 	bl	800ca28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afbe:	e011      	b.n	800afe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d012      	beq.n	800afee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3310      	adds	r3, #16
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fd37 	bl	800ba40 <xTaskRemoveFromEventList>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d001      	beq.n	800afdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afd8:	f000 fe10 	bl	800bbfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	3b01      	subs	r3, #1
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dce9      	bgt.n	800afc0 <prvUnlockQueue+0x60>
 800afec:	e000      	b.n	800aff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	22ff      	movs	r2, #255	@ 0xff
 800aff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aff8:	f001 fd48 	bl	800ca8c <vPortExitCritical>
}
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b00c:	f001 fd0c 	bl	800ca28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b018:	2301      	movs	r3, #1
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	e001      	b.n	800b022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b022:	f001 fd33 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800b026:	68fb      	ldr	r3, [r7, #12]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b038:	f001 fcf6 	bl	800ca28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b044:	429a      	cmp	r2, r3
 800b046:	d102      	bne.n	800b04e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b048:	2301      	movs	r3, #1
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	e001      	b.n	800b052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b052:	f001 fd1b 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800b056:	68fb      	ldr	r3, [r7, #12]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	e014      	b.n	800b09a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b070:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b0 <vQueueAddToRegistry+0x50>)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b07c:	490c      	ldr	r1, [pc, #48]	@ (800b0b0 <vQueueAddToRegistry+0x50>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b086:	4a0a      	ldr	r2, [pc, #40]	@ (800b0b0 <vQueueAddToRegistry+0x50>)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	4413      	add	r3, r2
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b092:	e006      	b.n	800b0a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b07      	cmp	r3, #7
 800b09e:	d9e7      	bls.n	800b070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20003894 	.word	0x20003894

0800b0b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0c4:	f001 fcb0 	bl	800ca28 <vPortEnterCritical>
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d4:	d103      	bne.n	800b0de <vQueueWaitForMessageRestricted+0x2a>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0e4:	b25b      	sxtb	r3, r3
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d103      	bne.n	800b0f4 <vQueueWaitForMessageRestricted+0x40>
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0f4:	f001 fcca 	bl	800ca8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	3324      	adds	r3, #36	@ 0x24
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fc6d 	bl	800b9e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b10e:	6978      	ldr	r0, [r7, #20]
 800b110:	f7ff ff26 	bl	800af60 <prvUnlockQueue>
	}
 800b114:	bf00      	nop
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08e      	sub	sp, #56	@ 0x38
 800b120:	af04      	add	r7, sp, #16
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10b      	bne.n	800b148 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	623b      	str	r3, [r7, #32]
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	e7fd      	b.n	800b144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10b      	bne.n	800b166 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	61fb      	str	r3, [r7, #28]
}
 800b160:	bf00      	nop
 800b162:	bf00      	nop
 800b164:	e7fd      	b.n	800b162 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b166:	23a8      	movs	r3, #168	@ 0xa8
 800b168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b16e:	d00b      	beq.n	800b188 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	61bb      	str	r3, [r7, #24]
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	e7fd      	b.n	800b184 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d01e      	beq.n	800b1ce <xTaskCreateStatic+0xb2>
 800b190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b192:	2b00      	cmp	r3, #0
 800b194:	d01b      	beq.n	800b1ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b19e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9303      	str	r3, [sp, #12]
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	f107 0314 	add.w	r3, r7, #20
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f851 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1c8:	f000 f8f6 	bl	800b3b8 <prvAddNewTaskToReadyList>
 800b1cc:	e001      	b.n	800b1d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1d2:	697b      	ldr	r3, [r7, #20]
	}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3728      	adds	r7, #40	@ 0x28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08c      	sub	sp, #48	@ 0x30
 800b1e0:	af04      	add	r7, sp, #16
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1ec:	88fb      	ldrh	r3, [r7, #6]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f001 fd3b 	bl	800cc6c <pvPortMalloc>
 800b1f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00e      	beq.n	800b21c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1fe:	20a8      	movs	r0, #168	@ 0xa8
 800b200:	f001 fd34 	bl	800cc6c <pvPortMalloc>
 800b204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	631a      	str	r2, [r3, #48]	@ 0x30
 800b212:	e005      	b.n	800b220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b214:	6978      	ldr	r0, [r7, #20]
 800b216:	f001 fdf7 	bl	800ce08 <vPortFree>
 800b21a:	e001      	b.n	800b220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d017      	beq.n	800b256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	2300      	movs	r3, #0
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	9302      	str	r3, [sp, #8]
 800b238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23e:	9300      	str	r3, [sp, #0]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 f80f 	bl	800b268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b24a:	69f8      	ldr	r0, [r7, #28]
 800b24c:	f000 f8b4 	bl	800b3b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b250:	2301      	movs	r3, #1
 800b252:	61bb      	str	r3, [r7, #24]
 800b254:	e002      	b.n	800b25c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b256:	f04f 33ff 	mov.w	r3, #4294967295
 800b25a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b25c:	69bb      	ldr	r3, [r7, #24]
	}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	461a      	mov	r2, r3
 800b280:	21a5      	movs	r1, #165	@ 0xa5
 800b282:	f003 fa58 	bl	800e736 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b290:	3b01      	subs	r3, #1
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	f003 0307 	and.w	r3, r3, #7
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	617b      	str	r3, [r7, #20]
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	e7fd      	b.n	800b2be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01f      	beq.n	800b308 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	e012      	b.n	800b2f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	7819      	ldrb	r1, [r3, #0]
 800b2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	4413      	add	r3, r2
 800b2dc:	3334      	adds	r3, #52	@ 0x34
 800b2de:	460a      	mov	r2, r1
 800b2e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d006      	beq.n	800b2fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	61fb      	str	r3, [r7, #28]
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	2b0f      	cmp	r3, #15
 800b2f8:	d9e9      	bls.n	800b2ce <prvInitialiseNewTask+0x66>
 800b2fa:	e000      	b.n	800b2fe <prvInitialiseNewTask+0x96>
			{
				break;
 800b2fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b306:	e003      	b.n	800b310 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b312:	2b37      	cmp	r3, #55	@ 0x37
 800b314:	d901      	bls.n	800b31a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b316:	2337      	movs	r3, #55	@ 0x37
 800b318:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b31e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b322:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b324:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b328:	2200      	movs	r2, #0
 800b32a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff f8a7 	bl	800a484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	3318      	adds	r3, #24
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff f8a2 	bl	800a484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b344:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b348:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b354:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b358:	2200      	movs	r2, #0
 800b35a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	2200      	movs	r2, #0
 800b362:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	3354      	adds	r3, #84	@ 0x54
 800b36a:	224c      	movs	r2, #76	@ 0x4c
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f003 f9e1 	bl	800e736 <memset>
 800b374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b376:	4a0d      	ldr	r2, [pc, #52]	@ (800b3ac <prvInitialiseNewTask+0x144>)
 800b378:	659a      	str	r2, [r3, #88]	@ 0x58
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b0 <prvInitialiseNewTask+0x148>)
 800b37e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b382:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b4 <prvInitialiseNewTask+0x14c>)
 800b384:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	68f9      	ldr	r1, [r7, #12]
 800b38a:	69b8      	ldr	r0, [r7, #24]
 800b38c:	f001 fa1a 	bl	800c7c4 <pxPortInitialiseStack>
 800b390:	4602      	mov	r2, r0
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d002      	beq.n	800b3a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3a2:	bf00      	nop
 800b3a4:	3720      	adds	r7, #32
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	200082f8 	.word	0x200082f8
 800b3b0:	20008360 	.word	0x20008360
 800b3b4:	200083c8 	.word	0x200083c8

0800b3b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3c0:	f001 fb32 	bl	800ca28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4a2c      	ldr	r2, [pc, #176]	@ (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b3cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3dc:	4b27      	ldr	r3, [pc, #156]	@ (800b47c <prvAddNewTaskToReadyList+0xc4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d110      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3e4:	f000 fc2e 	bl	800bc44 <prvInitialiseTaskLists>
 800b3e8:	e00d      	b.n	800b406 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3ea:	4b26      	ldr	r3, [pc, #152]	@ (800b484 <prvAddNewTaskToReadyList+0xcc>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3f2:	4b23      	ldr	r3, [pc, #140]	@ (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d802      	bhi.n	800b406 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b400:	4a1f      	ldr	r2, [pc, #124]	@ (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b406:	4b20      	ldr	r3, [pc, #128]	@ (800b488 <prvAddNewTaskToReadyList+0xd0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	4a1e      	ldr	r2, [pc, #120]	@ (800b488 <prvAddNewTaskToReadyList+0xd0>)
 800b40e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b410:	4b1d      	ldr	r3, [pc, #116]	@ (800b488 <prvAddNewTaskToReadyList+0xd0>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b41c:	4b1b      	ldr	r3, [pc, #108]	@ (800b48c <prvAddNewTaskToReadyList+0xd4>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d903      	bls.n	800b42c <prvAddNewTaskToReadyList+0x74>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b428:	4a18      	ldr	r2, [pc, #96]	@ (800b48c <prvAddNewTaskToReadyList+0xd4>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4a15      	ldr	r2, [pc, #84]	@ (800b490 <prvAddNewTaskToReadyList+0xd8>)
 800b43a:	441a      	add	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7ff f82b 	bl	800a49e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b448:	f001 fb20 	bl	800ca8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b44c:	4b0d      	ldr	r3, [pc, #52]	@ (800b484 <prvAddNewTaskToReadyList+0xcc>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00e      	beq.n	800b472 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b454:	4b0a      	ldr	r3, [pc, #40]	@ (800b480 <prvAddNewTaskToReadyList+0xc8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45e:	429a      	cmp	r2, r3
 800b460:	d207      	bcs.n	800b472 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b462:	4b0c      	ldr	r3, [pc, #48]	@ (800b494 <prvAddNewTaskToReadyList+0xdc>)
 800b464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20003da8 	.word	0x20003da8
 800b480:	200038d4 	.word	0x200038d4
 800b484:	20003db4 	.word	0x20003db4
 800b488:	20003dc4 	.word	0x20003dc4
 800b48c:	20003db0 	.word	0x20003db0
 800b490:	200038d8 	.word	0x200038d8
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d018      	beq.n	800b4dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4aa:	4b14      	ldr	r3, [pc, #80]	@ (800b4fc <vTaskDelay+0x64>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <vTaskDelay+0x32>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60bb      	str	r3, [r7, #8]
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4ca:	f000 f88b 	bl	800b5e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fd09 	bl	800bee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4d6:	f000 f893 	bl	800b600 <xTaskResumeAll>
 800b4da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d107      	bne.n	800b4f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b4e2:	4b07      	ldr	r3, [pc, #28]	@ (800b500 <vTaskDelay+0x68>)
 800b4e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20003dd0 	.word	0x20003dd0
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08a      	sub	sp, #40	@ 0x28
 800b508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b512:	463a      	mov	r2, r7
 800b514:	1d39      	adds	r1, r7, #4
 800b516:	f107 0308 	add.w	r3, r7, #8
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe ff5e 	bl	800a3dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	9202      	str	r2, [sp, #8]
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	2300      	movs	r3, #0
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	2300      	movs	r3, #0
 800b530:	460a      	mov	r2, r1
 800b532:	4924      	ldr	r1, [pc, #144]	@ (800b5c4 <vTaskStartScheduler+0xc0>)
 800b534:	4824      	ldr	r0, [pc, #144]	@ (800b5c8 <vTaskStartScheduler+0xc4>)
 800b536:	f7ff fdf1 	bl	800b11c <xTaskCreateStatic>
 800b53a:	4603      	mov	r3, r0
 800b53c:	4a23      	ldr	r2, [pc, #140]	@ (800b5cc <vTaskStartScheduler+0xc8>)
 800b53e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b540:	4b22      	ldr	r3, [pc, #136]	@ (800b5cc <vTaskStartScheduler+0xc8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b548:	2301      	movs	r3, #1
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	e001      	b.n	800b552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d102      	bne.n	800b55e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b558:	f000 fd1a 	bl	800bf90 <xTimerCreateTimerTask>
 800b55c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d11b      	bne.n	800b59c <vTaskStartScheduler+0x98>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	613b      	str	r3, [r7, #16]
}
 800b576:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b578:	4b15      	ldr	r3, [pc, #84]	@ (800b5d0 <vTaskStartScheduler+0xcc>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3354      	adds	r3, #84	@ 0x54
 800b57e:	4a15      	ldr	r2, [pc, #84]	@ (800b5d4 <vTaskStartScheduler+0xd0>)
 800b580:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b582:	4b15      	ldr	r3, [pc, #84]	@ (800b5d8 <vTaskStartScheduler+0xd4>)
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b58a:	4b14      	ldr	r3, [pc, #80]	@ (800b5dc <vTaskStartScheduler+0xd8>)
 800b58c:	2201      	movs	r2, #1
 800b58e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b590:	4b13      	ldr	r3, [pc, #76]	@ (800b5e0 <vTaskStartScheduler+0xdc>)
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b596:	f001 f9a3 	bl	800c8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b59a:	e00f      	b.n	800b5bc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d10b      	bne.n	800b5bc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	60fb      	str	r3, [r7, #12]
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <vTaskStartScheduler+0xb4>
}
 800b5bc:	bf00      	nop
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	08010880 	.word	0x08010880
 800b5c8:	0800bc15 	.word	0x0800bc15
 800b5cc:	20003dcc 	.word	0x20003dcc
 800b5d0:	200038d4 	.word	0x200038d4
 800b5d4:	20002840 	.word	0x20002840
 800b5d8:	20003dc8 	.word	0x20003dc8
 800b5dc:	20003db4 	.word	0x20003db4
 800b5e0:	20003dac 	.word	0x20003dac

0800b5e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5e8:	4b04      	ldr	r3, [pc, #16]	@ (800b5fc <vTaskSuspendAll+0x18>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	4a03      	ldr	r2, [pc, #12]	@ (800b5fc <vTaskSuspendAll+0x18>)
 800b5f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5f2:	bf00      	nop
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	20003dd0 	.word	0x20003dd0

0800b600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b60e:	4b42      	ldr	r3, [pc, #264]	@ (800b718 <xTaskResumeAll+0x118>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <xTaskResumeAll+0x2e>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	603b      	str	r3, [r7, #0]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b62e:	f001 f9fb 	bl	800ca28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b632:	4b39      	ldr	r3, [pc, #228]	@ (800b718 <xTaskResumeAll+0x118>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3b01      	subs	r3, #1
 800b638:	4a37      	ldr	r2, [pc, #220]	@ (800b718 <xTaskResumeAll+0x118>)
 800b63a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b63c:	4b36      	ldr	r3, [pc, #216]	@ (800b718 <xTaskResumeAll+0x118>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d162      	bne.n	800b70a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b644:	4b35      	ldr	r3, [pc, #212]	@ (800b71c <xTaskResumeAll+0x11c>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d05e      	beq.n	800b70a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b64c:	e02f      	b.n	800b6ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64e:	4b34      	ldr	r3, [pc, #208]	@ (800b720 <xTaskResumeAll+0x120>)
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3318      	adds	r3, #24
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fe ff7c 	bl	800a558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3304      	adds	r3, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe ff77 	bl	800a558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66e:	4b2d      	ldr	r3, [pc, #180]	@ (800b724 <xTaskResumeAll+0x124>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	429a      	cmp	r2, r3
 800b674:	d903      	bls.n	800b67e <xTaskResumeAll+0x7e>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67a:	4a2a      	ldr	r2, [pc, #168]	@ (800b724 <xTaskResumeAll+0x124>)
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4a27      	ldr	r2, [pc, #156]	@ (800b728 <xTaskResumeAll+0x128>)
 800b68c:	441a      	add	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3304      	adds	r3, #4
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f7fe ff02 	bl	800a49e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69e:	4b23      	ldr	r3, [pc, #140]	@ (800b72c <xTaskResumeAll+0x12c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d302      	bcc.n	800b6ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b6a8:	4b21      	ldr	r3, [pc, #132]	@ (800b730 <xTaskResumeAll+0x130>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b720 <xTaskResumeAll+0x120>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1cb      	bne.n	800b64e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6bc:	f000 fb66 	bl	800bd8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b734 <xTaskResumeAll+0x134>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d010      	beq.n	800b6ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6cc:	f000 f846 	bl	800b75c <xTaskIncrementTick>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b6d6:	4b16      	ldr	r3, [pc, #88]	@ (800b730 <xTaskResumeAll+0x130>)
 800b6d8:	2201      	movs	r2, #1
 800b6da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1f1      	bne.n	800b6cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b6e8:	4b12      	ldr	r3, [pc, #72]	@ (800b734 <xTaskResumeAll+0x134>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6ee:	4b10      	ldr	r3, [pc, #64]	@ (800b730 <xTaskResumeAll+0x130>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d009      	beq.n	800b70a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b738 <xTaskResumeAll+0x138>)
 800b6fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b700:	601a      	str	r2, [r3, #0]
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b70a:	f001 f9bf 	bl	800ca8c <vPortExitCritical>

	return xAlreadyYielded;
 800b70e:	68bb      	ldr	r3, [r7, #8]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	20003dd0 	.word	0x20003dd0
 800b71c:	20003da8 	.word	0x20003da8
 800b720:	20003d68 	.word	0x20003d68
 800b724:	20003db0 	.word	0x20003db0
 800b728:	200038d8 	.word	0x200038d8
 800b72c:	200038d4 	.word	0x200038d4
 800b730:	20003dbc 	.word	0x20003dbc
 800b734:	20003db8 	.word	0x20003db8
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b742:	4b05      	ldr	r3, [pc, #20]	@ (800b758 <xTaskGetTickCount+0x1c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b748:	687b      	ldr	r3, [r7, #4]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20003dac 	.word	0x20003dac

0800b75c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b766:	4b4f      	ldr	r3, [pc, #316]	@ (800b8a4 <xTaskIncrementTick+0x148>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f040 8090 	bne.w	800b890 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b770:	4b4d      	ldr	r3, [pc, #308]	@ (800b8a8 <xTaskIncrementTick+0x14c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3301      	adds	r3, #1
 800b776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b778:	4a4b      	ldr	r2, [pc, #300]	@ (800b8a8 <xTaskIncrementTick+0x14c>)
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d121      	bne.n	800b7c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b784:	4b49      	ldr	r3, [pc, #292]	@ (800b8ac <xTaskIncrementTick+0x150>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00b      	beq.n	800b7a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	603b      	str	r3, [r7, #0]
}
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	e7fd      	b.n	800b7a2 <xTaskIncrementTick+0x46>
 800b7a6:	4b41      	ldr	r3, [pc, #260]	@ (800b8ac <xTaskIncrementTick+0x150>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	4b40      	ldr	r3, [pc, #256]	@ (800b8b0 <xTaskIncrementTick+0x154>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b8ac <xTaskIncrementTick+0x150>)
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b8b0 <xTaskIncrementTick+0x154>)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b4 <xTaskIncrementTick+0x158>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b8b4 <xTaskIncrementTick+0x158>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	f000 fae2 	bl	800bd8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b8b8 <xTaskIncrementTick+0x15c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d349      	bcc.n	800b866 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7d2:	4b36      	ldr	r3, [pc, #216]	@ (800b8ac <xTaskIncrementTick+0x150>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7dc:	4b36      	ldr	r3, [pc, #216]	@ (800b8b8 <xTaskIncrementTick+0x15c>)
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	601a      	str	r2, [r3, #0]
					break;
 800b7e4:	e03f      	b.n	800b866 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e6:	4b31      	ldr	r3, [pc, #196]	@ (800b8ac <xTaskIncrementTick+0x150>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d203      	bcs.n	800b806 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b8b8 <xTaskIncrementTick+0x15c>)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b804:	e02f      	b.n	800b866 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fea4 	bl	800a558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b814:	2b00      	cmp	r3, #0
 800b816:	d004      	beq.n	800b822 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	3318      	adds	r3, #24
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe fe9b 	bl	800a558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b826:	4b25      	ldr	r3, [pc, #148]	@ (800b8bc <xTaskIncrementTick+0x160>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d903      	bls.n	800b836 <xTaskIncrementTick+0xda>
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b832:	4a22      	ldr	r2, [pc, #136]	@ (800b8bc <xTaskIncrementTick+0x160>)
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4a1f      	ldr	r2, [pc, #124]	@ (800b8c0 <xTaskIncrementTick+0x164>)
 800b844:	441a      	add	r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	3304      	adds	r3, #4
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f7fe fe26 	bl	800a49e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b856:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c4 <xTaskIncrementTick+0x168>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d3b8      	bcc.n	800b7d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b864:	e7b5      	b.n	800b7d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b866:	4b17      	ldr	r3, [pc, #92]	@ (800b8c4 <xTaskIncrementTick+0x168>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86c:	4914      	ldr	r1, [pc, #80]	@ (800b8c0 <xTaskIncrementTick+0x164>)
 800b86e:	4613      	mov	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	440b      	add	r3, r1
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d901      	bls.n	800b882 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b882:	4b11      	ldr	r3, [pc, #68]	@ (800b8c8 <xTaskIncrementTick+0x16c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b88a:	2301      	movs	r3, #1
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	e004      	b.n	800b89a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b890:	4b0e      	ldr	r3, [pc, #56]	@ (800b8cc <xTaskIncrementTick+0x170>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a0d      	ldr	r2, [pc, #52]	@ (800b8cc <xTaskIncrementTick+0x170>)
 800b898:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b89a:	697b      	ldr	r3, [r7, #20]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20003dd0 	.word	0x20003dd0
 800b8a8:	20003dac 	.word	0x20003dac
 800b8ac:	20003d60 	.word	0x20003d60
 800b8b0:	20003d64 	.word	0x20003d64
 800b8b4:	20003dc0 	.word	0x20003dc0
 800b8b8:	20003dc8 	.word	0x20003dc8
 800b8bc:	20003db0 	.word	0x20003db0
 800b8c0:	200038d8 	.word	0x200038d8
 800b8c4:	200038d4 	.word	0x200038d4
 800b8c8:	20003dbc 	.word	0x20003dbc
 800b8cc:	20003db8 	.word	0x20003db8

0800b8d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b984 <vTaskSwitchContext+0xb4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d003      	beq.n	800b8e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8de:	4b2a      	ldr	r3, [pc, #168]	@ (800b988 <vTaskSwitchContext+0xb8>)
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8e4:	e047      	b.n	800b976 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b8e6:	4b28      	ldr	r3, [pc, #160]	@ (800b988 <vTaskSwitchContext+0xb8>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ec:	4b27      	ldr	r3, [pc, #156]	@ (800b98c <vTaskSwitchContext+0xbc>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	60fb      	str	r3, [r7, #12]
 800b8f2:	e011      	b.n	800b918 <vTaskSwitchContext+0x48>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <vTaskSwitchContext+0x42>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	607b      	str	r3, [r7, #4]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <vTaskSwitchContext+0x3e>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3b01      	subs	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	491d      	ldr	r1, [pc, #116]	@ (800b990 <vTaskSwitchContext+0xc0>)
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	4613      	mov	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4413      	add	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0e3      	beq.n	800b8f4 <vTaskSwitchContext+0x24>
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	4613      	mov	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4a16      	ldr	r2, [pc, #88]	@ (800b990 <vTaskSwitchContext+0xc0>)
 800b938:	4413      	add	r3, r2
 800b93a:	60bb      	str	r3, [r7, #8]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	3308      	adds	r3, #8
 800b94e:	429a      	cmp	r2, r3
 800b950:	d104      	bne.n	800b95c <vTaskSwitchContext+0x8c>
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	605a      	str	r2, [r3, #4]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	4a0c      	ldr	r2, [pc, #48]	@ (800b994 <vTaskSwitchContext+0xc4>)
 800b964:	6013      	str	r3, [r2, #0]
 800b966:	4a09      	ldr	r2, [pc, #36]	@ (800b98c <vTaskSwitchContext+0xbc>)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b96c:	4b09      	ldr	r3, [pc, #36]	@ (800b994 <vTaskSwitchContext+0xc4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3354      	adds	r3, #84	@ 0x54
 800b972:	4a09      	ldr	r2, [pc, #36]	@ (800b998 <vTaskSwitchContext+0xc8>)
 800b974:	6013      	str	r3, [r2, #0]
}
 800b976:	bf00      	nop
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	20003dd0 	.word	0x20003dd0
 800b988:	20003dbc 	.word	0x20003dbc
 800b98c:	20003db0 	.word	0x20003db0
 800b990:	200038d8 	.word	0x200038d8
 800b994:	200038d4 	.word	0x200038d4
 800b998:	20002840 	.word	0x20002840

0800b99c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10b      	bne.n	800b9c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	e7fd      	b.n	800b9c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9c4:	4b07      	ldr	r3, [pc, #28]	@ (800b9e4 <vTaskPlaceOnEventList+0x48>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3318      	adds	r3, #24
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7fe fd8a 	bl	800a4e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	6838      	ldr	r0, [r7, #0]
 800b9d6:	f000 fa87 	bl	800bee8 <prvAddCurrentTaskToDelayedList>
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	200038d4 	.word	0x200038d4

0800b9e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10b      	bne.n	800ba12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	617b      	str	r3, [r7, #20]
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	e7fd      	b.n	800ba0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba12:	4b0a      	ldr	r3, [pc, #40]	@ (800ba3c <vTaskPlaceOnEventListRestricted+0x54>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3318      	adds	r3, #24
 800ba18:	4619      	mov	r1, r3
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7fe fd3f 	bl	800a49e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ba26:	f04f 33ff 	mov.w	r3, #4294967295
 800ba2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	68b8      	ldr	r0, [r7, #8]
 800ba30:	f000 fa5a 	bl	800bee8 <prvAddCurrentTaskToDelayedList>
	}
 800ba34:	bf00      	nop
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	200038d4 	.word	0x200038d4

0800ba40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10b      	bne.n	800ba6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	60fb      	str	r3, [r7, #12]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3318      	adds	r3, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fd70 	bl	800a558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba78:	4b1d      	ldr	r3, [pc, #116]	@ (800baf0 <xTaskRemoveFromEventList+0xb0>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d11d      	bne.n	800babc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fd67 	bl	800a558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba8e:	4b19      	ldr	r3, [pc, #100]	@ (800baf4 <xTaskRemoveFromEventList+0xb4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d903      	bls.n	800ba9e <xTaskRemoveFromEventList+0x5e>
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9a:	4a16      	ldr	r2, [pc, #88]	@ (800baf4 <xTaskRemoveFromEventList+0xb4>)
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4a13      	ldr	r2, [pc, #76]	@ (800baf8 <xTaskRemoveFromEventList+0xb8>)
 800baac:	441a      	add	r2, r3
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7fe fcf2 	bl	800a49e <vListInsertEnd>
 800baba:	e005      	b.n	800bac8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3318      	adds	r3, #24
 800bac0:	4619      	mov	r1, r3
 800bac2:	480e      	ldr	r0, [pc, #56]	@ (800bafc <xTaskRemoveFromEventList+0xbc>)
 800bac4:	f7fe fceb 	bl	800a49e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bacc:	4b0c      	ldr	r3, [pc, #48]	@ (800bb00 <xTaskRemoveFromEventList+0xc0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d905      	bls.n	800bae2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bad6:	2301      	movs	r3, #1
 800bad8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bada:	4b0a      	ldr	r3, [pc, #40]	@ (800bb04 <xTaskRemoveFromEventList+0xc4>)
 800badc:	2201      	movs	r2, #1
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e001      	b.n	800bae6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bae2:	2300      	movs	r3, #0
 800bae4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bae6:	697b      	ldr	r3, [r7, #20]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20003dd0 	.word	0x20003dd0
 800baf4:	20003db0 	.word	0x20003db0
 800baf8:	200038d8 	.word	0x200038d8
 800bafc:	20003d68 	.word	0x20003d68
 800bb00:	200038d4 	.word	0x200038d4
 800bb04:	20003dbc 	.word	0x20003dbc

0800bb08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb10:	4b06      	ldr	r3, [pc, #24]	@ (800bb2c <vTaskInternalSetTimeOutState+0x24>)
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb18:	4b05      	ldr	r3, [pc, #20]	@ (800bb30 <vTaskInternalSetTimeOutState+0x28>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	605a      	str	r2, [r3, #4]
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20003dc0 	.word	0x20003dc0
 800bb30:	20003dac 	.word	0x20003dac

0800bb34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10b      	bne.n	800bb5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	613b      	str	r3, [r7, #16]
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	e7fd      	b.n	800bb58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10b      	bne.n	800bb7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	60fb      	str	r3, [r7, #12]
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	e7fd      	b.n	800bb76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb7a:	f000 ff55 	bl	800ca28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf4 <xTaskCheckForTimeOut+0xc0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	69ba      	ldr	r2, [r7, #24]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb96:	d102      	bne.n	800bb9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61fb      	str	r3, [r7, #28]
 800bb9c:	e023      	b.n	800bbe6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	4b15      	ldr	r3, [pc, #84]	@ (800bbf8 <xTaskCheckForTimeOut+0xc4>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d007      	beq.n	800bbba <xTaskCheckForTimeOut+0x86>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d302      	bcc.n	800bbba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	61fb      	str	r3, [r7, #28]
 800bbb8:	e015      	b.n	800bbe6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d20b      	bcs.n	800bbdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	1ad2      	subs	r2, r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff ff99 	bl	800bb08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	61fb      	str	r3, [r7, #28]
 800bbda:	e004      	b.n	800bbe6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbe6:	f000 ff51 	bl	800ca8c <vPortExitCritical>

	return xReturn;
 800bbea:	69fb      	ldr	r3, [r7, #28]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3720      	adds	r7, #32
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20003dac 	.word	0x20003dac
 800bbf8:	20003dc0 	.word	0x20003dc0

0800bbfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc00:	4b03      	ldr	r3, [pc, #12]	@ (800bc10 <vTaskMissedYield+0x14>)
 800bc02:	2201      	movs	r2, #1
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	20003dbc 	.word	0x20003dbc

0800bc14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc1c:	f000 f852 	bl	800bcc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc20:	4b06      	ldr	r3, [pc, #24]	@ (800bc3c <prvIdleTask+0x28>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d9f9      	bls.n	800bc1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc28:	4b05      	ldr	r3, [pc, #20]	@ (800bc40 <prvIdleTask+0x2c>)
 800bc2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc38:	e7f0      	b.n	800bc1c <prvIdleTask+0x8>
 800bc3a:	bf00      	nop
 800bc3c:	200038d8 	.word	0x200038d8
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	607b      	str	r3, [r7, #4]
 800bc4e:	e00c      	b.n	800bc6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	4613      	mov	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4a12      	ldr	r2, [pc, #72]	@ (800bca4 <prvInitialiseTaskLists+0x60>)
 800bc5c:	4413      	add	r3, r2
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fe fbf0 	bl	800a444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3301      	adds	r3, #1
 800bc68:	607b      	str	r3, [r7, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b37      	cmp	r3, #55	@ 0x37
 800bc6e:	d9ef      	bls.n	800bc50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc70:	480d      	ldr	r0, [pc, #52]	@ (800bca8 <prvInitialiseTaskLists+0x64>)
 800bc72:	f7fe fbe7 	bl	800a444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc76:	480d      	ldr	r0, [pc, #52]	@ (800bcac <prvInitialiseTaskLists+0x68>)
 800bc78:	f7fe fbe4 	bl	800a444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc7c:	480c      	ldr	r0, [pc, #48]	@ (800bcb0 <prvInitialiseTaskLists+0x6c>)
 800bc7e:	f7fe fbe1 	bl	800a444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc82:	480c      	ldr	r0, [pc, #48]	@ (800bcb4 <prvInitialiseTaskLists+0x70>)
 800bc84:	f7fe fbde 	bl	800a444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc88:	480b      	ldr	r0, [pc, #44]	@ (800bcb8 <prvInitialiseTaskLists+0x74>)
 800bc8a:	f7fe fbdb 	bl	800a444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <prvInitialiseTaskLists+0x78>)
 800bc90:	4a05      	ldr	r2, [pc, #20]	@ (800bca8 <prvInitialiseTaskLists+0x64>)
 800bc92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc94:	4b0a      	ldr	r3, [pc, #40]	@ (800bcc0 <prvInitialiseTaskLists+0x7c>)
 800bc96:	4a05      	ldr	r2, [pc, #20]	@ (800bcac <prvInitialiseTaskLists+0x68>)
 800bc98:	601a      	str	r2, [r3, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	200038d8 	.word	0x200038d8
 800bca8:	20003d38 	.word	0x20003d38
 800bcac:	20003d4c 	.word	0x20003d4c
 800bcb0:	20003d68 	.word	0x20003d68
 800bcb4:	20003d7c 	.word	0x20003d7c
 800bcb8:	20003d94 	.word	0x20003d94
 800bcbc:	20003d60 	.word	0x20003d60
 800bcc0:	20003d64 	.word	0x20003d64

0800bcc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcca:	e019      	b.n	800bd00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bccc:	f000 feac 	bl	800ca28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd0:	4b10      	ldr	r3, [pc, #64]	@ (800bd14 <prvCheckTasksWaitingTermination+0x50>)
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe fc3b 	bl	800a558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <prvCheckTasksWaitingTermination+0x54>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	4a0b      	ldr	r2, [pc, #44]	@ (800bd18 <prvCheckTasksWaitingTermination+0x54>)
 800bcea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcec:	4b0b      	ldr	r3, [pc, #44]	@ (800bd1c <prvCheckTasksWaitingTermination+0x58>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	4a0a      	ldr	r2, [pc, #40]	@ (800bd1c <prvCheckTasksWaitingTermination+0x58>)
 800bcf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcf6:	f000 fec9 	bl	800ca8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f810 	bl	800bd20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd00:	4b06      	ldr	r3, [pc, #24]	@ (800bd1c <prvCheckTasksWaitingTermination+0x58>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e1      	bne.n	800bccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20003d7c 	.word	0x20003d7c
 800bd18:	20003da8 	.word	0x20003da8
 800bd1c:	20003d90 	.word	0x20003d90

0800bd20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3354      	adds	r3, #84	@ 0x54
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f002 fd1f 	bl	800e770 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d108      	bne.n	800bd4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 f861 	bl	800ce08 <vPortFree>
				vPortFree( pxTCB );
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f001 f85e 	bl	800ce08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd4c:	e019      	b.n	800bd82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d103      	bne.n	800bd60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 f855 	bl	800ce08 <vPortFree>
	}
 800bd5e:	e010      	b.n	800bd82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d00b      	beq.n	800bd82 <prvDeleteTCB+0x62>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	60fb      	str	r3, [r7, #12]
}
 800bd7c:	bf00      	nop
 800bd7e:	bf00      	nop
 800bd80:	e7fd      	b.n	800bd7e <prvDeleteTCB+0x5e>
	}
 800bd82:	bf00      	nop
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd92:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <prvResetNextTaskUnblockTime+0x38>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc8 <prvResetNextTaskUnblockTime+0x3c>)
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bda4:	e008      	b.n	800bdb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda6:	4b07      	ldr	r3, [pc, #28]	@ (800bdc4 <prvResetNextTaskUnblockTime+0x38>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	4a04      	ldr	r2, [pc, #16]	@ (800bdc8 <prvResetNextTaskUnblockTime+0x3c>)
 800bdb6:	6013      	str	r3, [r2, #0]
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	20003d60 	.word	0x20003d60
 800bdc8:	20003dc8 	.word	0x20003dc8

0800bdcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bdd2:	4b0b      	ldr	r3, [pc, #44]	@ (800be00 <xTaskGetSchedulerState+0x34>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdda:	2301      	movs	r3, #1
 800bddc:	607b      	str	r3, [r7, #4]
 800bdde:	e008      	b.n	800bdf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bde0:	4b08      	ldr	r3, [pc, #32]	@ (800be04 <xTaskGetSchedulerState+0x38>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bde8:	2302      	movs	r3, #2
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	e001      	b.n	800bdf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdf2:	687b      	ldr	r3, [r7, #4]
	}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20003db4 	.word	0x20003db4
 800be04:	20003dd0 	.word	0x20003dd0

0800be08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d058      	beq.n	800bed0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be1e:	4b2f      	ldr	r3, [pc, #188]	@ (800bedc <xTaskPriorityDisinherit+0xd4>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	429a      	cmp	r2, r3
 800be26:	d00b      	beq.n	800be40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	60fb      	str	r3, [r7, #12]
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	e7fd      	b.n	800be3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10b      	bne.n	800be60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	60bb      	str	r3, [r7, #8]
}
 800be5a:	bf00      	nop
 800be5c:	bf00      	nop
 800be5e:	e7fd      	b.n	800be5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be64:	1e5a      	subs	r2, r3, #1
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be72:	429a      	cmp	r2, r3
 800be74:	d02c      	beq.n	800bed0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d128      	bne.n	800bed0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	3304      	adds	r3, #4
 800be82:	4618      	mov	r0, r3
 800be84:	f7fe fb68 	bl	800a558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea0:	4b0f      	ldr	r3, [pc, #60]	@ (800bee0 <xTaskPriorityDisinherit+0xd8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d903      	bls.n	800beb0 <xTaskPriorityDisinherit+0xa8>
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beac:	4a0c      	ldr	r2, [pc, #48]	@ (800bee0 <xTaskPriorityDisinherit+0xd8>)
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4a09      	ldr	r2, [pc, #36]	@ (800bee4 <xTaskPriorityDisinherit+0xdc>)
 800bebe:	441a      	add	r2, r3
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	3304      	adds	r3, #4
 800bec4:	4619      	mov	r1, r3
 800bec6:	4610      	mov	r0, r2
 800bec8:	f7fe fae9 	bl	800a49e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800becc:	2301      	movs	r3, #1
 800bece:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bed0:	697b      	ldr	r3, [r7, #20]
	}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3718      	adds	r7, #24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	200038d4 	.word	0x200038d4
 800bee0:	20003db0 	.word	0x20003db0
 800bee4:	200038d8 	.word	0x200038d8

0800bee8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bef2:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0x90>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef8:	4b20      	ldr	r3, [pc, #128]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x94>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3304      	adds	r3, #4
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe fb2a 	bl	800a558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0a:	d10a      	bne.n	800bf22 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d007      	beq.n	800bf22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf12:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4819      	ldr	r0, [pc, #100]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf1c:	f7fe fabf 	bl	800a49e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf20:	e026      	b.n	800bf70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4413      	add	r3, r2
 800bf28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf2a:	4b14      	ldr	r3, [pc, #80]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68ba      	ldr	r2, [r7, #8]
 800bf30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d209      	bcs.n	800bf4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf3a:	4b12      	ldr	r3, [pc, #72]	@ (800bf84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4619      	mov	r1, r3
 800bf46:	4610      	mov	r0, r2
 800bf48:	f7fe facd 	bl	800a4e6 <vListInsert>
}
 800bf4c:	e010      	b.n	800bf70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	4b0a      	ldr	r3, [pc, #40]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3304      	adds	r3, #4
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f7fe fac3 	bl	800a4e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf60:	4b0a      	ldr	r3, [pc, #40]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d202      	bcs.n	800bf70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf6a:	4a08      	ldr	r2, [pc, #32]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	6013      	str	r3, [r2, #0]
}
 800bf70:	bf00      	nop
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	20003dac 	.word	0x20003dac
 800bf7c:	200038d4 	.word	0x200038d4
 800bf80:	20003d94 	.word	0x20003d94
 800bf84:	20003d64 	.word	0x20003d64
 800bf88:	20003d60 	.word	0x20003d60
 800bf8c:	20003dc8 	.word	0x20003dc8

0800bf90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	@ 0x28
 800bf94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf9a:	f000 fbb1 	bl	800c700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf9e:	4b1d      	ldr	r3, [pc, #116]	@ (800c014 <xTimerCreateTimerTask+0x84>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d021      	beq.n	800bfea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfae:	1d3a      	adds	r2, r7, #4
 800bfb0:	f107 0108 	add.w	r1, r7, #8
 800bfb4:	f107 030c 	add.w	r3, r7, #12
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fe fa29 	bl	800a410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfbe:	6879      	ldr	r1, [r7, #4]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	9202      	str	r2, [sp, #8]
 800bfc6:	9301      	str	r3, [sp, #4]
 800bfc8:	2302      	movs	r3, #2
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	460a      	mov	r2, r1
 800bfd0:	4911      	ldr	r1, [pc, #68]	@ (800c018 <xTimerCreateTimerTask+0x88>)
 800bfd2:	4812      	ldr	r0, [pc, #72]	@ (800c01c <xTimerCreateTimerTask+0x8c>)
 800bfd4:	f7ff f8a2 	bl	800b11c <xTaskCreateStatic>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	4a11      	ldr	r2, [pc, #68]	@ (800c020 <xTimerCreateTimerTask+0x90>)
 800bfdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfde:	4b10      	ldr	r3, [pc, #64]	@ (800c020 <xTimerCreateTimerTask+0x90>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10b      	bne.n	800c008 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c008:	697b      	ldr	r3, [r7, #20]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20003e04 	.word	0x20003e04
 800c018:	08010888 	.word	0x08010888
 800c01c:	0800c299 	.word	0x0800c299
 800c020:	20003e08 	.word	0x20003e08

0800c024 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af02      	add	r7, sp, #8
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c032:	202c      	movs	r0, #44	@ 0x2c
 800c034:	f000 fe1a 	bl	800cc6c <pvPortMalloc>
 800c038:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00d      	beq.n	800c05c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 f845 	bl	800c0e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c05c:	697b      	ldr	r3, [r7, #20]
	}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c066:	b580      	push	{r7, lr}
 800c068:	b08a      	sub	sp, #40	@ 0x28
 800c06a:	af02      	add	r7, sp, #8
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
 800c072:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c074:	232c      	movs	r3, #44	@ 0x2c
 800c076:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	2b2c      	cmp	r3, #44	@ 0x2c
 800c07c:	d00b      	beq.n	800c096 <xTimerCreateStatic+0x30>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	61bb      	str	r3, [r7, #24]
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	e7fd      	b.n	800c092 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c096:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10b      	bne.n	800c0b6 <xTimerCreateStatic+0x50>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	617b      	str	r3, [r7, #20]
}
 800c0b0:	bf00      	nop
 800c0b2:	bf00      	nop
 800c0b4:	e7fd      	b.n	800c0b2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00d      	beq.n	800c0dc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	68b9      	ldr	r1, [r7, #8]
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f000 f805 	bl	800c0e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
	}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b086      	sub	sp, #24
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	60f8      	str	r0, [r7, #12]
 800c0ee:	60b9      	str	r1, [r7, #8]
 800c0f0:	607a      	str	r2, [r7, #4]
 800c0f2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	617b      	str	r3, [r7, #20]
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01e      	beq.n	800c156 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c118:	f000 faf2 	bl	800c700 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c130:	6a3a      	ldr	r2, [r7, #32]
 800c132:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	3304      	adds	r3, #4
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe f9a3 	bl	800a484 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d008      	beq.n	800c156 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c14a:	f043 0304 	orr.w	r3, r3, #4
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c156:	bf00      	nop
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08a      	sub	sp, #40	@ 0x28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c16e:	2300      	movs	r3, #0
 800c170:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10b      	bne.n	800c190 <xTimerGenericCommand+0x30>
	__asm volatile
 800c178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	623b      	str	r3, [r7, #32]
}
 800c18a:	bf00      	nop
 800c18c:	bf00      	nop
 800c18e:	e7fd      	b.n	800c18c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c190:	4b19      	ldr	r3, [pc, #100]	@ (800c1f8 <xTimerGenericCommand+0x98>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d02a      	beq.n	800c1ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	dc18      	bgt.n	800c1dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1aa:	f7ff fe0f 	bl	800bdcc <xTaskGetSchedulerState>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d109      	bne.n	800c1c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1b4:	4b10      	ldr	r3, [pc, #64]	@ (800c1f8 <xTimerGenericCommand+0x98>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	f107 0110 	add.w	r1, r7, #16
 800c1bc:	2300      	movs	r3, #0
 800c1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1c0:	f7fe fb3a 	bl	800a838 <xQueueGenericSend>
 800c1c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1c6:	e012      	b.n	800c1ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f8 <xTimerGenericCommand+0x98>)
 800c1ca:	6818      	ldr	r0, [r3, #0]
 800c1cc:	f107 0110 	add.w	r1, r7, #16
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7fe fb30 	bl	800a838 <xQueueGenericSend>
 800c1d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1da:	e008      	b.n	800c1ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1dc:	4b06      	ldr	r3, [pc, #24]	@ (800c1f8 <xTimerGenericCommand+0x98>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	f107 0110 	add.w	r1, r7, #16
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	f7fe fc28 	bl	800aa3c <xQueueGenericSendFromISR>
 800c1ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3728      	adds	r7, #40	@ 0x28
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20003e04 	.word	0x20003e04

0800c1fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af02      	add	r7, sp, #8
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c206:	4b23      	ldr	r3, [pc, #140]	@ (800c294 <prvProcessExpiredTimer+0x98>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	3304      	adds	r3, #4
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe f99f 	bl	800a558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d023      	beq.n	800c270 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	699a      	ldr	r2, [r3, #24]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	18d1      	adds	r1, r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	6978      	ldr	r0, [r7, #20]
 800c236:	f000 f8d5 	bl	800c3e4 <prvInsertTimerInActiveList>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d020      	beq.n	800c282 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c240:	2300      	movs	r3, #0
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	2300      	movs	r3, #0
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	2100      	movs	r1, #0
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f7ff ff88 	bl	800c160 <xTimerGenericCommand>
 800c250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d114      	bne.n	800c282 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c276:	f023 0301 	bic.w	r3, r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	6978      	ldr	r0, [r7, #20]
 800c288:	4798      	blx	r3
}
 800c28a:	bf00      	nop
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20003dfc 	.word	0x20003dfc

0800c298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2a0:	f107 0308 	add.w	r3, r7, #8
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 f859 	bl	800c35c <prvGetNextExpireTime>
 800c2aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f805 	bl	800c2c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2b6:	f000 f8d7 	bl	800c468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2ba:	bf00      	nop
 800c2bc:	e7f0      	b.n	800c2a0 <prvTimerTask+0x8>
	...

0800c2c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2ca:	f7ff f98b 	bl	800b5e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2ce:	f107 0308 	add.w	r3, r7, #8
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 f866 	bl	800c3a4 <prvSampleTimeNow>
 800c2d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d130      	bne.n	800c342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <prvProcessTimerOrBlockTask+0x3c>
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d806      	bhi.n	800c2fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2ee:	f7ff f987 	bl	800b600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2f2:	68f9      	ldr	r1, [r7, #12]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff ff81 	bl	800c1fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2fa:	e024      	b.n	800c346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c302:	4b13      	ldr	r3, [pc, #76]	@ (800c350 <prvProcessTimerOrBlockTask+0x90>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <prvProcessTimerOrBlockTask+0x50>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <prvProcessTimerOrBlockTask+0x52>
 800c310:	2300      	movs	r3, #0
 800c312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c314:	4b0f      	ldr	r3, [pc, #60]	@ (800c354 <prvProcessTimerOrBlockTask+0x94>)
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	4619      	mov	r1, r3
 800c322:	f7fe fec7 	bl	800b0b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c326:	f7ff f96b 	bl	800b600 <xTaskResumeAll>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c330:	4b09      	ldr	r3, [pc, #36]	@ (800c358 <prvProcessTimerOrBlockTask+0x98>)
 800c332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c336:	601a      	str	r2, [r3, #0]
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	f3bf 8f6f 	isb	sy
}
 800c340:	e001      	b.n	800c346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c342:	f7ff f95d 	bl	800b600 <xTaskResumeAll>
}
 800c346:	bf00      	nop
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20003e00 	.word	0x20003e00
 800c354:	20003e04 	.word	0x20003e04
 800c358:	e000ed04 	.word	0xe000ed04

0800c35c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c364:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a0 <prvGetNextExpireTime+0x44>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <prvGetNextExpireTime+0x16>
 800c36e:	2201      	movs	r2, #1
 800c370:	e000      	b.n	800c374 <prvGetNextExpireTime+0x18>
 800c372:	2200      	movs	r2, #0
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d105      	bne.n	800c38c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c380:	4b07      	ldr	r3, [pc, #28]	@ (800c3a0 <prvGetNextExpireTime+0x44>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	e001      	b.n	800c390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c390:	68fb      	ldr	r3, [r7, #12]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20003dfc 	.word	0x20003dfc

0800c3a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3ac:	f7ff f9c6 	bl	800b73c <xTaskGetTickCount>
 800c3b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e0 <prvSampleTimeNow+0x3c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d205      	bcs.n	800c3c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3bc:	f000 f93a 	bl	800c634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	e002      	b.n	800c3ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3ce:	4a04      	ldr	r2, [pc, #16]	@ (800c3e0 <prvSampleTimeNow+0x3c>)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20003e0c 	.word	0x20003e0c

0800c3e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	429a      	cmp	r2, r3
 800c408:	d812      	bhi.n	800c430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	1ad2      	subs	r2, r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	699b      	ldr	r3, [r3, #24]
 800c414:	429a      	cmp	r2, r3
 800c416:	d302      	bcc.n	800c41e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c418:	2301      	movs	r3, #1
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	e01b      	b.n	800c456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c41e:	4b10      	ldr	r3, [pc, #64]	@ (800c460 <prvInsertTimerInActiveList+0x7c>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3304      	adds	r3, #4
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7fe f85c 	bl	800a4e6 <vListInsert>
 800c42e:	e012      	b.n	800c456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d206      	bcs.n	800c446 <prvInsertTimerInActiveList+0x62>
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d302      	bcc.n	800c446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c440:	2301      	movs	r3, #1
 800c442:	617b      	str	r3, [r7, #20]
 800c444:	e007      	b.n	800c456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c446:	4b07      	ldr	r3, [pc, #28]	@ (800c464 <prvInsertTimerInActiveList+0x80>)
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3304      	adds	r3, #4
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7fe f848 	bl	800a4e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c456:	697b      	ldr	r3, [r7, #20]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20003e00 	.word	0x20003e00
 800c464:	20003dfc 	.word	0x20003dfc

0800c468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08e      	sub	sp, #56	@ 0x38
 800c46c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c46e:	e0ce      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	da19      	bge.n	800c4aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c476:	1d3b      	adds	r3, r7, #4
 800c478:	3304      	adds	r3, #4
 800c47a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d10b      	bne.n	800c49a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	61fb      	str	r3, [r7, #28]
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	e7fd      	b.n	800c496 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a0:	6850      	ldr	r0, [r2, #4]
 800c4a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a4:	6892      	ldr	r2, [r2, #8]
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f2c0 80ae 	blt.w	800c60e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe f848 	bl	800a558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4c8:	463b      	mov	r3, r7
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff ff6a 	bl	800c3a4 <prvSampleTimeNow>
 800c4d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b09      	cmp	r3, #9
 800c4d6:	f200 8097 	bhi.w	800c608 <prvProcessReceivedCommands+0x1a0>
 800c4da:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e0 <prvProcessReceivedCommands+0x78>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c509 	.word	0x0800c509
 800c4e4:	0800c509 	.word	0x0800c509
 800c4e8:	0800c509 	.word	0x0800c509
 800c4ec:	0800c57f 	.word	0x0800c57f
 800c4f0:	0800c593 	.word	0x0800c593
 800c4f4:	0800c5df 	.word	0x0800c5df
 800c4f8:	0800c509 	.word	0x0800c509
 800c4fc:	0800c509 	.word	0x0800c509
 800c500:	0800c57f 	.word	0x0800c57f
 800c504:	0800c593 	.word	0x0800c593
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c50e:	f043 0301 	orr.w	r3, r3, #1
 800c512:	b2da      	uxtb	r2, r3
 800c514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	18d1      	adds	r1, r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c528:	f7ff ff5c 	bl	800c3e4 <prvInsertTimerInActiveList>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d06c      	beq.n	800c60c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c538:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b00      	cmp	r3, #0
 800c546:	d061      	beq.n	800c60c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	441a      	add	r2, r3
 800c550:	2300      	movs	r3, #0
 800c552:	9300      	str	r3, [sp, #0]
 800c554:	2300      	movs	r3, #0
 800c556:	2100      	movs	r1, #0
 800c558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c55a:	f7ff fe01 	bl	800c160 <xTimerGenericCommand>
 800c55e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d152      	bne.n	800c60c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56a:	f383 8811 	msr	BASEPRI, r3
 800c56e:	f3bf 8f6f 	isb	sy
 800c572:	f3bf 8f4f 	dsb	sy
 800c576:	61bb      	str	r3, [r7, #24]
}
 800c578:	bf00      	nop
 800c57a:	bf00      	nop
 800c57c:	e7fd      	b.n	800c57a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c584:	f023 0301 	bic.w	r3, r3, #1
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c590:	e03d      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c594:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c598:	f043 0301 	orr.w	r3, r3, #1
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10b      	bne.n	800c5ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	617b      	str	r3, [r7, #20]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5cc:	699a      	ldr	r2, [r3, #24]
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	18d1      	adds	r1, r2, r3
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5d8:	f7ff ff04 	bl	800c3e4 <prvInsertTimerInActiveList>
					break;
 800c5dc:	e017      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d103      	bne.n	800c5f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c5ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ee:	f000 fc0b 	bl	800ce08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5f2:	e00c      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5fa:	f023 0301 	bic.w	r3, r3, #1
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c606:	e002      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c608:	bf00      	nop
 800c60a:	e000      	b.n	800c60e <prvProcessReceivedCommands+0x1a6>
					break;
 800c60c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c60e:	4b08      	ldr	r3, [pc, #32]	@ (800c630 <prvProcessReceivedCommands+0x1c8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1d39      	adds	r1, r7, #4
 800c614:	2200      	movs	r2, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe faae 	bl	800ab78 <xQueueReceive>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f47f af26 	bne.w	800c470 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	3730      	adds	r7, #48	@ 0x30
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20003e04 	.word	0x20003e04

0800c634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c63a:	e049      	b.n	800c6d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c63c:	4b2e      	ldr	r3, [pc, #184]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c646:	4b2c      	ldr	r3, [pc, #176]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3304      	adds	r3, #4
 800c654:	4618      	mov	r0, r3
 800c656:	f7fd ff7f 	bl	800a558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d02f      	beq.n	800c6d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	4413      	add	r3, r2
 800c678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d90e      	bls.n	800c6a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c68e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3304      	adds	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f7fd ff24 	bl	800a4e6 <vListInsert>
 800c69e:	e017      	b.n	800c6d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	693a      	ldr	r2, [r7, #16]
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fd58 	bl	800c160 <xTimerGenericCommand>
 800c6b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10b      	bne.n	800c6d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	603b      	str	r3, [r7, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	e7fd      	b.n	800c6cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6d0:	4b09      	ldr	r3, [pc, #36]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1b0      	bne.n	800c63c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6da:	4b07      	ldr	r3, [pc, #28]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6e0:	4b06      	ldr	r3, [pc, #24]	@ (800c6fc <prvSwitchTimerLists+0xc8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a04      	ldr	r2, [pc, #16]	@ (800c6f8 <prvSwitchTimerLists+0xc4>)
 800c6e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6e8:	4a04      	ldr	r2, [pc, #16]	@ (800c6fc <prvSwitchTimerLists+0xc8>)
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	6013      	str	r3, [r2, #0]
}
 800c6ee:	bf00      	nop
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20003dfc 	.word	0x20003dfc
 800c6fc:	20003e00 	.word	0x20003e00

0800c700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c706:	f000 f98f 	bl	800ca28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c70a:	4b15      	ldr	r3, [pc, #84]	@ (800c760 <prvCheckForValidListAndQueue+0x60>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d120      	bne.n	800c754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c712:	4814      	ldr	r0, [pc, #80]	@ (800c764 <prvCheckForValidListAndQueue+0x64>)
 800c714:	f7fd fe96 	bl	800a444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c718:	4813      	ldr	r0, [pc, #76]	@ (800c768 <prvCheckForValidListAndQueue+0x68>)
 800c71a:	f7fd fe93 	bl	800a444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c71e:	4b13      	ldr	r3, [pc, #76]	@ (800c76c <prvCheckForValidListAndQueue+0x6c>)
 800c720:	4a10      	ldr	r2, [pc, #64]	@ (800c764 <prvCheckForValidListAndQueue+0x64>)
 800c722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c724:	4b12      	ldr	r3, [pc, #72]	@ (800c770 <prvCheckForValidListAndQueue+0x70>)
 800c726:	4a10      	ldr	r2, [pc, #64]	@ (800c768 <prvCheckForValidListAndQueue+0x68>)
 800c728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c72a:	2300      	movs	r3, #0
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	4b11      	ldr	r3, [pc, #68]	@ (800c774 <prvCheckForValidListAndQueue+0x74>)
 800c730:	4a11      	ldr	r2, [pc, #68]	@ (800c778 <prvCheckForValidListAndQueue+0x78>)
 800c732:	2110      	movs	r1, #16
 800c734:	200a      	movs	r0, #10
 800c736:	f7fd ffa3 	bl	800a680 <xQueueGenericCreateStatic>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4a08      	ldr	r2, [pc, #32]	@ (800c760 <prvCheckForValidListAndQueue+0x60>)
 800c73e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c740:	4b07      	ldr	r3, [pc, #28]	@ (800c760 <prvCheckForValidListAndQueue+0x60>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d005      	beq.n	800c754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c748:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <prvCheckForValidListAndQueue+0x60>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	490b      	ldr	r1, [pc, #44]	@ (800c77c <prvCheckForValidListAndQueue+0x7c>)
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe fc86 	bl	800b060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c754:	f000 f99a 	bl	800ca8c <vPortExitCritical>
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20003e04 	.word	0x20003e04
 800c764:	20003dd4 	.word	0x20003dd4
 800c768:	20003de8 	.word	0x20003de8
 800c76c:	20003dfc 	.word	0x20003dfc
 800c770:	20003e00 	.word	0x20003e00
 800c774:	20003eb0 	.word	0x20003eb0
 800c778:	20003e10 	.word	0x20003e10
 800c77c:	08010890 	.word	0x08010890

0800c780 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <pvTimerGetTimerID+0x2a>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60fb      	str	r3, [r7, #12]
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c7aa:	f000 f93d 	bl	800ca28 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c7b4:	f000 f96a 	bl	800ca8c <vPortExitCritical>

	return pvReturn;
 800c7b8:	693b      	ldr	r3, [r7, #16]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
	...

0800c7c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	3b04      	subs	r3, #4
 800c7d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3b04      	subs	r3, #4
 800c7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f023 0201 	bic.w	r2, r3, #1
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3b04      	subs	r3, #4
 800c7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800c828 <pxPortInitialiseStack+0x64>)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3b14      	subs	r3, #20
 800c7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3b04      	subs	r3, #4
 800c80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f06f 0202 	mvn.w	r2, #2
 800c812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3b20      	subs	r3, #32
 800c818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c81a:	68fb      	ldr	r3, [r7, #12]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	0800c82d 	.word	0x0800c82d

0800c82c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c836:	4b13      	ldr	r3, [pc, #76]	@ (800c884 <prvTaskExitError+0x58>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83e:	d00b      	beq.n	800c858 <prvTaskExitError+0x2c>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	60fb      	str	r3, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <prvTaskExitError+0x28>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	60bb      	str	r3, [r7, #8]
}
 800c86a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c86c:	bf00      	nop
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0fc      	beq.n	800c86e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	2000002c 	.word	0x2000002c
	...

0800c890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <pxCurrentTCBConst2>)
 800c892:	6819      	ldr	r1, [r3, #0]
 800c894:	6808      	ldr	r0, [r1, #0]
 800c896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	f380 8809 	msr	PSP, r0
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f04f 0000 	mov.w	r0, #0
 800c8a6:	f380 8811 	msr	BASEPRI, r0
 800c8aa:	4770      	bx	lr
 800c8ac:	f3af 8000 	nop.w

0800c8b0 <pxCurrentTCBConst2>:
 800c8b0:	200038d4 	.word	0x200038d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop

0800c8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8b8:	4808      	ldr	r0, [pc, #32]	@ (800c8dc <prvPortStartFirstTask+0x24>)
 800c8ba:	6800      	ldr	r0, [r0, #0]
 800c8bc:	6800      	ldr	r0, [r0, #0]
 800c8be:	f380 8808 	msr	MSP, r0
 800c8c2:	f04f 0000 	mov.w	r0, #0
 800c8c6:	f380 8814 	msr	CONTROL, r0
 800c8ca:	b662      	cpsie	i
 800c8cc:	b661      	cpsie	f
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	df00      	svc	0
 800c8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8da:	bf00      	nop
 800c8dc:	e000ed08 	.word	0xe000ed08

0800c8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8e6:	4b47      	ldr	r3, [pc, #284]	@ (800ca04 <xPortStartScheduler+0x124>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a47      	ldr	r2, [pc, #284]	@ (800ca08 <xPortStartScheduler+0x128>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d10b      	bne.n	800c908 <xPortStartScheduler+0x28>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	613b      	str	r3, [r7, #16]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c908:	4b3e      	ldr	r3, [pc, #248]	@ (800ca04 <xPortStartScheduler+0x124>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca0c <xPortStartScheduler+0x12c>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d10b      	bne.n	800c92a <xPortStartScheduler+0x4a>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	60fb      	str	r3, [r7, #12]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c92a:	4b39      	ldr	r3, [pc, #228]	@ (800ca10 <xPortStartScheduler+0x130>)
 800c92c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	22ff      	movs	r2, #255	@ 0xff
 800c93a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	4b31      	ldr	r3, [pc, #196]	@ (800ca14 <xPortStartScheduler+0x134>)
 800c950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c952:	4b31      	ldr	r3, [pc, #196]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c954:	2207      	movs	r2, #7
 800c956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c958:	e009      	b.n	800c96e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c95a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3b01      	subs	r3, #1
 800c960:	4a2d      	ldr	r2, [pc, #180]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c96e:	78fb      	ldrb	r3, [r7, #3]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c976:	2b80      	cmp	r3, #128	@ 0x80
 800c978:	d0ef      	beq.n	800c95a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c97a:	4b27      	ldr	r3, [pc, #156]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f1c3 0307 	rsb	r3, r3, #7
 800c982:	2b04      	cmp	r3, #4
 800c984:	d00b      	beq.n	800c99e <xPortStartScheduler+0xbe>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60bb      	str	r3, [r7, #8]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c99e:	4b1e      	ldr	r3, [pc, #120]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	021b      	lsls	r3, r3, #8
 800c9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9a8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ca18 <xPortStartScheduler+0x138>)
 800c9b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9bc:	4b17      	ldr	r3, [pc, #92]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c9c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9c8:	4b14      	ldr	r3, [pc, #80]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a13      	ldr	r2, [pc, #76]	@ (800ca1c <xPortStartScheduler+0x13c>)
 800c9ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c9d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9d4:	f000 f8da 	bl	800cb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9d8:	4b11      	ldr	r3, [pc, #68]	@ (800ca20 <xPortStartScheduler+0x140>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9de:	f000 f8f9 	bl	800cbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9e2:	4b10      	ldr	r3, [pc, #64]	@ (800ca24 <xPortStartScheduler+0x144>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800ca24 <xPortStartScheduler+0x144>)
 800c9e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c9ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9ee:	f7ff ff63 	bl	800c8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9f2:	f7fe ff6d 	bl	800b8d0 <vTaskSwitchContext>
	prvTaskExitError();
 800c9f6:	f7ff ff19 	bl	800c82c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3718      	adds	r7, #24
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	e000ed00 	.word	0xe000ed00
 800ca08:	410fc271 	.word	0x410fc271
 800ca0c:	410fc270 	.word	0x410fc270
 800ca10:	e000e400 	.word	0xe000e400
 800ca14:	20003f00 	.word	0x20003f00
 800ca18:	20003f04 	.word	0x20003f04
 800ca1c:	e000ed20 	.word	0xe000ed20
 800ca20:	2000002c 	.word	0x2000002c
 800ca24:	e000ef34 	.word	0xe000ef34

0800ca28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	607b      	str	r3, [r7, #4]
}
 800ca40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca42:	4b10      	ldr	r3, [pc, #64]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3301      	adds	r3, #1
 800ca48:	4a0e      	ldr	r2, [pc, #56]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca84 <vPortEnterCritical+0x5c>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d110      	bne.n	800ca76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca54:	4b0c      	ldr	r3, [pc, #48]	@ (800ca88 <vPortEnterCritical+0x60>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00b      	beq.n	800ca76 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	603b      	str	r3, [r7, #0]
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	e7fd      	b.n	800ca72 <vPortEnterCritical+0x4a>
	}
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	2000002c 	.word	0x2000002c
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca92:	4b12      	ldr	r3, [pc, #72]	@ (800cadc <vPortExitCritical+0x50>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10b      	bne.n	800cab2 <vPortExitCritical+0x26>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	607b      	str	r3, [r7, #4]
}
 800caac:	bf00      	nop
 800caae:	bf00      	nop
 800cab0:	e7fd      	b.n	800caae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cab2:	4b0a      	ldr	r3, [pc, #40]	@ (800cadc <vPortExitCritical+0x50>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <vPortExitCritical+0x50>)
 800caba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cabc:	4b07      	ldr	r3, [pc, #28]	@ (800cadc <vPortExitCritical+0x50>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d105      	bne.n	800cad0 <vPortExitCritical+0x44>
 800cac4:	2300      	movs	r3, #0
 800cac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	f383 8811 	msr	BASEPRI, r3
}
 800cace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	2000002c 	.word	0x2000002c

0800cae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cae0:	f3ef 8009 	mrs	r0, PSP
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	4b15      	ldr	r3, [pc, #84]	@ (800cb40 <pxCurrentTCBConst>)
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	f01e 0f10 	tst.w	lr, #16
 800caf0:	bf08      	it	eq
 800caf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800caf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafa:	6010      	str	r0, [r2, #0]
 800cafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cb04:	f380 8811 	msr	BASEPRI, r0
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f7fe fede 	bl	800b8d0 <vTaskSwitchContext>
 800cb14:	f04f 0000 	mov.w	r0, #0
 800cb18:	f380 8811 	msr	BASEPRI, r0
 800cb1c:	bc09      	pop	{r0, r3}
 800cb1e:	6819      	ldr	r1, [r3, #0]
 800cb20:	6808      	ldr	r0, [r1, #0]
 800cb22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb26:	f01e 0f10 	tst.w	lr, #16
 800cb2a:	bf08      	it	eq
 800cb2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb30:	f380 8809 	msr	PSP, r0
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	f3af 8000 	nop.w

0800cb40 <pxCurrentTCBConst>:
 800cb40:	200038d4 	.word	0x200038d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop

0800cb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	607b      	str	r3, [r7, #4]
}
 800cb60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb62:	f7fe fdfb 	bl	800b75c <xTaskIncrementTick>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d003      	beq.n	800cb74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb6c:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <xPortSysTickHandler+0x40>)
 800cb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	2300      	movs	r3, #0
 800cb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f383 8811 	msr	BASEPRI, r3
}
 800cb7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	e000ed04 	.word	0xe000ed04

0800cb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb90:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc0 <vPortSetupTimerInterrupt+0x34>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb96:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc4 <vPortSetupTimerInterrupt+0x38>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc8 <vPortSetupTimerInterrupt+0x3c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a0a      	ldr	r2, [pc, #40]	@ (800cbcc <vPortSetupTimerInterrupt+0x40>)
 800cba2:	fba2 2303 	umull	r2, r3, r2, r3
 800cba6:	099b      	lsrs	r3, r3, #6
 800cba8:	4a09      	ldr	r2, [pc, #36]	@ (800cbd0 <vPortSetupTimerInterrupt+0x44>)
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbae:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <vPortSetupTimerInterrupt+0x34>)
 800cbb0:	2207      	movs	r2, #7
 800cbb2:	601a      	str	r2, [r3, #0]
}
 800cbb4:	bf00      	nop
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
 800cbbe:	bf00      	nop
 800cbc0:	e000e010 	.word	0xe000e010
 800cbc4:	e000e018 	.word	0xe000e018
 800cbc8:	20000000 	.word	0x20000000
 800cbcc:	10624dd3 	.word	0x10624dd3
 800cbd0:	e000e014 	.word	0xe000e014

0800cbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cbe4 <vPortEnableVFP+0x10>
 800cbd8:	6801      	ldr	r1, [r0, #0]
 800cbda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cbde:	6001      	str	r1, [r0, #0]
 800cbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbe2:	bf00      	nop
 800cbe4:	e000ed88 	.word	0xe000ed88

0800cbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbee:	f3ef 8305 	mrs	r3, IPSR
 800cbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b0f      	cmp	r3, #15
 800cbf8:	d915      	bls.n	800cc26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbfa:	4a18      	ldr	r2, [pc, #96]	@ (800cc5c <vPortValidateInterruptPriority+0x74>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc04:	4b16      	ldr	r3, [pc, #88]	@ (800cc60 <vPortValidateInterruptPriority+0x78>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	7afa      	ldrb	r2, [r7, #11]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d20b      	bcs.n	800cc26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	607b      	str	r3, [r7, #4]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc26:	4b0f      	ldr	r3, [pc, #60]	@ (800cc64 <vPortValidateInterruptPriority+0x7c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc68 <vPortValidateInterruptPriority+0x80>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d90b      	bls.n	800cc4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	603b      	str	r3, [r7, #0]
}
 800cc48:	bf00      	nop
 800cc4a:	bf00      	nop
 800cc4c:	e7fd      	b.n	800cc4a <vPortValidateInterruptPriority+0x62>
	}
 800cc4e:	bf00      	nop
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop
 800cc5c:	e000e3f0 	.word	0xe000e3f0
 800cc60:	20003f00 	.word	0x20003f00
 800cc64:	e000ed0c 	.word	0xe000ed0c
 800cc68:	20003f04 	.word	0x20003f04

0800cc6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	@ 0x28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc78:	f7fe fcb4 	bl	800b5e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc7c:	4b5c      	ldr	r3, [pc, #368]	@ (800cdf0 <pvPortMalloc+0x184>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc84:	f000 f924 	bl	800ced0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc88:	4b5a      	ldr	r3, [pc, #360]	@ (800cdf4 <pvPortMalloc+0x188>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4013      	ands	r3, r2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f040 8095 	bne.w	800cdc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d01e      	beq.n	800ccda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d015      	beq.n	800ccda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f023 0307 	bic.w	r3, r3, #7
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f003 0307 	and.w	r3, r3, #7
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00b      	beq.n	800ccda <pvPortMalloc+0x6e>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	617b      	str	r3, [r7, #20]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d06f      	beq.n	800cdc0 <pvPortMalloc+0x154>
 800cce0:	4b45      	ldr	r3, [pc, #276]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d86a      	bhi.n	800cdc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ccea:	4b44      	ldr	r3, [pc, #272]	@ (800cdfc <pvPortMalloc+0x190>)
 800ccec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ccee:	4b43      	ldr	r3, [pc, #268]	@ (800cdfc <pvPortMalloc+0x190>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccf4:	e004      	b.n	800cd00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d903      	bls.n	800cd12 <pvPortMalloc+0xa6>
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1f1      	bne.n	800ccf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd12:	4b37      	ldr	r3, [pc, #220]	@ (800cdf0 <pvPortMalloc+0x184>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d051      	beq.n	800cdc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2208      	movs	r2, #8
 800cd22:	4413      	add	r3, r2
 800cd24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	1ad2      	subs	r2, r2, r3
 800cd36:	2308      	movs	r3, #8
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d920      	bls.n	800cd80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4413      	add	r3, r2
 800cd44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	f003 0307 	and.w	r3, r3, #7
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <pvPortMalloc+0xfc>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	613b      	str	r3, [r7, #16]
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	e7fd      	b.n	800cd64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd7a:	69b8      	ldr	r0, [r7, #24]
 800cd7c:	f000 f90a 	bl	800cf94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd80:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd8e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4b1b      	ldr	r3, [pc, #108]	@ (800ce00 <pvPortMalloc+0x194>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d203      	bcs.n	800cda2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd9a:	4b17      	ldr	r3, [pc, #92]	@ (800cdf8 <pvPortMalloc+0x18c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a18      	ldr	r2, [pc, #96]	@ (800ce00 <pvPortMalloc+0x194>)
 800cda0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <pvPortMalloc+0x188>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cdb6:	4b13      	ldr	r3, [pc, #76]	@ (800ce04 <pvPortMalloc+0x198>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	4a11      	ldr	r2, [pc, #68]	@ (800ce04 <pvPortMalloc+0x198>)
 800cdbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdc0:	f7fe fc1e 	bl	800b600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	f003 0307 	and.w	r3, r3, #7
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00b      	beq.n	800cde6 <pvPortMalloc+0x17a>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <pvPortMalloc+0x176>
	return pvReturn;
 800cde6:	69fb      	ldr	r3, [r7, #28]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3728      	adds	r7, #40	@ 0x28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20007b10 	.word	0x20007b10
 800cdf4:	20007b24 	.word	0x20007b24
 800cdf8:	20007b14 	.word	0x20007b14
 800cdfc:	20007b08 	.word	0x20007b08
 800ce00:	20007b18 	.word	0x20007b18
 800ce04:	20007b1c 	.word	0x20007b1c

0800ce08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d04f      	beq.n	800ceba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	425b      	negs	r3, r3
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4413      	add	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	4b25      	ldr	r3, [pc, #148]	@ (800cec4 <vPortFree+0xbc>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4013      	ands	r3, r2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10b      	bne.n	800ce4e <vPortFree+0x46>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	60fb      	str	r3, [r7, #12]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00b      	beq.n	800ce6e <vPortFree+0x66>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	60bb      	str	r3, [r7, #8]
}
 800ce68:	bf00      	nop
 800ce6a:	bf00      	nop
 800ce6c:	e7fd      	b.n	800ce6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	4b14      	ldr	r3, [pc, #80]	@ (800cec4 <vPortFree+0xbc>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4013      	ands	r3, r2
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d01e      	beq.n	800ceba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d11a      	bne.n	800ceba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	4b0e      	ldr	r3, [pc, #56]	@ (800cec4 <vPortFree+0xbc>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	43db      	mvns	r3, r3
 800ce8e:	401a      	ands	r2, r3
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce94:	f7fe fba6 	bl	800b5e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cec8 <vPortFree+0xc0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4413      	add	r3, r2
 800cea2:	4a09      	ldr	r2, [pc, #36]	@ (800cec8 <vPortFree+0xc0>)
 800cea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cea6:	6938      	ldr	r0, [r7, #16]
 800cea8:	f000 f874 	bl	800cf94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ceac:	4b07      	ldr	r3, [pc, #28]	@ (800cecc <vPortFree+0xc4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	4a06      	ldr	r2, [pc, #24]	@ (800cecc <vPortFree+0xc4>)
 800ceb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ceb6:	f7fe fba3 	bl	800b600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceba:	bf00      	nop
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20007b24 	.word	0x20007b24
 800cec8:	20007b14 	.word	0x20007b14
 800cecc:	20007b20 	.word	0x20007b20

0800ced0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ced6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ceda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cedc:	4b27      	ldr	r3, [pc, #156]	@ (800cf7c <prvHeapInit+0xac>)
 800cede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f003 0307 	and.w	r3, r3, #7
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00c      	beq.n	800cf04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3307      	adds	r3, #7
 800ceee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	4a1f      	ldr	r2, [pc, #124]	@ (800cf7c <prvHeapInit+0xac>)
 800cf00:	4413      	add	r3, r2
 800cf02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf08:	4a1d      	ldr	r2, [pc, #116]	@ (800cf80 <prvHeapInit+0xb0>)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf0e:	4b1c      	ldr	r3, [pc, #112]	@ (800cf80 <prvHeapInit+0xb0>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	4413      	add	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	1a9b      	subs	r3, r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f023 0307 	bic.w	r3, r3, #7
 800cf2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4a15      	ldr	r2, [pc, #84]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf32:	4b14      	ldr	r3, [pc, #80]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2200      	movs	r2, #0
 800cf38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf3a:	4b12      	ldr	r3, [pc, #72]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	1ad2      	subs	r2, r2, r3
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf50:	4b0c      	ldr	r3, [pc, #48]	@ (800cf84 <prvHeapInit+0xb4>)
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	4a0a      	ldr	r2, [pc, #40]	@ (800cf88 <prvHeapInit+0xb8>)
 800cf5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	4a09      	ldr	r2, [pc, #36]	@ (800cf8c <prvHeapInit+0xbc>)
 800cf66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf68:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <prvHeapInit+0xc0>)
 800cf6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf6e:	601a      	str	r2, [r3, #0]
}
 800cf70:	bf00      	nop
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	20003f08 	.word	0x20003f08
 800cf80:	20007b08 	.word	0x20007b08
 800cf84:	20007b10 	.word	0x20007b10
 800cf88:	20007b18 	.word	0x20007b18
 800cf8c:	20007b14 	.word	0x20007b14
 800cf90:	20007b24 	.word	0x20007b24

0800cf94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf9c:	4b28      	ldr	r3, [pc, #160]	@ (800d040 <prvInsertBlockIntoFreeList+0xac>)
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e002      	b.n	800cfa8 <prvInsertBlockIntoFreeList+0x14>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d8f7      	bhi.n	800cfa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d108      	bne.n	800cfd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	441a      	add	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	441a      	add	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d118      	bne.n	800d01c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	4b15      	ldr	r3, [pc, #84]	@ (800d044 <prvInsertBlockIntoFreeList+0xb0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d00d      	beq.n	800d012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	441a      	add	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	e008      	b.n	800d024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d012:	4b0c      	ldr	r3, [pc, #48]	@ (800d044 <prvInsertBlockIntoFreeList+0xb0>)
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	e003      	b.n	800d024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d002      	beq.n	800d032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d032:	bf00      	nop
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	20007b08 	.word	0x20007b08
 800d044:	20007b10 	.word	0x20007b10

0800d048 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d04c:	2201      	movs	r2, #1
 800d04e:	490e      	ldr	r1, [pc, #56]	@ (800d088 <MX_USB_HOST_Init+0x40>)
 800d050:	480e      	ldr	r0, [pc, #56]	@ (800d08c <MX_USB_HOST_Init+0x44>)
 800d052:	f7fa ff83 	bl	8007f5c <USBH_Init>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d05c:	f7f4 faaa 	bl	80015b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d060:	490b      	ldr	r1, [pc, #44]	@ (800d090 <MX_USB_HOST_Init+0x48>)
 800d062:	480a      	ldr	r0, [pc, #40]	@ (800d08c <MX_USB_HOST_Init+0x44>)
 800d064:	f7fb f849 	bl	80080fa <USBH_RegisterClass>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d06e:	f7f4 faa1 	bl	80015b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d072:	4806      	ldr	r0, [pc, #24]	@ (800d08c <MX_USB_HOST_Init+0x44>)
 800d074:	f7fb f8cd 	bl	8008212 <USBH_Start>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d07e:	f7f4 fa99 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d082:	bf00      	nop
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	0800d095 	.word	0x0800d095
 800d08c:	20007b28 	.word	0x20007b28
 800d090:	2000000c 	.word	0x2000000c

0800d094 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	d819      	bhi.n	800d0dc <USBH_UserProcess+0x48>
 800d0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b0 <USBH_UserProcess+0x1c>)
 800d0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ae:	bf00      	nop
 800d0b0:	0800d0dd 	.word	0x0800d0dd
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d0dd 	.word	0x0800d0dd
 800d0bc:	0800d0d5 	.word	0x0800d0d5
 800d0c0:	0800d0c5 	.word	0x0800d0c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d0c4:	4b09      	ldr	r3, [pc, #36]	@ (800d0ec <USBH_UserProcess+0x58>)
 800d0c6:	2203      	movs	r2, #3
 800d0c8:	701a      	strb	r2, [r3, #0]
  break;
 800d0ca:	e008      	b.n	800d0de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d0cc:	4b07      	ldr	r3, [pc, #28]	@ (800d0ec <USBH_UserProcess+0x58>)
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	701a      	strb	r2, [r3, #0]
  break;
 800d0d2:	e004      	b.n	800d0de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d0d4:	4b05      	ldr	r3, [pc, #20]	@ (800d0ec <USBH_UserProcess+0x58>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	701a      	strb	r2, [r3, #0]
  break;
 800d0da:	e000      	b.n	800d0de <USBH_UserProcess+0x4a>

  default:
  break;
 800d0dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d0de:	bf00      	nop
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20007f0c 	.word	0x20007f0c

0800d0f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08a      	sub	sp, #40	@ 0x28
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0f8:	f107 0314 	add.w	r3, r7, #20
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	601a      	str	r2, [r3, #0]
 800d100:	605a      	str	r2, [r3, #4]
 800d102:	609a      	str	r2, [r3, #8]
 800d104:	60da      	str	r2, [r3, #12]
 800d106:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d110:	d147      	bne.n	800d1a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d112:	2300      	movs	r3, #0
 800d114:	613b      	str	r3, [r7, #16]
 800d116:	4b25      	ldr	r3, [pc, #148]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d11a:	4a24      	ldr	r2, [pc, #144]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d11c:	f043 0301 	orr.w	r3, r3, #1
 800d120:	6313      	str	r3, [r2, #48]	@ 0x30
 800d122:	4b22      	ldr	r3, [pc, #136]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	613b      	str	r3, [r7, #16]
 800d12c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d12e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d134:	2300      	movs	r3, #0
 800d136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d138:	2300      	movs	r3, #0
 800d13a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d13c:	f107 0314 	add.w	r3, r7, #20
 800d140:	4619      	mov	r1, r3
 800d142:	481b      	ldr	r0, [pc, #108]	@ (800d1b0 <HAL_HCD_MspInit+0xc0>)
 800d144:	f7f4 fec2 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d148:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800d14c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d14e:	2302      	movs	r3, #2
 800d150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d152:	2300      	movs	r3, #0
 800d154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d156:	2300      	movs	r3, #0
 800d158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d15a:	230a      	movs	r3, #10
 800d15c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d15e:	f107 0314 	add.w	r3, r7, #20
 800d162:	4619      	mov	r1, r3
 800d164:	4812      	ldr	r0, [pc, #72]	@ (800d1b0 <HAL_HCD_MspInit+0xc0>)
 800d166:	f7f4 feb1 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d16a:	4b10      	ldr	r3, [pc, #64]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d16e:	4a0f      	ldr	r2, [pc, #60]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d174:	6353      	str	r3, [r2, #52]	@ 0x34
 800d176:	2300      	movs	r3, #0
 800d178:	60fb      	str	r3, [r7, #12]
 800d17a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d17e:	4a0b      	ldr	r2, [pc, #44]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d184:	6453      	str	r3, [r2, #68]	@ 0x44
 800d186:	4b09      	ldr	r3, [pc, #36]	@ (800d1ac <HAL_HCD_MspInit+0xbc>)
 800d188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d18a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d192:	2200      	movs	r2, #0
 800d194:	2105      	movs	r1, #5
 800d196:	2043      	movs	r0, #67	@ 0x43
 800d198:	f7f4 fe6e 	bl	8001e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d19c:	2043      	movs	r0, #67	@ 0x43
 800d19e:	f7f4 fe87 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1a2:	bf00      	nop
 800d1a4:	3728      	adds	r7, #40	@ 0x28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	40023800 	.word	0x40023800
 800d1b0:	40020000 	.word	0x40020000

0800d1b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fb fcd7 	bl	8008b76 <USBH_LL_IncTimer>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fb fd1b 	bl	8008c1a <USBH_LL_Connect>
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fb fd30 	bl	8008c60 <USBH_LL_Disconnect>
}
 800d200:	bf00      	nop
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
 800d214:	4613      	mov	r3, r2
 800d216:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fb fd67 	bl	8008cf2 <USBH_LL_NotifyURBChange>
#endif
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fb fcc5 	bl	8008bca <USBH_LL_PortEnabled>
}
 800d240:	bf00      	nop
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d256:	4618      	mov	r0, r3
 800d258:	f7fb fcd1 	bl	8008bfe <USBH_LL_PortDisabled>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d272:	2b01      	cmp	r3, #1
 800d274:	d12a      	bne.n	800d2cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d276:	4a18      	ldr	r2, [pc, #96]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a15      	ldr	r2, [pc, #84]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d282:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d286:	4b14      	ldr	r3, [pc, #80]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d28c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d28e:	4b12      	ldr	r3, [pc, #72]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d290:	2208      	movs	r2, #8
 800d292:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d294:	4b10      	ldr	r3, [pc, #64]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d296:	2201      	movs	r2, #1
 800d298:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d29a:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d2a0:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d2ac:	480a      	ldr	r0, [pc, #40]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d2ae:	f7f4 fff4 	bl	800229a <HAL_HCD_Init>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d001      	beq.n	800d2bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d2b8:	f7f4 f97c 	bl	80015b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d2bc:	4806      	ldr	r0, [pc, #24]	@ (800d2d8 <USBH_LL_Init+0x74>)
 800d2be:	f7f5 fc55 	bl	8002b6c <HAL_HCD_GetCurrentFrame>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7fb fc46 	bl	8008b58 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20007f10 	.word	0x20007f10

0800d2dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7f5 fbc2 	bl	8002a7c <HAL_HCD_Start>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f000 f95e 	bl	800d5c0 <USBH_Get_USB_Status>
 800d304:	4603      	mov	r3, r0
 800d306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d308:	7bbb      	ldrb	r3, [r7, #14]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b084      	sub	sp, #16
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f5 fbca 	bl	8002ac2 <HAL_HCD_Stop>
 800d32e:	4603      	mov	r3, r0
 800d330:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f943 	bl	800d5c0 <USBH_Get_USB_Status>
 800d33a:	4603      	mov	r3, r0
 800d33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d350:	2301      	movs	r3, #1
 800d352:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f5 fc14 	bl	8002b88 <HAL_HCD_GetCurrentSpeed>
 800d360:	4603      	mov	r3, r0
 800d362:	2b02      	cmp	r3, #2
 800d364:	d00c      	beq.n	800d380 <USBH_LL_GetSpeed+0x38>
 800d366:	2b02      	cmp	r3, #2
 800d368:	d80d      	bhi.n	800d386 <USBH_LL_GetSpeed+0x3e>
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <USBH_LL_GetSpeed+0x2c>
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d003      	beq.n	800d37a <USBH_LL_GetSpeed+0x32>
 800d372:	e008      	b.n	800d386 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d374:	2300      	movs	r3, #0
 800d376:	73fb      	strb	r3, [r7, #15]
    break;
 800d378:	e008      	b.n	800d38c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d37a:	2301      	movs	r3, #1
 800d37c:	73fb      	strb	r3, [r7, #15]
    break;
 800d37e:	e005      	b.n	800d38c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d380:	2302      	movs	r3, #2
 800d382:	73fb      	strb	r3, [r7, #15]
    break;
 800d384:	e002      	b.n	800d38c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d386:	2301      	movs	r3, #1
 800d388:	73fb      	strb	r3, [r7, #15]
    break;
 800d38a:	bf00      	nop
  }
  return  speed;
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7f5 fba5 	bl	8002afc <HAL_HCD_ResetPort>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 f901 	bl	800d5c0 <USBH_Get_USB_Status>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d3de:	78fa      	ldrb	r2, [r7, #3]
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f5 fbad 	bl	8002b42 <HAL_HCD_HC_GetXferCount>
 800d3e8:	4603      	mov	r3, r0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d3f2:	b590      	push	{r4, r7, lr}
 800d3f4:	b089      	sub	sp, #36	@ 0x24
 800d3f6:	af04      	add	r7, sp, #16
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	461a      	mov	r2, r3
 800d400:	4603      	mov	r3, r0
 800d402:	70fb      	strb	r3, [r7, #3]
 800d404:	460b      	mov	r3, r1
 800d406:	70bb      	strb	r3, [r7, #2]
 800d408:	4613      	mov	r3, r2
 800d40a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d41a:	787c      	ldrb	r4, [r7, #1]
 800d41c:	78ba      	ldrb	r2, [r7, #2]
 800d41e:	78f9      	ldrb	r1, [r7, #3]
 800d420:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d422:	9302      	str	r3, [sp, #8]
 800d424:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	4623      	mov	r3, r4
 800d432:	f7f4 ff99 	bl	8002368 <HAL_HCD_HC_Init>
 800d436:	4603      	mov	r3, r0
 800d438:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 f8bf 	bl	800d5c0 <USBH_Get_USB_Status>
 800d442:	4603      	mov	r3, r0
 800d444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d446:	7bbb      	ldrb	r3, [r7, #14]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd90      	pop	{r4, r7, pc}

0800d450 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	460b      	mov	r3, r1
 800d45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d46a:	78fa      	ldrb	r2, [r7, #3]
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f5 f832 	bl	80024d8 <HAL_HCD_HC_Halt>
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f000 f8a0 	bl	800d5c0 <USBH_Get_USB_Status>
 800d480:	4603      	mov	r3, r0
 800d482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d484:	7bbb      	ldrb	r3, [r7, #14]
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d48e:	b590      	push	{r4, r7, lr}
 800d490:	b089      	sub	sp, #36	@ 0x24
 800d492:	af04      	add	r7, sp, #16
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	4608      	mov	r0, r1
 800d498:	4611      	mov	r1, r2
 800d49a:	461a      	mov	r2, r3
 800d49c:	4603      	mov	r3, r0
 800d49e:	70fb      	strb	r3, [r7, #3]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70bb      	strb	r3, [r7, #2]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d4b6:	787c      	ldrb	r4, [r7, #1]
 800d4b8:	78ba      	ldrb	r2, [r7, #2]
 800d4ba:	78f9      	ldrb	r1, [r7, #3]
 800d4bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d4c0:	9303      	str	r3, [sp, #12]
 800d4c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4c4:	9302      	str	r3, [sp, #8]
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c8:	9301      	str	r3, [sp, #4]
 800d4ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	4623      	mov	r3, r4
 800d4d2:	f7f5 f825 	bl	8002520 <HAL_HCD_HC_SubmitRequest>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f86f 	bl	800d5c0 <USBH_Get_USB_Status>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3714      	adds	r7, #20
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd90      	pop	{r4, r7, pc}

0800d4f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d502:	78fa      	ldrb	r2, [r7, #3]
 800d504:	4611      	mov	r1, r2
 800d506:	4618      	mov	r0, r3
 800d508:	f7f5 fb06 	bl	8002b18 <HAL_HCD_HC_GetURBState>
 800d50c:	4603      	mov	r3, r0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	460b      	mov	r3, r1
 800d520:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d103      	bne.n	800d534 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d52c:	78fb      	ldrb	r3, [r7, #3]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f872 	bl	800d618 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d534:	20c8      	movs	r0, #200	@ 0xc8
 800d536:	f7f4 fbc3 	bl	8001cc0 <HAL_Delay>
  return USBH_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	70fb      	strb	r3, [r7, #3]
 800d550:	4613      	mov	r3, r2
 800d552:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d55a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d55c:	78fa      	ldrb	r2, [r7, #3]
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	011b      	lsls	r3, r3, #4
 800d564:	1a9b      	subs	r3, r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	440b      	add	r3, r1
 800d56a:	3317      	adds	r3, #23
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00a      	beq.n	800d588 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d572:	78fa      	ldrb	r2, [r7, #3]
 800d574:	68f9      	ldr	r1, [r7, #12]
 800d576:	4613      	mov	r3, r2
 800d578:	011b      	lsls	r3, r3, #4
 800d57a:	1a9b      	subs	r3, r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	440b      	add	r3, r1
 800d580:	333c      	adds	r3, #60	@ 0x3c
 800d582:	78ba      	ldrb	r2, [r7, #2]
 800d584:	701a      	strb	r2, [r3, #0]
 800d586:	e009      	b.n	800d59c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d588:	78fa      	ldrb	r2, [r7, #3]
 800d58a:	68f9      	ldr	r1, [r7, #12]
 800d58c:	4613      	mov	r3, r2
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	1a9b      	subs	r3, r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	440b      	add	r3, r1
 800d596:	333d      	adds	r3, #61	@ 0x3d
 800d598:	78ba      	ldrb	r2, [r7, #2]
 800d59a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7f4 fb84 	bl	8001cc0 <HAL_Delay>
}
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d817      	bhi.n	800d604 <USBH_Get_USB_Status+0x44>
 800d5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d5dc <USBH_Get_USB_Status+0x1c>)
 800d5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5da:	bf00      	nop
 800d5dc:	0800d5ed 	.word	0x0800d5ed
 800d5e0:	0800d5f3 	.word	0x0800d5f3
 800d5e4:	0800d5f9 	.word	0x0800d5f9
 800d5e8:	0800d5ff 	.word	0x0800d5ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f0:	e00b      	b.n	800d60a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5f6:	e008      	b.n	800d60a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fc:	e005      	b.n	800d60a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d5fe:	2302      	movs	r3, #2
 800d600:	73fb      	strb	r3, [r7, #15]
    break;
 800d602:	e002      	b.n	800d60a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d604:	2302      	movs	r3, #2
 800d606:	73fb      	strb	r3, [r7, #15]
    break;
 800d608:	bf00      	nop
  }
  return usb_status;
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]
 800d630:	e001      	b.n	800d636 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800d632:	2301      	movs	r3, #1
 800d634:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	461a      	mov	r2, r3
 800d63a:	2101      	movs	r1, #1
 800d63c:	4803      	ldr	r0, [pc, #12]	@ (800d64c <MX_DriverVbusFS+0x34>)
 800d63e:	f7f4 fdf9 	bl	8002234 <HAL_GPIO_WritePin>
}
 800d642:	bf00      	nop
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	40020800 	.word	0x40020800

0800d650 <wait_us>:
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	2300      	movs	r3, #0
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	2300      	movs	r3, #0
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	e005      	b.n	800d66e <wait_us+0x1e>
 800d662:	4b0b      	ldr	r3, [pc, #44]	@ (800d690 <wait_us+0x40>)
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	60bb      	str	r3, [r7, #8]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3301      	adds	r3, #1
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	4613      	mov	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	1a9b      	subs	r3, r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	461a      	mov	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d8f0      	bhi.n	800d662 <wait_us+0x12>
 800d680:	bf00      	nop
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	40020c00 	.word	0x40020c00

0800d694 <LCD_Output16BitWord>:
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	80fb      	strh	r3, [r7, #6]
 800d69e:	4b18      	ldr	r3, [pc, #96]	@ (800d700 <LCD_Output16BitWord+0x6c>)
 800d6a0:	695b      	ldr	r3, [r3, #20]
 800d6a2:	4a17      	ldr	r2, [pc, #92]	@ (800d700 <LCD_Output16BitWord+0x6c>)
 800d6a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6a8:	6153      	str	r3, [r2, #20]
 800d6aa:	4b15      	ldr	r3, [pc, #84]	@ (800d700 <LCD_Output16BitWord+0x6c>)
 800d6ac:	695a      	ldr	r2, [r3, #20]
 800d6ae:	88fb      	ldrh	r3, [r7, #6]
 800d6b0:	00d9      	lsls	r1, r3, #3
 800d6b2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800d6b6:	400b      	ands	r3, r1
 800d6b8:	4911      	ldr	r1, [pc, #68]	@ (800d700 <LCD_Output16BitWord+0x6c>)
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	614b      	str	r3, [r1, #20]
 800d6be:	4b11      	ldr	r3, [pc, #68]	@ (800d704 <LCD_Output16BitWord+0x70>)
 800d6c0:	695a      	ldr	r2, [r3, #20]
 800d6c2:	4910      	ldr	r1, [pc, #64]	@ (800d704 <LCD_Output16BitWord+0x70>)
 800d6c4:	f643 03fc 	movw	r3, #14588	@ 0x38fc
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	614b      	str	r3, [r1, #20]
 800d6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d704 <LCD_Output16BitWord+0x70>)
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	88fa      	ldrh	r2, [r7, #6]
 800d6d2:	1152      	asrs	r2, r2, #5
 800d6d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	1092      	asrs	r2, r2, #2
 800d6dc:	f002 0203 	and.w	r2, r2, #3
 800d6e0:	4311      	orrs	r1, r2
 800d6e2:	88fa      	ldrh	r2, [r7, #6]
 800d6e4:	0392      	lsls	r2, r2, #14
 800d6e6:	b292      	uxth	r2, r2
 800d6e8:	430a      	orrs	r2, r1
 800d6ea:	4611      	mov	r1, r2
 800d6ec:	4a05      	ldr	r2, [pc, #20]	@ (800d704 <LCD_Output16BitWord+0x70>)
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	6153      	str	r3, [r2, #20]
 800d6f2:	bf00      	nop
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	40021000 	.word	0x40021000
 800d704:	40020c00 	.word	0x40020c00

0800d708 <LCD_WriteWord>:
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	807b      	strh	r3, [r7, #2]
 800d714:	4b0e      	ldr	r3, [pc, #56]	@ (800d750 <LCD_WriteWord+0x48>)
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	4a0d      	ldr	r2, [pc, #52]	@ (800d750 <LCD_WriteWord+0x48>)
 800d71a:	f423 6308 	bic.w	r3, r3, #2176	@ 0x880
 800d71e:	6153      	str	r3, [r2, #20]
 800d720:	4a0c      	ldr	r2, [pc, #48]	@ (800d754 <LCD_WriteWord+0x4c>)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6193      	str	r3, [r2, #24]
 800d726:	887b      	ldrh	r3, [r7, #2]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ffb3 	bl	800d694 <LCD_Output16BitWord>
 800d72e:	4b08      	ldr	r3, [pc, #32]	@ (800d750 <LCD_WriteWord+0x48>)
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	4a07      	ldr	r2, [pc, #28]	@ (800d750 <LCD_WriteWord+0x48>)
 800d734:	f023 0320 	bic.w	r3, r3, #32
 800d738:	6153      	str	r3, [r2, #20]
 800d73a:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <LCD_WriteWord+0x48>)
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	4a04      	ldr	r2, [pc, #16]	@ (800d750 <LCD_WriteWord+0x48>)
 800d740:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800d744:	6153      	str	r3, [r2, #20]
 800d746:	bf00      	nop
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	40020c00 	.word	0x40020c00
 800d754:	40021000 	.word	0x40021000

0800d758 <LCD_WriteReg>:
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	4603      	mov	r3, r0
 800d760:	460a      	mov	r2, r1
 800d762:	80fb      	strh	r3, [r7, #6]
 800d764:	4613      	mov	r3, r2
 800d766:	80bb      	strh	r3, [r7, #4]
 800d768:	88fb      	ldrh	r3, [r7, #6]
 800d76a:	4619      	mov	r1, r3
 800d76c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d770:	f7ff ffca 	bl	800d708 <LCD_WriteWord>
 800d774:	88bb      	ldrh	r3, [r7, #4]
 800d776:	4619      	mov	r1, r3
 800d778:	2008      	movs	r0, #8
 800d77a:	f7ff ffc5 	bl	800d708 <LCD_WriteWord>
 800d77e:	bf00      	nop
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <LCD_Init>:
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4b57      	ldr	r3, [pc, #348]	@ (800d8ec <LCD_Init+0x164>)
 800d790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d792:	4a56      	ldr	r2, [pc, #344]	@ (800d8ec <LCD_Init+0x164>)
 800d794:	f043 031a 	orr.w	r3, r3, #26
 800d798:	6313      	str	r3, [r2, #48]	@ 0x30
 800d79a:	4b55      	ldr	r3, [pc, #340]	@ (800d8f0 <LCD_Init+0x168>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	4954      	ldr	r1, [pc, #336]	@ (800d8f0 <LCD_Init+0x168>)
 800d7a0:	4b54      	ldr	r3, [pc, #336]	@ (800d8f4 <LCD_Init+0x16c>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	600b      	str	r3, [r1, #0]
 800d7a6:	4b54      	ldr	r3, [pc, #336]	@ (800d8f8 <LCD_Init+0x170>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4953      	ldr	r1, [pc, #332]	@ (800d8f8 <LCD_Init+0x170>)
 800d7ac:	4b53      	ldr	r3, [pc, #332]	@ (800d8fc <LCD_Init+0x174>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	600b      	str	r3, [r1, #0]
 800d7b2:	4b53      	ldr	r3, [pc, #332]	@ (800d900 <LCD_Init+0x178>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a52      	ldr	r2, [pc, #328]	@ (800d900 <LCD_Init+0x178>)
 800d7b8:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	4b4c      	ldr	r3, [pc, #304]	@ (800d8f0 <LCD_Init+0x168>)
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	4a4b      	ldr	r2, [pc, #300]	@ (800d8f0 <LCD_Init+0x168>)
 800d7c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800d7c8:	6153      	str	r3, [r2, #20]
 800d7ca:	4b49      	ldr	r3, [pc, #292]	@ (800d8f0 <LCD_Init+0x168>)
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	4a48      	ldr	r2, [pc, #288]	@ (800d8f0 <LCD_Init+0x168>)
 800d7d0:	f023 0308 	bic.w	r3, r3, #8
 800d7d4:	6153      	str	r3, [r2, #20]
 800d7d6:	201e      	movs	r0, #30
 800d7d8:	f7ff ff3a 	bl	800d650 <wait_us>
 800d7dc:	4b44      	ldr	r3, [pc, #272]	@ (800d8f0 <LCD_Init+0x168>)
 800d7de:	695b      	ldr	r3, [r3, #20]
 800d7e0:	4a43      	ldr	r2, [pc, #268]	@ (800d8f0 <LCD_Init+0x168>)
 800d7e2:	f043 0308 	orr.w	r3, r3, #8
 800d7e6:	6153      	str	r3, [r2, #20]
 800d7e8:	2064      	movs	r0, #100	@ 0x64
 800d7ea:	f7ff ff31 	bl	800d650 <wait_us>
 800d7ee:	4b40      	ldr	r3, [pc, #256]	@ (800d8f0 <LCD_Init+0x168>)
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	4a3f      	ldr	r2, [pc, #252]	@ (800d8f0 <LCD_Init+0x168>)
 800d7f4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800d7f8:	6153      	str	r3, [r2, #20]
 800d7fa:	2101      	movs	r1, #1
 800d7fc:	2010      	movs	r0, #16
 800d7fe:	f7ff ffab 	bl	800d758 <LCD_WriteReg>
 800d802:	21b2      	movs	r1, #178	@ 0xb2
 800d804:	201e      	movs	r0, #30
 800d806:	f7ff ffa7 	bl	800d758 <LCD_WriteReg>
 800d80a:	2106      	movs	r1, #6
 800d80c:	2028      	movs	r0, #40	@ 0x28
 800d80e:	f7ff ffa3 	bl	800d758 <LCD_WriteReg>
 800d812:	2101      	movs	r1, #1
 800d814:	2000      	movs	r0, #0
 800d816:	f7ff ff9f 	bl	800d758 <LCD_WriteReg>
 800d81a:	f247 21ef 	movw	r1, #29423	@ 0x72ef
 800d81e:	2001      	movs	r0, #1
 800d820:	f7ff ff9a 	bl	800d758 <LCD_WriteReg>
 800d824:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d828:	2002      	movs	r0, #2
 800d82a:	f7ff ff95 	bl	800d758 <LCD_WriteReg>
 800d82e:	2100      	movs	r1, #0
 800d830:	2010      	movs	r0, #16
 800d832:	f7ff ff91 	bl	800d758 <LCD_WriteReg>
 800d836:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d83a:	f7ff ff09 	bl	800d650 <wait_us>
 800d83e:	f646 0170 	movw	r1, #26736	@ 0x6870
 800d842:	2011      	movs	r0, #17
 800d844:	f7ff ff88 	bl	800d758 <LCD_WriteReg>
 800d848:	f640 1199 	movw	r1, #2457	@ 0x999
 800d84c:	2012      	movs	r0, #18
 800d84e:	f7ff ff83 	bl	800d758 <LCD_WriteReg>
 800d852:	f44f 5160 	mov.w	r1, #14336	@ 0x3800
 800d856:	2026      	movs	r0, #38	@ 0x26
 800d858:	f7ff ff7e 	bl	800d758 <LCD_WriteReg>
 800d85c:	2133      	movs	r1, #51	@ 0x33
 800d85e:	2007      	movs	r0, #7
 800d860:	f7ff ff7a 	bl	800d758 <LCD_WriteReg>
 800d864:	2105      	movs	r1, #5
 800d866:	200c      	movs	r0, #12
 800d868:	f7ff ff76 	bl	800d758 <LCD_WriteReg>
 800d86c:	210a      	movs	r1, #10
 800d86e:	200d      	movs	r0, #13
 800d870:	f7ff ff72 	bl	800d758 <LCD_WriteReg>
 800d874:	f44f 5138 	mov.w	r1, #11776	@ 0x2e00
 800d878:	200e      	movs	r0, #14
 800d87a:	f7ff ff6d 	bl	800d758 <LCD_WriteReg>
 800d87e:	f44f 416f 	mov.w	r1, #61184	@ 0xef00
 800d882:	2044      	movs	r0, #68	@ 0x44
 800d884:	f7ff ff68 	bl	800d758 <LCD_WriteReg>
 800d888:	2100      	movs	r1, #0
 800d88a:	2045      	movs	r0, #69	@ 0x45
 800d88c:	f7ff ff64 	bl	800d758 <LCD_WriteReg>
 800d890:	f240 113f 	movw	r1, #319	@ 0x13f
 800d894:	2046      	movs	r0, #70	@ 0x46
 800d896:	f7ff ff5f 	bl	800d758 <LCD_WriteReg>
 800d89a:	2100      	movs	r1, #0
 800d89c:	204e      	movs	r0, #78	@ 0x4e
 800d89e:	f7ff ff5b 	bl	800d758 <LCD_WriteReg>
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	204f      	movs	r0, #79	@ 0x4f
 800d8a6:	f7ff ff57 	bl	800d758 <LCD_WriteReg>
 800d8aa:	4b11      	ldr	r3, [pc, #68]	@ (800d8f0 <LCD_Init+0x168>)
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4a10      	ldr	r2, [pc, #64]	@ (800d8f0 <LCD_Init+0x168>)
 800d8b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d8b4:	6153      	str	r3, [r2, #20]
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	204e      	movs	r0, #78	@ 0x4e
 800d8ba:	f7ff ff4d 	bl	800d758 <LCD_WriteReg>
 800d8be:	2101      	movs	r1, #1
 800d8c0:	204f      	movs	r0, #79	@ 0x4f
 800d8c2:	f7ff ff49 	bl	800d758 <LCD_WriteReg>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	607b      	str	r3, [r7, #4]
 800d8ca:	e007      	b.n	800d8dc <LCD_Init+0x154>
 800d8cc:	f44f 4143 	mov.w	r1, #49920	@ 0xc300
 800d8d0:	2022      	movs	r0, #34	@ 0x22
 800d8d2:	f7ff ff41 	bl	800d758 <LCD_WriteReg>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	607b      	str	r3, [r7, #4]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b63      	cmp	r3, #99	@ 0x63
 800d8e0:	ddf4      	ble.n	800d8cc <LCD_Init+0x144>
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	40023800 	.word	0x40023800
 800d8f0:	40020c00 	.word	0x40020c00
 800d8f4:	54554545 	.word	0x54554545
 800d8f8:	40021000 	.word	0x40021000
 800d8fc:	55554040 	.word	0x55554040
 800d900:	40020400 	.word	0x40020400

0800d904 <LCD_SetCursor>:
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	460a      	mov	r2, r1
 800d90e:	80fb      	strh	r3, [r7, #6]
 800d910:	4613      	mov	r3, r2
 800d912:	80bb      	strh	r3, [r7, #4]
 800d914:	88fb      	ldrh	r3, [r7, #6]
 800d916:	4619      	mov	r1, r3
 800d918:	204e      	movs	r0, #78	@ 0x4e
 800d91a:	f7ff ff1d 	bl	800d758 <LCD_WriteReg>
 800d91e:	88bb      	ldrh	r3, [r7, #4]
 800d920:	4619      	mov	r1, r3
 800d922:	204f      	movs	r0, #79	@ 0x4f
 800d924:	f7ff ff18 	bl	800d758 <LCD_WriteReg>
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <LCD_DrawPixel>:
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	80fb      	strh	r3, [r7, #6]
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	4619      	mov	r1, r3
 800d93e:	2022      	movs	r0, #34	@ 0x22
 800d940:	f7ff ff0a 	bl	800d758 <LCD_WriteReg>
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <LCD_ClearDisplay>:
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	80fb      	strh	r3, [r7, #6]
 800d956:	2300      	movs	r3, #0
 800d958:	60fb      	str	r3, [r7, #12]
 800d95a:	e006      	b.n	800d96a <LCD_ClearDisplay+0x1e>
 800d95c:	88fb      	ldrh	r3, [r7, #6]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff ffe6 	bl	800d930 <LCD_DrawPixel>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3301      	adds	r3, #1
 800d968:	60fb      	str	r3, [r7, #12]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800d970:	dbf4      	blt.n	800d95c <LCD_ClearDisplay+0x10>
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <LCD_WriteLetter>:
 800d97c:	b590      	push	{r4, r7, lr}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	4604      	mov	r4, r0
 800d984:	4608      	mov	r0, r1
 800d986:	4611      	mov	r1, r2
 800d988:	461a      	mov	r2, r3
 800d98a:	4623      	mov	r3, r4
 800d98c:	80fb      	strh	r3, [r7, #6]
 800d98e:	4603      	mov	r3, r0
 800d990:	80bb      	strh	r3, [r7, #4]
 800d992:	460b      	mov	r3, r1
 800d994:	807b      	strh	r3, [r7, #2]
 800d996:	4613      	mov	r3, r2
 800d998:	803b      	strh	r3, [r7, #0]
 800d99a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d99e:	4613      	mov	r3, r2
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	4413      	add	r3, r2
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	613b      	str	r3, [r7, #16]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]
 800d9ac:	e051      	b.n	800da52 <LCD_WriteLetter+0xd6>
 800d9ae:	4b2d      	ldr	r3, [pc, #180]	@ (800da64 <LCD_WriteLetter+0xe8>)
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	021b      	lsls	r3, r3, #8
 800d9ba:	b21a      	sxth	r2, r3
 800d9bc:	4b29      	ldr	r3, [pc, #164]	@ (800da64 <LCD_WriteLetter+0xe8>)
 800d9be:	6819      	ldr	r1, [r3, #0]
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	440b      	add	r3, r1
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	b21b      	sxth	r3, r3
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	817b      	strh	r3, [r7, #10]
 800d9d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9d4:	813b      	strh	r3, [r7, #8]
 800d9d6:	88ba      	ldrh	r2, [r7, #4]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	2bef      	cmp	r3, #239	@ 0xef
 800d9de:	dc34      	bgt.n	800da4a <LCD_WriteLetter+0xce>
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	88bb      	ldrh	r3, [r7, #4]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	88fb      	ldrh	r3, [r7, #6]
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff ff88 	bl	800d904 <LCD_SetCursor>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	81fb      	strh	r3, [r7, #14]
 800d9f8:	e020      	b.n	800da3c <LCD_WriteLetter+0xc0>
 800d9fa:	88fa      	ldrh	r2, [r7, #6]
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
 800d9fe:	4413      	add	r3, r2
 800da00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800da04:	da16      	bge.n	800da34 <LCD_WriteLetter+0xb8>
 800da06:	89fb      	ldrh	r3, [r7, #14]
 800da08:	f1c3 030f 	rsb	r3, r3, #15
 800da0c:	2201      	movs	r2, #1
 800da0e:	fa02 f303 	lsl.w	r3, r2, r3
 800da12:	813b      	strh	r3, [r7, #8]
 800da14:	897a      	ldrh	r2, [r7, #10]
 800da16:	893b      	ldrh	r3, [r7, #8]
 800da18:	4013      	ands	r3, r2
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d102      	bne.n	800da26 <LCD_WriteLetter+0xaa>
 800da20:	883b      	ldrh	r3, [r7, #0]
 800da22:	81bb      	strh	r3, [r7, #12]
 800da24:	e001      	b.n	800da2a <LCD_WriteLetter+0xae>
 800da26:	887b      	ldrh	r3, [r7, #2]
 800da28:	81bb      	strh	r3, [r7, #12]
 800da2a:	89bb      	ldrh	r3, [r7, #12]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff ff7f 	bl	800d930 <LCD_DrawPixel>
 800da32:	e000      	b.n	800da36 <LCD_WriteLetter+0xba>
 800da34:	bf00      	nop
 800da36:	89fb      	ldrh	r3, [r7, #14]
 800da38:	3301      	adds	r3, #1
 800da3a:	81fb      	strh	r3, [r7, #14]
 800da3c:	89fb      	ldrh	r3, [r7, #14]
 800da3e:	2b09      	cmp	r3, #9
 800da40:	d9db      	bls.n	800d9fa <LCD_WriteLetter+0x7e>
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3302      	adds	r3, #2
 800da46:	613b      	str	r3, [r7, #16]
 800da48:	e000      	b.n	800da4c <LCD_WriteLetter+0xd0>
 800da4a:	bf00      	nop
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	3301      	adds	r3, #1
 800da50:	617b      	str	r3, [r7, #20]
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	2b13      	cmp	r3, #19
 800da56:	ddaa      	ble.n	800d9ae <LCD_WriteLetter+0x32>
 800da58:	bf00      	nop
 800da5a:	bf00      	nop
 800da5c:	371c      	adds	r7, #28
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd90      	pop	{r4, r7, pc}
 800da62:	bf00      	nop
 800da64:	20002830 	.word	0x20002830

0800da68 <LCD_WriteString>:
 800da68:	b590      	push	{r4, r7, lr}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af02      	add	r7, sp, #8
 800da6e:	4604      	mov	r4, r0
 800da70:	4608      	mov	r0, r1
 800da72:	4611      	mov	r1, r2
 800da74:	461a      	mov	r2, r3
 800da76:	4623      	mov	r3, r4
 800da78:	80fb      	strh	r3, [r7, #6]
 800da7a:	4603      	mov	r3, r0
 800da7c:	80bb      	strh	r3, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	807b      	strh	r3, [r7, #2]
 800da82:	4613      	mov	r3, r2
 800da84:	803b      	strh	r3, [r7, #0]
 800da86:	e00f      	b.n	800daa8 <LCD_WriteString+0x40>
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	883c      	ldrh	r4, [r7, #0]
 800da8e:	887a      	ldrh	r2, [r7, #2]
 800da90:	88b9      	ldrh	r1, [r7, #4]
 800da92:	88f8      	ldrh	r0, [r7, #6]
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	4623      	mov	r3, r4
 800da98:	f7ff ff70 	bl	800d97c <LCD_WriteLetter>
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	3301      	adds	r3, #1
 800daa0:	61bb      	str	r3, [r7, #24]
 800daa2:	88fb      	ldrh	r3, [r7, #6]
 800daa4:	330a      	adds	r3, #10
 800daa6:	80fb      	strh	r3, [r7, #6]
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d003      	beq.n	800dab8 <LCD_WriteString+0x50>
 800dab0:	88fb      	ldrh	r3, [r7, #6]
 800dab2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800dab6:	d3e7      	bcc.n	800da88 <LCD_WriteString+0x20>
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd90      	pop	{r4, r7, pc}

0800dac0 <malloc>:
 800dac0:	4b02      	ldr	r3, [pc, #8]	@ (800dacc <malloc+0xc>)
 800dac2:	4601      	mov	r1, r0
 800dac4:	6818      	ldr	r0, [r3, #0]
 800dac6:	f000 b82d 	b.w	800db24 <_malloc_r>
 800daca:	bf00      	nop
 800dacc:	20002840 	.word	0x20002840

0800dad0 <free>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	@ (800dadc <free+0xc>)
 800dad2:	4601      	mov	r1, r0
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	f001 bd6f 	b.w	800f5b8 <_free_r>
 800dada:	bf00      	nop
 800dadc:	20002840 	.word	0x20002840

0800dae0 <sbrk_aligned>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	4e0f      	ldr	r6, [pc, #60]	@ (800db20 <sbrk_aligned+0x40>)
 800dae4:	460c      	mov	r4, r1
 800dae6:	6831      	ldr	r1, [r6, #0]
 800dae8:	4605      	mov	r5, r0
 800daea:	b911      	cbnz	r1, 800daf2 <sbrk_aligned+0x12>
 800daec:	f000 feba 	bl	800e864 <_sbrk_r>
 800daf0:	6030      	str	r0, [r6, #0]
 800daf2:	4621      	mov	r1, r4
 800daf4:	4628      	mov	r0, r5
 800daf6:	f000 feb5 	bl	800e864 <_sbrk_r>
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	d103      	bne.n	800db06 <sbrk_aligned+0x26>
 800dafe:	f04f 34ff 	mov.w	r4, #4294967295
 800db02:	4620      	mov	r0, r4
 800db04:	bd70      	pop	{r4, r5, r6, pc}
 800db06:	1cc4      	adds	r4, r0, #3
 800db08:	f024 0403 	bic.w	r4, r4, #3
 800db0c:	42a0      	cmp	r0, r4
 800db0e:	d0f8      	beq.n	800db02 <sbrk_aligned+0x22>
 800db10:	1a21      	subs	r1, r4, r0
 800db12:	4628      	mov	r0, r5
 800db14:	f000 fea6 	bl	800e864 <_sbrk_r>
 800db18:	3001      	adds	r0, #1
 800db1a:	d1f2      	bne.n	800db02 <sbrk_aligned+0x22>
 800db1c:	e7ef      	b.n	800dafe <sbrk_aligned+0x1e>
 800db1e:	bf00      	nop
 800db20:	200082f0 	.word	0x200082f0

0800db24 <_malloc_r>:
 800db24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db28:	1ccd      	adds	r5, r1, #3
 800db2a:	f025 0503 	bic.w	r5, r5, #3
 800db2e:	3508      	adds	r5, #8
 800db30:	2d0c      	cmp	r5, #12
 800db32:	bf38      	it	cc
 800db34:	250c      	movcc	r5, #12
 800db36:	2d00      	cmp	r5, #0
 800db38:	4606      	mov	r6, r0
 800db3a:	db01      	blt.n	800db40 <_malloc_r+0x1c>
 800db3c:	42a9      	cmp	r1, r5
 800db3e:	d904      	bls.n	800db4a <_malloc_r+0x26>
 800db40:	230c      	movs	r3, #12
 800db42:	6033      	str	r3, [r6, #0]
 800db44:	2000      	movs	r0, #0
 800db46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc20 <_malloc_r+0xfc>
 800db4e:	f000 f869 	bl	800dc24 <__malloc_lock>
 800db52:	f8d8 3000 	ldr.w	r3, [r8]
 800db56:	461c      	mov	r4, r3
 800db58:	bb44      	cbnz	r4, 800dbac <_malloc_r+0x88>
 800db5a:	4629      	mov	r1, r5
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7ff ffbf 	bl	800dae0 <sbrk_aligned>
 800db62:	1c43      	adds	r3, r0, #1
 800db64:	4604      	mov	r4, r0
 800db66:	d158      	bne.n	800dc1a <_malloc_r+0xf6>
 800db68:	f8d8 4000 	ldr.w	r4, [r8]
 800db6c:	4627      	mov	r7, r4
 800db6e:	2f00      	cmp	r7, #0
 800db70:	d143      	bne.n	800dbfa <_malloc_r+0xd6>
 800db72:	2c00      	cmp	r4, #0
 800db74:	d04b      	beq.n	800dc0e <_malloc_r+0xea>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	4639      	mov	r1, r7
 800db7a:	4630      	mov	r0, r6
 800db7c:	eb04 0903 	add.w	r9, r4, r3
 800db80:	f000 fe70 	bl	800e864 <_sbrk_r>
 800db84:	4581      	cmp	r9, r0
 800db86:	d142      	bne.n	800dc0e <_malloc_r+0xea>
 800db88:	6821      	ldr	r1, [r4, #0]
 800db8a:	1a6d      	subs	r5, r5, r1
 800db8c:	4629      	mov	r1, r5
 800db8e:	4630      	mov	r0, r6
 800db90:	f7ff ffa6 	bl	800dae0 <sbrk_aligned>
 800db94:	3001      	adds	r0, #1
 800db96:	d03a      	beq.n	800dc0e <_malloc_r+0xea>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	442b      	add	r3, r5
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	f8d8 3000 	ldr.w	r3, [r8]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	bb62      	cbnz	r2, 800dc00 <_malloc_r+0xdc>
 800dba6:	f8c8 7000 	str.w	r7, [r8]
 800dbaa:	e00f      	b.n	800dbcc <_malloc_r+0xa8>
 800dbac:	6822      	ldr	r2, [r4, #0]
 800dbae:	1b52      	subs	r2, r2, r5
 800dbb0:	d420      	bmi.n	800dbf4 <_malloc_r+0xd0>
 800dbb2:	2a0b      	cmp	r2, #11
 800dbb4:	d917      	bls.n	800dbe6 <_malloc_r+0xc2>
 800dbb6:	1961      	adds	r1, r4, r5
 800dbb8:	42a3      	cmp	r3, r4
 800dbba:	6025      	str	r5, [r4, #0]
 800dbbc:	bf18      	it	ne
 800dbbe:	6059      	strne	r1, [r3, #4]
 800dbc0:	6863      	ldr	r3, [r4, #4]
 800dbc2:	bf08      	it	eq
 800dbc4:	f8c8 1000 	streq.w	r1, [r8]
 800dbc8:	5162      	str	r2, [r4, r5]
 800dbca:	604b      	str	r3, [r1, #4]
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f82f 	bl	800dc30 <__malloc_unlock>
 800dbd2:	f104 000b 	add.w	r0, r4, #11
 800dbd6:	1d23      	adds	r3, r4, #4
 800dbd8:	f020 0007 	bic.w	r0, r0, #7
 800dbdc:	1ac2      	subs	r2, r0, r3
 800dbde:	bf1c      	itt	ne
 800dbe0:	1a1b      	subne	r3, r3, r0
 800dbe2:	50a3      	strne	r3, [r4, r2]
 800dbe4:	e7af      	b.n	800db46 <_malloc_r+0x22>
 800dbe6:	6862      	ldr	r2, [r4, #4]
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	bf0c      	ite	eq
 800dbec:	f8c8 2000 	streq.w	r2, [r8]
 800dbf0:	605a      	strne	r2, [r3, #4]
 800dbf2:	e7eb      	b.n	800dbcc <_malloc_r+0xa8>
 800dbf4:	4623      	mov	r3, r4
 800dbf6:	6864      	ldr	r4, [r4, #4]
 800dbf8:	e7ae      	b.n	800db58 <_malloc_r+0x34>
 800dbfa:	463c      	mov	r4, r7
 800dbfc:	687f      	ldr	r7, [r7, #4]
 800dbfe:	e7b6      	b.n	800db6e <_malloc_r+0x4a>
 800dc00:	461a      	mov	r2, r3
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	42a3      	cmp	r3, r4
 800dc06:	d1fb      	bne.n	800dc00 <_malloc_r+0xdc>
 800dc08:	2300      	movs	r3, #0
 800dc0a:	6053      	str	r3, [r2, #4]
 800dc0c:	e7de      	b.n	800dbcc <_malloc_r+0xa8>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	6033      	str	r3, [r6, #0]
 800dc12:	4630      	mov	r0, r6
 800dc14:	f000 f80c 	bl	800dc30 <__malloc_unlock>
 800dc18:	e794      	b.n	800db44 <_malloc_r+0x20>
 800dc1a:	6005      	str	r5, [r0, #0]
 800dc1c:	e7d6      	b.n	800dbcc <_malloc_r+0xa8>
 800dc1e:	bf00      	nop
 800dc20:	200082f4 	.word	0x200082f4

0800dc24 <__malloc_lock>:
 800dc24:	4801      	ldr	r0, [pc, #4]	@ (800dc2c <__malloc_lock+0x8>)
 800dc26:	f000 be6a 	b.w	800e8fe <__retarget_lock_acquire_recursive>
 800dc2a:	bf00      	nop
 800dc2c:	20008438 	.word	0x20008438

0800dc30 <__malloc_unlock>:
 800dc30:	4801      	ldr	r0, [pc, #4]	@ (800dc38 <__malloc_unlock+0x8>)
 800dc32:	f000 be65 	b.w	800e900 <__retarget_lock_release_recursive>
 800dc36:	bf00      	nop
 800dc38:	20008438 	.word	0x20008438

0800dc3c <__cvt>:
 800dc3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc40:	ec57 6b10 	vmov	r6, r7, d0
 800dc44:	2f00      	cmp	r7, #0
 800dc46:	460c      	mov	r4, r1
 800dc48:	4619      	mov	r1, r3
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	bfbb      	ittet	lt
 800dc4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dc52:	461f      	movlt	r7, r3
 800dc54:	2300      	movge	r3, #0
 800dc56:	232d      	movlt	r3, #45	@ 0x2d
 800dc58:	700b      	strb	r3, [r1, #0]
 800dc5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dc60:	4691      	mov	r9, r2
 800dc62:	f023 0820 	bic.w	r8, r3, #32
 800dc66:	bfbc      	itt	lt
 800dc68:	4632      	movlt	r2, r6
 800dc6a:	4616      	movlt	r6, r2
 800dc6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc70:	d005      	beq.n	800dc7e <__cvt+0x42>
 800dc72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dc76:	d100      	bne.n	800dc7a <__cvt+0x3e>
 800dc78:	3401      	adds	r4, #1
 800dc7a:	2102      	movs	r1, #2
 800dc7c:	e000      	b.n	800dc80 <__cvt+0x44>
 800dc7e:	2103      	movs	r1, #3
 800dc80:	ab03      	add	r3, sp, #12
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	ab02      	add	r3, sp, #8
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	ec47 6b10 	vmov	d0, r6, r7
 800dc8c:	4653      	mov	r3, sl
 800dc8e:	4622      	mov	r2, r4
 800dc90:	f000 fece 	bl	800ea30 <_dtoa_r>
 800dc94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dc98:	4605      	mov	r5, r0
 800dc9a:	d119      	bne.n	800dcd0 <__cvt+0x94>
 800dc9c:	f019 0f01 	tst.w	r9, #1
 800dca0:	d00e      	beq.n	800dcc0 <__cvt+0x84>
 800dca2:	eb00 0904 	add.w	r9, r0, r4
 800dca6:	2200      	movs	r2, #0
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb2:	b108      	cbz	r0, 800dcb8 <__cvt+0x7c>
 800dcb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcb8:	2230      	movs	r2, #48	@ 0x30
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	454b      	cmp	r3, r9
 800dcbe:	d31e      	bcc.n	800dcfe <__cvt+0xc2>
 800dcc0:	9b03      	ldr	r3, [sp, #12]
 800dcc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcc4:	1b5b      	subs	r3, r3, r5
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	6013      	str	r3, [r2, #0]
 800dcca:	b004      	add	sp, #16
 800dccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dcd4:	eb00 0904 	add.w	r9, r0, r4
 800dcd8:	d1e5      	bne.n	800dca6 <__cvt+0x6a>
 800dcda:	7803      	ldrb	r3, [r0, #0]
 800dcdc:	2b30      	cmp	r3, #48	@ 0x30
 800dcde:	d10a      	bne.n	800dcf6 <__cvt+0xba>
 800dce0:	2200      	movs	r2, #0
 800dce2:	2300      	movs	r3, #0
 800dce4:	4630      	mov	r0, r6
 800dce6:	4639      	mov	r1, r7
 800dce8:	f7f2 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcec:	b918      	cbnz	r0, 800dcf6 <__cvt+0xba>
 800dcee:	f1c4 0401 	rsb	r4, r4, #1
 800dcf2:	f8ca 4000 	str.w	r4, [sl]
 800dcf6:	f8da 3000 	ldr.w	r3, [sl]
 800dcfa:	4499      	add	r9, r3
 800dcfc:	e7d3      	b.n	800dca6 <__cvt+0x6a>
 800dcfe:	1c59      	adds	r1, r3, #1
 800dd00:	9103      	str	r1, [sp, #12]
 800dd02:	701a      	strb	r2, [r3, #0]
 800dd04:	e7d9      	b.n	800dcba <__cvt+0x7e>

0800dd06 <__exponent>:
 800dd06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd08:	2900      	cmp	r1, #0
 800dd0a:	bfba      	itte	lt
 800dd0c:	4249      	neglt	r1, r1
 800dd0e:	232d      	movlt	r3, #45	@ 0x2d
 800dd10:	232b      	movge	r3, #43	@ 0x2b
 800dd12:	2909      	cmp	r1, #9
 800dd14:	7002      	strb	r2, [r0, #0]
 800dd16:	7043      	strb	r3, [r0, #1]
 800dd18:	dd29      	ble.n	800dd6e <__exponent+0x68>
 800dd1a:	f10d 0307 	add.w	r3, sp, #7
 800dd1e:	461d      	mov	r5, r3
 800dd20:	270a      	movs	r7, #10
 800dd22:	461a      	mov	r2, r3
 800dd24:	fbb1 f6f7 	udiv	r6, r1, r7
 800dd28:	fb07 1416 	mls	r4, r7, r6, r1
 800dd2c:	3430      	adds	r4, #48	@ 0x30
 800dd2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dd32:	460c      	mov	r4, r1
 800dd34:	2c63      	cmp	r4, #99	@ 0x63
 800dd36:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	dcf1      	bgt.n	800dd22 <__exponent+0x1c>
 800dd3e:	3130      	adds	r1, #48	@ 0x30
 800dd40:	1e94      	subs	r4, r2, #2
 800dd42:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd46:	1c41      	adds	r1, r0, #1
 800dd48:	4623      	mov	r3, r4
 800dd4a:	42ab      	cmp	r3, r5
 800dd4c:	d30a      	bcc.n	800dd64 <__exponent+0x5e>
 800dd4e:	f10d 0309 	add.w	r3, sp, #9
 800dd52:	1a9b      	subs	r3, r3, r2
 800dd54:	42ac      	cmp	r4, r5
 800dd56:	bf88      	it	hi
 800dd58:	2300      	movhi	r3, #0
 800dd5a:	3302      	adds	r3, #2
 800dd5c:	4403      	add	r3, r0
 800dd5e:	1a18      	subs	r0, r3, r0
 800dd60:	b003      	add	sp, #12
 800dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd64:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd68:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd6c:	e7ed      	b.n	800dd4a <__exponent+0x44>
 800dd6e:	2330      	movs	r3, #48	@ 0x30
 800dd70:	3130      	adds	r1, #48	@ 0x30
 800dd72:	7083      	strb	r3, [r0, #2]
 800dd74:	70c1      	strb	r1, [r0, #3]
 800dd76:	1d03      	adds	r3, r0, #4
 800dd78:	e7f1      	b.n	800dd5e <__exponent+0x58>
	...

0800dd7c <_printf_float>:
 800dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	b08d      	sub	sp, #52	@ 0x34
 800dd82:	460c      	mov	r4, r1
 800dd84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dd88:	4616      	mov	r6, r2
 800dd8a:	461f      	mov	r7, r3
 800dd8c:	4605      	mov	r5, r0
 800dd8e:	f000 fcdb 	bl	800e748 <_localeconv_r>
 800dd92:	6803      	ldr	r3, [r0, #0]
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f2 fa6a 	bl	8000270 <strlen>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dda0:	f8d8 3000 	ldr.w	r3, [r8]
 800dda4:	9005      	str	r0, [sp, #20]
 800dda6:	3307      	adds	r3, #7
 800dda8:	f023 0307 	bic.w	r3, r3, #7
 800ddac:	f103 0208 	add.w	r2, r3, #8
 800ddb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ddb4:	f8d4 b000 	ldr.w	fp, [r4]
 800ddb8:	f8c8 2000 	str.w	r2, [r8]
 800ddbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ddc4:	9307      	str	r3, [sp, #28]
 800ddc6:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ddce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddd2:	4b9c      	ldr	r3, [pc, #624]	@ (800e044 <_printf_float+0x2c8>)
 800ddd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd8:	f7f2 fea8 	bl	8000b2c <__aeabi_dcmpun>
 800dddc:	bb70      	cbnz	r0, 800de3c <_printf_float+0xc0>
 800ddde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dde2:	4b98      	ldr	r3, [pc, #608]	@ (800e044 <_printf_float+0x2c8>)
 800dde4:	f04f 32ff 	mov.w	r2, #4294967295
 800dde8:	f7f2 fe82 	bl	8000af0 <__aeabi_dcmple>
 800ddec:	bb30      	cbnz	r0, 800de3c <_printf_float+0xc0>
 800ddee:	2200      	movs	r2, #0
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	f7f2 fe71 	bl	8000adc <__aeabi_dcmplt>
 800ddfa:	b110      	cbz	r0, 800de02 <_printf_float+0x86>
 800ddfc:	232d      	movs	r3, #45	@ 0x2d
 800ddfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de02:	4a91      	ldr	r2, [pc, #580]	@ (800e048 <_printf_float+0x2cc>)
 800de04:	4b91      	ldr	r3, [pc, #580]	@ (800e04c <_printf_float+0x2d0>)
 800de06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de0a:	bf94      	ite	ls
 800de0c:	4690      	movls	r8, r2
 800de0e:	4698      	movhi	r8, r3
 800de10:	2303      	movs	r3, #3
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	f02b 0304 	bic.w	r3, fp, #4
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	f04f 0900 	mov.w	r9, #0
 800de1e:	9700      	str	r7, [sp, #0]
 800de20:	4633      	mov	r3, r6
 800de22:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de24:	4621      	mov	r1, r4
 800de26:	4628      	mov	r0, r5
 800de28:	f000 f9d2 	bl	800e1d0 <_printf_common>
 800de2c:	3001      	adds	r0, #1
 800de2e:	f040 808d 	bne.w	800df4c <_printf_float+0x1d0>
 800de32:	f04f 30ff 	mov.w	r0, #4294967295
 800de36:	b00d      	add	sp, #52	@ 0x34
 800de38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3c:	4642      	mov	r2, r8
 800de3e:	464b      	mov	r3, r9
 800de40:	4640      	mov	r0, r8
 800de42:	4649      	mov	r1, r9
 800de44:	f7f2 fe72 	bl	8000b2c <__aeabi_dcmpun>
 800de48:	b140      	cbz	r0, 800de5c <_printf_float+0xe0>
 800de4a:	464b      	mov	r3, r9
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bfbc      	itt	lt
 800de50:	232d      	movlt	r3, #45	@ 0x2d
 800de52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800de56:	4a7e      	ldr	r2, [pc, #504]	@ (800e050 <_printf_float+0x2d4>)
 800de58:	4b7e      	ldr	r3, [pc, #504]	@ (800e054 <_printf_float+0x2d8>)
 800de5a:	e7d4      	b.n	800de06 <_printf_float+0x8a>
 800de5c:	6863      	ldr	r3, [r4, #4]
 800de5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800de62:	9206      	str	r2, [sp, #24]
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	d13b      	bne.n	800dee0 <_printf_float+0x164>
 800de68:	2306      	movs	r3, #6
 800de6a:	6063      	str	r3, [r4, #4]
 800de6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800de70:	2300      	movs	r3, #0
 800de72:	6022      	str	r2, [r4, #0]
 800de74:	9303      	str	r3, [sp, #12]
 800de76:	ab0a      	add	r3, sp, #40	@ 0x28
 800de78:	e9cd a301 	strd	sl, r3, [sp, #4]
 800de7c:	ab09      	add	r3, sp, #36	@ 0x24
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	6861      	ldr	r1, [r4, #4]
 800de82:	ec49 8b10 	vmov	d0, r8, r9
 800de86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800de8a:	4628      	mov	r0, r5
 800de8c:	f7ff fed6 	bl	800dc3c <__cvt>
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de94:	2b47      	cmp	r3, #71	@ 0x47
 800de96:	4680      	mov	r8, r0
 800de98:	d129      	bne.n	800deee <_printf_float+0x172>
 800de9a:	1cc8      	adds	r0, r1, #3
 800de9c:	db02      	blt.n	800dea4 <_printf_float+0x128>
 800de9e:	6863      	ldr	r3, [r4, #4]
 800dea0:	4299      	cmp	r1, r3
 800dea2:	dd41      	ble.n	800df28 <_printf_float+0x1ac>
 800dea4:	f1aa 0a02 	sub.w	sl, sl, #2
 800dea8:	fa5f fa8a 	uxtb.w	sl, sl
 800deac:	3901      	subs	r1, #1
 800deae:	4652      	mov	r2, sl
 800deb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800deb4:	9109      	str	r1, [sp, #36]	@ 0x24
 800deb6:	f7ff ff26 	bl	800dd06 <__exponent>
 800deba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800debc:	1813      	adds	r3, r2, r0
 800debe:	2a01      	cmp	r2, #1
 800dec0:	4681      	mov	r9, r0
 800dec2:	6123      	str	r3, [r4, #16]
 800dec4:	dc02      	bgt.n	800decc <_printf_float+0x150>
 800dec6:	6822      	ldr	r2, [r4, #0]
 800dec8:	07d2      	lsls	r2, r2, #31
 800deca:	d501      	bpl.n	800ded0 <_printf_float+0x154>
 800decc:	3301      	adds	r3, #1
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0a2      	beq.n	800de1e <_printf_float+0xa2>
 800ded8:	232d      	movs	r3, #45	@ 0x2d
 800deda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dede:	e79e      	b.n	800de1e <_printf_float+0xa2>
 800dee0:	9a06      	ldr	r2, [sp, #24]
 800dee2:	2a47      	cmp	r2, #71	@ 0x47
 800dee4:	d1c2      	bne.n	800de6c <_printf_float+0xf0>
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1c0      	bne.n	800de6c <_printf_float+0xf0>
 800deea:	2301      	movs	r3, #1
 800deec:	e7bd      	b.n	800de6a <_printf_float+0xee>
 800deee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800def2:	d9db      	bls.n	800deac <_printf_float+0x130>
 800def4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800def8:	d118      	bne.n	800df2c <_printf_float+0x1b0>
 800defa:	2900      	cmp	r1, #0
 800defc:	6863      	ldr	r3, [r4, #4]
 800defe:	dd0b      	ble.n	800df18 <_printf_float+0x19c>
 800df00:	6121      	str	r1, [r4, #16]
 800df02:	b913      	cbnz	r3, 800df0a <_printf_float+0x18e>
 800df04:	6822      	ldr	r2, [r4, #0]
 800df06:	07d0      	lsls	r0, r2, #31
 800df08:	d502      	bpl.n	800df10 <_printf_float+0x194>
 800df0a:	3301      	adds	r3, #1
 800df0c:	440b      	add	r3, r1
 800df0e:	6123      	str	r3, [r4, #16]
 800df10:	65a1      	str	r1, [r4, #88]	@ 0x58
 800df12:	f04f 0900 	mov.w	r9, #0
 800df16:	e7db      	b.n	800ded0 <_printf_float+0x154>
 800df18:	b913      	cbnz	r3, 800df20 <_printf_float+0x1a4>
 800df1a:	6822      	ldr	r2, [r4, #0]
 800df1c:	07d2      	lsls	r2, r2, #31
 800df1e:	d501      	bpl.n	800df24 <_printf_float+0x1a8>
 800df20:	3302      	adds	r3, #2
 800df22:	e7f4      	b.n	800df0e <_printf_float+0x192>
 800df24:	2301      	movs	r3, #1
 800df26:	e7f2      	b.n	800df0e <_printf_float+0x192>
 800df28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800df2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df2e:	4299      	cmp	r1, r3
 800df30:	db05      	blt.n	800df3e <_printf_float+0x1c2>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	6121      	str	r1, [r4, #16]
 800df36:	07d8      	lsls	r0, r3, #31
 800df38:	d5ea      	bpl.n	800df10 <_printf_float+0x194>
 800df3a:	1c4b      	adds	r3, r1, #1
 800df3c:	e7e7      	b.n	800df0e <_printf_float+0x192>
 800df3e:	2900      	cmp	r1, #0
 800df40:	bfd4      	ite	le
 800df42:	f1c1 0202 	rsble	r2, r1, #2
 800df46:	2201      	movgt	r2, #1
 800df48:	4413      	add	r3, r2
 800df4a:	e7e0      	b.n	800df0e <_printf_float+0x192>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	055a      	lsls	r2, r3, #21
 800df50:	d407      	bmi.n	800df62 <_printf_float+0x1e6>
 800df52:	6923      	ldr	r3, [r4, #16]
 800df54:	4642      	mov	r2, r8
 800df56:	4631      	mov	r1, r6
 800df58:	4628      	mov	r0, r5
 800df5a:	47b8      	blx	r7
 800df5c:	3001      	adds	r0, #1
 800df5e:	d12b      	bne.n	800dfb8 <_printf_float+0x23c>
 800df60:	e767      	b.n	800de32 <_printf_float+0xb6>
 800df62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800df66:	f240 80dd 	bls.w	800e124 <_printf_float+0x3a8>
 800df6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df6e:	2200      	movs	r2, #0
 800df70:	2300      	movs	r3, #0
 800df72:	f7f2 fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 800df76:	2800      	cmp	r0, #0
 800df78:	d033      	beq.n	800dfe2 <_printf_float+0x266>
 800df7a:	4a37      	ldr	r2, [pc, #220]	@ (800e058 <_printf_float+0x2dc>)
 800df7c:	2301      	movs	r3, #1
 800df7e:	4631      	mov	r1, r6
 800df80:	4628      	mov	r0, r5
 800df82:	47b8      	blx	r7
 800df84:	3001      	adds	r0, #1
 800df86:	f43f af54 	beq.w	800de32 <_printf_float+0xb6>
 800df8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800df8e:	4543      	cmp	r3, r8
 800df90:	db02      	blt.n	800df98 <_printf_float+0x21c>
 800df92:	6823      	ldr	r3, [r4, #0]
 800df94:	07d8      	lsls	r0, r3, #31
 800df96:	d50f      	bpl.n	800dfb8 <_printf_float+0x23c>
 800df98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9c:	4631      	mov	r1, r6
 800df9e:	4628      	mov	r0, r5
 800dfa0:	47b8      	blx	r7
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	f43f af45 	beq.w	800de32 <_printf_float+0xb6>
 800dfa8:	f04f 0900 	mov.w	r9, #0
 800dfac:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfb0:	f104 0a1a 	add.w	sl, r4, #26
 800dfb4:	45c8      	cmp	r8, r9
 800dfb6:	dc09      	bgt.n	800dfcc <_printf_float+0x250>
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	079b      	lsls	r3, r3, #30
 800dfbc:	f100 8103 	bmi.w	800e1c6 <_printf_float+0x44a>
 800dfc0:	68e0      	ldr	r0, [r4, #12]
 800dfc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfc4:	4298      	cmp	r0, r3
 800dfc6:	bfb8      	it	lt
 800dfc8:	4618      	movlt	r0, r3
 800dfca:	e734      	b.n	800de36 <_printf_float+0xba>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4652      	mov	r2, sl
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b8      	blx	r7
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f af2b 	beq.w	800de32 <_printf_float+0xb6>
 800dfdc:	f109 0901 	add.w	r9, r9, #1
 800dfe0:	e7e8      	b.n	800dfb4 <_printf_float+0x238>
 800dfe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	dc39      	bgt.n	800e05c <_printf_float+0x2e0>
 800dfe8:	4a1b      	ldr	r2, [pc, #108]	@ (800e058 <_printf_float+0x2dc>)
 800dfea:	2301      	movs	r3, #1
 800dfec:	4631      	mov	r1, r6
 800dfee:	4628      	mov	r0, r5
 800dff0:	47b8      	blx	r7
 800dff2:	3001      	adds	r0, #1
 800dff4:	f43f af1d 	beq.w	800de32 <_printf_float+0xb6>
 800dff8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dffc:	ea59 0303 	orrs.w	r3, r9, r3
 800e000:	d102      	bne.n	800e008 <_printf_float+0x28c>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	07d9      	lsls	r1, r3, #31
 800e006:	d5d7      	bpl.n	800dfb8 <_printf_float+0x23c>
 800e008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e00c:	4631      	mov	r1, r6
 800e00e:	4628      	mov	r0, r5
 800e010:	47b8      	blx	r7
 800e012:	3001      	adds	r0, #1
 800e014:	f43f af0d 	beq.w	800de32 <_printf_float+0xb6>
 800e018:	f04f 0a00 	mov.w	sl, #0
 800e01c:	f104 0b1a 	add.w	fp, r4, #26
 800e020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e022:	425b      	negs	r3, r3
 800e024:	4553      	cmp	r3, sl
 800e026:	dc01      	bgt.n	800e02c <_printf_float+0x2b0>
 800e028:	464b      	mov	r3, r9
 800e02a:	e793      	b.n	800df54 <_printf_float+0x1d8>
 800e02c:	2301      	movs	r3, #1
 800e02e:	465a      	mov	r2, fp
 800e030:	4631      	mov	r1, r6
 800e032:	4628      	mov	r0, r5
 800e034:	47b8      	blx	r7
 800e036:	3001      	adds	r0, #1
 800e038:	f43f aefb 	beq.w	800de32 <_printf_float+0xb6>
 800e03c:	f10a 0a01 	add.w	sl, sl, #1
 800e040:	e7ee      	b.n	800e020 <_printf_float+0x2a4>
 800e042:	bf00      	nop
 800e044:	7fefffff 	.word	0x7fefffff
 800e048:	0801095c 	.word	0x0801095c
 800e04c:	08010960 	.word	0x08010960
 800e050:	08010964 	.word	0x08010964
 800e054:	08010968 	.word	0x08010968
 800e058:	0801096c 	.word	0x0801096c
 800e05c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e05e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e062:	4553      	cmp	r3, sl
 800e064:	bfa8      	it	ge
 800e066:	4653      	movge	r3, sl
 800e068:	2b00      	cmp	r3, #0
 800e06a:	4699      	mov	r9, r3
 800e06c:	dc36      	bgt.n	800e0dc <_printf_float+0x360>
 800e06e:	f04f 0b00 	mov.w	fp, #0
 800e072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e076:	f104 021a 	add.w	r2, r4, #26
 800e07a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e07c:	9306      	str	r3, [sp, #24]
 800e07e:	eba3 0309 	sub.w	r3, r3, r9
 800e082:	455b      	cmp	r3, fp
 800e084:	dc31      	bgt.n	800e0ea <_printf_float+0x36e>
 800e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e088:	459a      	cmp	sl, r3
 800e08a:	dc3a      	bgt.n	800e102 <_printf_float+0x386>
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	07da      	lsls	r2, r3, #31
 800e090:	d437      	bmi.n	800e102 <_printf_float+0x386>
 800e092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e094:	ebaa 0903 	sub.w	r9, sl, r3
 800e098:	9b06      	ldr	r3, [sp, #24]
 800e09a:	ebaa 0303 	sub.w	r3, sl, r3
 800e09e:	4599      	cmp	r9, r3
 800e0a0:	bfa8      	it	ge
 800e0a2:	4699      	movge	r9, r3
 800e0a4:	f1b9 0f00 	cmp.w	r9, #0
 800e0a8:	dc33      	bgt.n	800e112 <_printf_float+0x396>
 800e0aa:	f04f 0800 	mov.w	r8, #0
 800e0ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0b2:	f104 0b1a 	add.w	fp, r4, #26
 800e0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b8:	ebaa 0303 	sub.w	r3, sl, r3
 800e0bc:	eba3 0309 	sub.w	r3, r3, r9
 800e0c0:	4543      	cmp	r3, r8
 800e0c2:	f77f af79 	ble.w	800dfb8 <_printf_float+0x23c>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	465a      	mov	r2, fp
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	47b8      	blx	r7
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	f43f aeae 	beq.w	800de32 <_printf_float+0xb6>
 800e0d6:	f108 0801 	add.w	r8, r8, #1
 800e0da:	e7ec      	b.n	800e0b6 <_printf_float+0x33a>
 800e0dc:	4642      	mov	r2, r8
 800e0de:	4631      	mov	r1, r6
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	47b8      	blx	r7
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d1c2      	bne.n	800e06e <_printf_float+0x2f2>
 800e0e8:	e6a3      	b.n	800de32 <_printf_float+0xb6>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	9206      	str	r2, [sp, #24]
 800e0f2:	47b8      	blx	r7
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	f43f ae9c 	beq.w	800de32 <_printf_float+0xb6>
 800e0fa:	9a06      	ldr	r2, [sp, #24]
 800e0fc:	f10b 0b01 	add.w	fp, fp, #1
 800e100:	e7bb      	b.n	800e07a <_printf_float+0x2fe>
 800e102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e106:	4631      	mov	r1, r6
 800e108:	4628      	mov	r0, r5
 800e10a:	47b8      	blx	r7
 800e10c:	3001      	adds	r0, #1
 800e10e:	d1c0      	bne.n	800e092 <_printf_float+0x316>
 800e110:	e68f      	b.n	800de32 <_printf_float+0xb6>
 800e112:	9a06      	ldr	r2, [sp, #24]
 800e114:	464b      	mov	r3, r9
 800e116:	4442      	add	r2, r8
 800e118:	4631      	mov	r1, r6
 800e11a:	4628      	mov	r0, r5
 800e11c:	47b8      	blx	r7
 800e11e:	3001      	adds	r0, #1
 800e120:	d1c3      	bne.n	800e0aa <_printf_float+0x32e>
 800e122:	e686      	b.n	800de32 <_printf_float+0xb6>
 800e124:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e128:	f1ba 0f01 	cmp.w	sl, #1
 800e12c:	dc01      	bgt.n	800e132 <_printf_float+0x3b6>
 800e12e:	07db      	lsls	r3, r3, #31
 800e130:	d536      	bpl.n	800e1a0 <_printf_float+0x424>
 800e132:	2301      	movs	r3, #1
 800e134:	4642      	mov	r2, r8
 800e136:	4631      	mov	r1, r6
 800e138:	4628      	mov	r0, r5
 800e13a:	47b8      	blx	r7
 800e13c:	3001      	adds	r0, #1
 800e13e:	f43f ae78 	beq.w	800de32 <_printf_float+0xb6>
 800e142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e146:	4631      	mov	r1, r6
 800e148:	4628      	mov	r0, r5
 800e14a:	47b8      	blx	r7
 800e14c:	3001      	adds	r0, #1
 800e14e:	f43f ae70 	beq.w	800de32 <_printf_float+0xb6>
 800e152:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e156:	2200      	movs	r2, #0
 800e158:	2300      	movs	r3, #0
 800e15a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e15e:	f7f2 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e162:	b9c0      	cbnz	r0, 800e196 <_printf_float+0x41a>
 800e164:	4653      	mov	r3, sl
 800e166:	f108 0201 	add.w	r2, r8, #1
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	d10c      	bne.n	800e18e <_printf_float+0x412>
 800e174:	e65d      	b.n	800de32 <_printf_float+0xb6>
 800e176:	2301      	movs	r3, #1
 800e178:	465a      	mov	r2, fp
 800e17a:	4631      	mov	r1, r6
 800e17c:	4628      	mov	r0, r5
 800e17e:	47b8      	blx	r7
 800e180:	3001      	adds	r0, #1
 800e182:	f43f ae56 	beq.w	800de32 <_printf_float+0xb6>
 800e186:	f108 0801 	add.w	r8, r8, #1
 800e18a:	45d0      	cmp	r8, sl
 800e18c:	dbf3      	blt.n	800e176 <_printf_float+0x3fa>
 800e18e:	464b      	mov	r3, r9
 800e190:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e194:	e6df      	b.n	800df56 <_printf_float+0x1da>
 800e196:	f04f 0800 	mov.w	r8, #0
 800e19a:	f104 0b1a 	add.w	fp, r4, #26
 800e19e:	e7f4      	b.n	800e18a <_printf_float+0x40e>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	4642      	mov	r2, r8
 800e1a4:	e7e1      	b.n	800e16a <_printf_float+0x3ee>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	464a      	mov	r2, r9
 800e1aa:	4631      	mov	r1, r6
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	47b8      	blx	r7
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	f43f ae3e 	beq.w	800de32 <_printf_float+0xb6>
 800e1b6:	f108 0801 	add.w	r8, r8, #1
 800e1ba:	68e3      	ldr	r3, [r4, #12]
 800e1bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1be:	1a5b      	subs	r3, r3, r1
 800e1c0:	4543      	cmp	r3, r8
 800e1c2:	dcf0      	bgt.n	800e1a6 <_printf_float+0x42a>
 800e1c4:	e6fc      	b.n	800dfc0 <_printf_float+0x244>
 800e1c6:	f04f 0800 	mov.w	r8, #0
 800e1ca:	f104 0919 	add.w	r9, r4, #25
 800e1ce:	e7f4      	b.n	800e1ba <_printf_float+0x43e>

0800e1d0 <_printf_common>:
 800e1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d4:	4616      	mov	r6, r2
 800e1d6:	4698      	mov	r8, r3
 800e1d8:	688a      	ldr	r2, [r1, #8]
 800e1da:	690b      	ldr	r3, [r1, #16]
 800e1dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	bfb8      	it	lt
 800e1e4:	4613      	movlt	r3, r2
 800e1e6:	6033      	str	r3, [r6, #0]
 800e1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	b10a      	cbz	r2, 800e1f6 <_printf_common+0x26>
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	6033      	str	r3, [r6, #0]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	0699      	lsls	r1, r3, #26
 800e1fa:	bf42      	ittt	mi
 800e1fc:	6833      	ldrmi	r3, [r6, #0]
 800e1fe:	3302      	addmi	r3, #2
 800e200:	6033      	strmi	r3, [r6, #0]
 800e202:	6825      	ldr	r5, [r4, #0]
 800e204:	f015 0506 	ands.w	r5, r5, #6
 800e208:	d106      	bne.n	800e218 <_printf_common+0x48>
 800e20a:	f104 0a19 	add.w	sl, r4, #25
 800e20e:	68e3      	ldr	r3, [r4, #12]
 800e210:	6832      	ldr	r2, [r6, #0]
 800e212:	1a9b      	subs	r3, r3, r2
 800e214:	42ab      	cmp	r3, r5
 800e216:	dc26      	bgt.n	800e266 <_printf_common+0x96>
 800e218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e21c:	6822      	ldr	r2, [r4, #0]
 800e21e:	3b00      	subs	r3, #0
 800e220:	bf18      	it	ne
 800e222:	2301      	movne	r3, #1
 800e224:	0692      	lsls	r2, r2, #26
 800e226:	d42b      	bmi.n	800e280 <_printf_common+0xb0>
 800e228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e22c:	4641      	mov	r1, r8
 800e22e:	4638      	mov	r0, r7
 800e230:	47c8      	blx	r9
 800e232:	3001      	adds	r0, #1
 800e234:	d01e      	beq.n	800e274 <_printf_common+0xa4>
 800e236:	6823      	ldr	r3, [r4, #0]
 800e238:	6922      	ldr	r2, [r4, #16]
 800e23a:	f003 0306 	and.w	r3, r3, #6
 800e23e:	2b04      	cmp	r3, #4
 800e240:	bf02      	ittt	eq
 800e242:	68e5      	ldreq	r5, [r4, #12]
 800e244:	6833      	ldreq	r3, [r6, #0]
 800e246:	1aed      	subeq	r5, r5, r3
 800e248:	68a3      	ldr	r3, [r4, #8]
 800e24a:	bf0c      	ite	eq
 800e24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e250:	2500      	movne	r5, #0
 800e252:	4293      	cmp	r3, r2
 800e254:	bfc4      	itt	gt
 800e256:	1a9b      	subgt	r3, r3, r2
 800e258:	18ed      	addgt	r5, r5, r3
 800e25a:	2600      	movs	r6, #0
 800e25c:	341a      	adds	r4, #26
 800e25e:	42b5      	cmp	r5, r6
 800e260:	d11a      	bne.n	800e298 <_printf_common+0xc8>
 800e262:	2000      	movs	r0, #0
 800e264:	e008      	b.n	800e278 <_printf_common+0xa8>
 800e266:	2301      	movs	r3, #1
 800e268:	4652      	mov	r2, sl
 800e26a:	4641      	mov	r1, r8
 800e26c:	4638      	mov	r0, r7
 800e26e:	47c8      	blx	r9
 800e270:	3001      	adds	r0, #1
 800e272:	d103      	bne.n	800e27c <_printf_common+0xac>
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
 800e278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e27c:	3501      	adds	r5, #1
 800e27e:	e7c6      	b.n	800e20e <_printf_common+0x3e>
 800e280:	18e1      	adds	r1, r4, r3
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	2030      	movs	r0, #48	@ 0x30
 800e286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e28a:	4422      	add	r2, r4
 800e28c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e294:	3302      	adds	r3, #2
 800e296:	e7c7      	b.n	800e228 <_printf_common+0x58>
 800e298:	2301      	movs	r3, #1
 800e29a:	4622      	mov	r2, r4
 800e29c:	4641      	mov	r1, r8
 800e29e:	4638      	mov	r0, r7
 800e2a0:	47c8      	blx	r9
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	d0e6      	beq.n	800e274 <_printf_common+0xa4>
 800e2a6:	3601      	adds	r6, #1
 800e2a8:	e7d9      	b.n	800e25e <_printf_common+0x8e>
	...

0800e2ac <_printf_i>:
 800e2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	7e0f      	ldrb	r7, [r1, #24]
 800e2b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2b4:	2f78      	cmp	r7, #120	@ 0x78
 800e2b6:	4691      	mov	r9, r2
 800e2b8:	4680      	mov	r8, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	469a      	mov	sl, r3
 800e2be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2c2:	d807      	bhi.n	800e2d4 <_printf_i+0x28>
 800e2c4:	2f62      	cmp	r7, #98	@ 0x62
 800e2c6:	d80a      	bhi.n	800e2de <_printf_i+0x32>
 800e2c8:	2f00      	cmp	r7, #0
 800e2ca:	f000 80d2 	beq.w	800e472 <_printf_i+0x1c6>
 800e2ce:	2f58      	cmp	r7, #88	@ 0x58
 800e2d0:	f000 80b9 	beq.w	800e446 <_printf_i+0x19a>
 800e2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2dc:	e03a      	b.n	800e354 <_printf_i+0xa8>
 800e2de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2e2:	2b15      	cmp	r3, #21
 800e2e4:	d8f6      	bhi.n	800e2d4 <_printf_i+0x28>
 800e2e6:	a101      	add	r1, pc, #4	@ (adr r1, 800e2ec <_printf_i+0x40>)
 800e2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2ec:	0800e345 	.word	0x0800e345
 800e2f0:	0800e359 	.word	0x0800e359
 800e2f4:	0800e2d5 	.word	0x0800e2d5
 800e2f8:	0800e2d5 	.word	0x0800e2d5
 800e2fc:	0800e2d5 	.word	0x0800e2d5
 800e300:	0800e2d5 	.word	0x0800e2d5
 800e304:	0800e359 	.word	0x0800e359
 800e308:	0800e2d5 	.word	0x0800e2d5
 800e30c:	0800e2d5 	.word	0x0800e2d5
 800e310:	0800e2d5 	.word	0x0800e2d5
 800e314:	0800e2d5 	.word	0x0800e2d5
 800e318:	0800e459 	.word	0x0800e459
 800e31c:	0800e383 	.word	0x0800e383
 800e320:	0800e413 	.word	0x0800e413
 800e324:	0800e2d5 	.word	0x0800e2d5
 800e328:	0800e2d5 	.word	0x0800e2d5
 800e32c:	0800e47b 	.word	0x0800e47b
 800e330:	0800e2d5 	.word	0x0800e2d5
 800e334:	0800e383 	.word	0x0800e383
 800e338:	0800e2d5 	.word	0x0800e2d5
 800e33c:	0800e2d5 	.word	0x0800e2d5
 800e340:	0800e41b 	.word	0x0800e41b
 800e344:	6833      	ldr	r3, [r6, #0]
 800e346:	1d1a      	adds	r2, r3, #4
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	6032      	str	r2, [r6, #0]
 800e34c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e354:	2301      	movs	r3, #1
 800e356:	e09d      	b.n	800e494 <_printf_i+0x1e8>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	6820      	ldr	r0, [r4, #0]
 800e35c:	1d19      	adds	r1, r3, #4
 800e35e:	6031      	str	r1, [r6, #0]
 800e360:	0606      	lsls	r6, r0, #24
 800e362:	d501      	bpl.n	800e368 <_printf_i+0xbc>
 800e364:	681d      	ldr	r5, [r3, #0]
 800e366:	e003      	b.n	800e370 <_printf_i+0xc4>
 800e368:	0645      	lsls	r5, r0, #25
 800e36a:	d5fb      	bpl.n	800e364 <_printf_i+0xb8>
 800e36c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e370:	2d00      	cmp	r5, #0
 800e372:	da03      	bge.n	800e37c <_printf_i+0xd0>
 800e374:	232d      	movs	r3, #45	@ 0x2d
 800e376:	426d      	negs	r5, r5
 800e378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e37c:	4859      	ldr	r0, [pc, #356]	@ (800e4e4 <_printf_i+0x238>)
 800e37e:	230a      	movs	r3, #10
 800e380:	e011      	b.n	800e3a6 <_printf_i+0xfa>
 800e382:	6821      	ldr	r1, [r4, #0]
 800e384:	6833      	ldr	r3, [r6, #0]
 800e386:	0608      	lsls	r0, r1, #24
 800e388:	f853 5b04 	ldr.w	r5, [r3], #4
 800e38c:	d402      	bmi.n	800e394 <_printf_i+0xe8>
 800e38e:	0649      	lsls	r1, r1, #25
 800e390:	bf48      	it	mi
 800e392:	b2ad      	uxthmi	r5, r5
 800e394:	2f6f      	cmp	r7, #111	@ 0x6f
 800e396:	4853      	ldr	r0, [pc, #332]	@ (800e4e4 <_printf_i+0x238>)
 800e398:	6033      	str	r3, [r6, #0]
 800e39a:	bf14      	ite	ne
 800e39c:	230a      	movne	r3, #10
 800e39e:	2308      	moveq	r3, #8
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3a6:	6866      	ldr	r6, [r4, #4]
 800e3a8:	60a6      	str	r6, [r4, #8]
 800e3aa:	2e00      	cmp	r6, #0
 800e3ac:	bfa2      	ittt	ge
 800e3ae:	6821      	ldrge	r1, [r4, #0]
 800e3b0:	f021 0104 	bicge.w	r1, r1, #4
 800e3b4:	6021      	strge	r1, [r4, #0]
 800e3b6:	b90d      	cbnz	r5, 800e3bc <_printf_i+0x110>
 800e3b8:	2e00      	cmp	r6, #0
 800e3ba:	d04b      	beq.n	800e454 <_printf_i+0x1a8>
 800e3bc:	4616      	mov	r6, r2
 800e3be:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3c2:	fb03 5711 	mls	r7, r3, r1, r5
 800e3c6:	5dc7      	ldrb	r7, [r0, r7]
 800e3c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3cc:	462f      	mov	r7, r5
 800e3ce:	42bb      	cmp	r3, r7
 800e3d0:	460d      	mov	r5, r1
 800e3d2:	d9f4      	bls.n	800e3be <_printf_i+0x112>
 800e3d4:	2b08      	cmp	r3, #8
 800e3d6:	d10b      	bne.n	800e3f0 <_printf_i+0x144>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	07df      	lsls	r7, r3, #31
 800e3dc:	d508      	bpl.n	800e3f0 <_printf_i+0x144>
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	6861      	ldr	r1, [r4, #4]
 800e3e2:	4299      	cmp	r1, r3
 800e3e4:	bfde      	ittt	le
 800e3e6:	2330      	movle	r3, #48	@ 0x30
 800e3e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3f0:	1b92      	subs	r2, r2, r6
 800e3f2:	6122      	str	r2, [r4, #16]
 800e3f4:	f8cd a000 	str.w	sl, [sp]
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	aa03      	add	r2, sp, #12
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4640      	mov	r0, r8
 800e400:	f7ff fee6 	bl	800e1d0 <_printf_common>
 800e404:	3001      	adds	r0, #1
 800e406:	d14a      	bne.n	800e49e <_printf_i+0x1f2>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	b004      	add	sp, #16
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	f043 0320 	orr.w	r3, r3, #32
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	4833      	ldr	r0, [pc, #204]	@ (800e4e8 <_printf_i+0x23c>)
 800e41c:	2778      	movs	r7, #120	@ 0x78
 800e41e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	6831      	ldr	r1, [r6, #0]
 800e426:	061f      	lsls	r7, r3, #24
 800e428:	f851 5b04 	ldr.w	r5, [r1], #4
 800e42c:	d402      	bmi.n	800e434 <_printf_i+0x188>
 800e42e:	065f      	lsls	r7, r3, #25
 800e430:	bf48      	it	mi
 800e432:	b2ad      	uxthmi	r5, r5
 800e434:	6031      	str	r1, [r6, #0]
 800e436:	07d9      	lsls	r1, r3, #31
 800e438:	bf44      	itt	mi
 800e43a:	f043 0320 	orrmi.w	r3, r3, #32
 800e43e:	6023      	strmi	r3, [r4, #0]
 800e440:	b11d      	cbz	r5, 800e44a <_printf_i+0x19e>
 800e442:	2310      	movs	r3, #16
 800e444:	e7ac      	b.n	800e3a0 <_printf_i+0xf4>
 800e446:	4827      	ldr	r0, [pc, #156]	@ (800e4e4 <_printf_i+0x238>)
 800e448:	e7e9      	b.n	800e41e <_printf_i+0x172>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	f023 0320 	bic.w	r3, r3, #32
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	e7f6      	b.n	800e442 <_printf_i+0x196>
 800e454:	4616      	mov	r6, r2
 800e456:	e7bd      	b.n	800e3d4 <_printf_i+0x128>
 800e458:	6833      	ldr	r3, [r6, #0]
 800e45a:	6825      	ldr	r5, [r4, #0]
 800e45c:	6961      	ldr	r1, [r4, #20]
 800e45e:	1d18      	adds	r0, r3, #4
 800e460:	6030      	str	r0, [r6, #0]
 800e462:	062e      	lsls	r6, r5, #24
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	d501      	bpl.n	800e46c <_printf_i+0x1c0>
 800e468:	6019      	str	r1, [r3, #0]
 800e46a:	e002      	b.n	800e472 <_printf_i+0x1c6>
 800e46c:	0668      	lsls	r0, r5, #25
 800e46e:	d5fb      	bpl.n	800e468 <_printf_i+0x1bc>
 800e470:	8019      	strh	r1, [r3, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	6123      	str	r3, [r4, #16]
 800e476:	4616      	mov	r6, r2
 800e478:	e7bc      	b.n	800e3f4 <_printf_i+0x148>
 800e47a:	6833      	ldr	r3, [r6, #0]
 800e47c:	1d1a      	adds	r2, r3, #4
 800e47e:	6032      	str	r2, [r6, #0]
 800e480:	681e      	ldr	r6, [r3, #0]
 800e482:	6862      	ldr	r2, [r4, #4]
 800e484:	2100      	movs	r1, #0
 800e486:	4630      	mov	r0, r6
 800e488:	f7f1 fea2 	bl	80001d0 <memchr>
 800e48c:	b108      	cbz	r0, 800e492 <_printf_i+0x1e6>
 800e48e:	1b80      	subs	r0, r0, r6
 800e490:	6060      	str	r0, [r4, #4]
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	2300      	movs	r3, #0
 800e498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e49c:	e7aa      	b.n	800e3f4 <_printf_i+0x148>
 800e49e:	6923      	ldr	r3, [r4, #16]
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	47d0      	blx	sl
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d0ad      	beq.n	800e408 <_printf_i+0x15c>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	079b      	lsls	r3, r3, #30
 800e4b0:	d413      	bmi.n	800e4da <_printf_i+0x22e>
 800e4b2:	68e0      	ldr	r0, [r4, #12]
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	4298      	cmp	r0, r3
 800e4b8:	bfb8      	it	lt
 800e4ba:	4618      	movlt	r0, r3
 800e4bc:	e7a6      	b.n	800e40c <_printf_i+0x160>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4632      	mov	r2, r6
 800e4c2:	4649      	mov	r1, r9
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	47d0      	blx	sl
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	d09d      	beq.n	800e408 <_printf_i+0x15c>
 800e4cc:	3501      	adds	r5, #1
 800e4ce:	68e3      	ldr	r3, [r4, #12]
 800e4d0:	9903      	ldr	r1, [sp, #12]
 800e4d2:	1a5b      	subs	r3, r3, r1
 800e4d4:	42ab      	cmp	r3, r5
 800e4d6:	dcf2      	bgt.n	800e4be <_printf_i+0x212>
 800e4d8:	e7eb      	b.n	800e4b2 <_printf_i+0x206>
 800e4da:	2500      	movs	r5, #0
 800e4dc:	f104 0619 	add.w	r6, r4, #25
 800e4e0:	e7f5      	b.n	800e4ce <_printf_i+0x222>
 800e4e2:	bf00      	nop
 800e4e4:	0801096e 	.word	0x0801096e
 800e4e8:	0801097f 	.word	0x0801097f

0800e4ec <std>:
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	b510      	push	{r4, lr}
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4fa:	6083      	str	r3, [r0, #8]
 800e4fc:	8181      	strh	r1, [r0, #12]
 800e4fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800e500:	81c2      	strh	r2, [r0, #14]
 800e502:	6183      	str	r3, [r0, #24]
 800e504:	4619      	mov	r1, r3
 800e506:	2208      	movs	r2, #8
 800e508:	305c      	adds	r0, #92	@ 0x5c
 800e50a:	f000 f914 	bl	800e736 <memset>
 800e50e:	4b0d      	ldr	r3, [pc, #52]	@ (800e544 <std+0x58>)
 800e510:	6263      	str	r3, [r4, #36]	@ 0x24
 800e512:	4b0d      	ldr	r3, [pc, #52]	@ (800e548 <std+0x5c>)
 800e514:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e516:	4b0d      	ldr	r3, [pc, #52]	@ (800e54c <std+0x60>)
 800e518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e51a:	4b0d      	ldr	r3, [pc, #52]	@ (800e550 <std+0x64>)
 800e51c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e51e:	4b0d      	ldr	r3, [pc, #52]	@ (800e554 <std+0x68>)
 800e520:	6224      	str	r4, [r4, #32]
 800e522:	429c      	cmp	r4, r3
 800e524:	d006      	beq.n	800e534 <std+0x48>
 800e526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e52a:	4294      	cmp	r4, r2
 800e52c:	d002      	beq.n	800e534 <std+0x48>
 800e52e:	33d0      	adds	r3, #208	@ 0xd0
 800e530:	429c      	cmp	r4, r3
 800e532:	d105      	bne.n	800e540 <std+0x54>
 800e534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e53c:	f000 b9de 	b.w	800e8fc <__retarget_lock_init_recursive>
 800e540:	bd10      	pop	{r4, pc}
 800e542:	bf00      	nop
 800e544:	0800e6b1 	.word	0x0800e6b1
 800e548:	0800e6d3 	.word	0x0800e6d3
 800e54c:	0800e70b 	.word	0x0800e70b
 800e550:	0800e72f 	.word	0x0800e72f
 800e554:	200082f8 	.word	0x200082f8

0800e558 <stdio_exit_handler>:
 800e558:	4a02      	ldr	r2, [pc, #8]	@ (800e564 <stdio_exit_handler+0xc>)
 800e55a:	4903      	ldr	r1, [pc, #12]	@ (800e568 <stdio_exit_handler+0x10>)
 800e55c:	4803      	ldr	r0, [pc, #12]	@ (800e56c <stdio_exit_handler+0x14>)
 800e55e:	f000 b869 	b.w	800e634 <_fwalk_sglue>
 800e562:	bf00      	nop
 800e564:	20002834 	.word	0x20002834
 800e568:	08010109 	.word	0x08010109
 800e56c:	20002844 	.word	0x20002844

0800e570 <cleanup_stdio>:
 800e570:	6841      	ldr	r1, [r0, #4]
 800e572:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a4 <cleanup_stdio+0x34>)
 800e574:	4299      	cmp	r1, r3
 800e576:	b510      	push	{r4, lr}
 800e578:	4604      	mov	r4, r0
 800e57a:	d001      	beq.n	800e580 <cleanup_stdio+0x10>
 800e57c:	f001 fdc4 	bl	8010108 <_fflush_r>
 800e580:	68a1      	ldr	r1, [r4, #8]
 800e582:	4b09      	ldr	r3, [pc, #36]	@ (800e5a8 <cleanup_stdio+0x38>)
 800e584:	4299      	cmp	r1, r3
 800e586:	d002      	beq.n	800e58e <cleanup_stdio+0x1e>
 800e588:	4620      	mov	r0, r4
 800e58a:	f001 fdbd 	bl	8010108 <_fflush_r>
 800e58e:	68e1      	ldr	r1, [r4, #12]
 800e590:	4b06      	ldr	r3, [pc, #24]	@ (800e5ac <cleanup_stdio+0x3c>)
 800e592:	4299      	cmp	r1, r3
 800e594:	d004      	beq.n	800e5a0 <cleanup_stdio+0x30>
 800e596:	4620      	mov	r0, r4
 800e598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e59c:	f001 bdb4 	b.w	8010108 <_fflush_r>
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	bf00      	nop
 800e5a4:	200082f8 	.word	0x200082f8
 800e5a8:	20008360 	.word	0x20008360
 800e5ac:	200083c8 	.word	0x200083c8

0800e5b0 <global_stdio_init.part.0>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5e0 <global_stdio_init.part.0+0x30>)
 800e5b4:	4c0b      	ldr	r4, [pc, #44]	@ (800e5e4 <global_stdio_init.part.0+0x34>)
 800e5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e5e8 <global_stdio_init.part.0+0x38>)
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	2200      	movs	r2, #0
 800e5be:	2104      	movs	r1, #4
 800e5c0:	f7ff ff94 	bl	800e4ec <std>
 800e5c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	2109      	movs	r1, #9
 800e5cc:	f7ff ff8e 	bl	800e4ec <std>
 800e5d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5da:	2112      	movs	r1, #18
 800e5dc:	f7ff bf86 	b.w	800e4ec <std>
 800e5e0:	20008430 	.word	0x20008430
 800e5e4:	200082f8 	.word	0x200082f8
 800e5e8:	0800e559 	.word	0x0800e559

0800e5ec <__sfp_lock_acquire>:
 800e5ec:	4801      	ldr	r0, [pc, #4]	@ (800e5f4 <__sfp_lock_acquire+0x8>)
 800e5ee:	f000 b986 	b.w	800e8fe <__retarget_lock_acquire_recursive>
 800e5f2:	bf00      	nop
 800e5f4:	20008439 	.word	0x20008439

0800e5f8 <__sfp_lock_release>:
 800e5f8:	4801      	ldr	r0, [pc, #4]	@ (800e600 <__sfp_lock_release+0x8>)
 800e5fa:	f000 b981 	b.w	800e900 <__retarget_lock_release_recursive>
 800e5fe:	bf00      	nop
 800e600:	20008439 	.word	0x20008439

0800e604 <__sinit>:
 800e604:	b510      	push	{r4, lr}
 800e606:	4604      	mov	r4, r0
 800e608:	f7ff fff0 	bl	800e5ec <__sfp_lock_acquire>
 800e60c:	6a23      	ldr	r3, [r4, #32]
 800e60e:	b11b      	cbz	r3, 800e618 <__sinit+0x14>
 800e610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e614:	f7ff bff0 	b.w	800e5f8 <__sfp_lock_release>
 800e618:	4b04      	ldr	r3, [pc, #16]	@ (800e62c <__sinit+0x28>)
 800e61a:	6223      	str	r3, [r4, #32]
 800e61c:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <__sinit+0x2c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1f5      	bne.n	800e610 <__sinit+0xc>
 800e624:	f7ff ffc4 	bl	800e5b0 <global_stdio_init.part.0>
 800e628:	e7f2      	b.n	800e610 <__sinit+0xc>
 800e62a:	bf00      	nop
 800e62c:	0800e571 	.word	0x0800e571
 800e630:	20008430 	.word	0x20008430

0800e634 <_fwalk_sglue>:
 800e634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e638:	4607      	mov	r7, r0
 800e63a:	4688      	mov	r8, r1
 800e63c:	4614      	mov	r4, r2
 800e63e:	2600      	movs	r6, #0
 800e640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e644:	f1b9 0901 	subs.w	r9, r9, #1
 800e648:	d505      	bpl.n	800e656 <_fwalk_sglue+0x22>
 800e64a:	6824      	ldr	r4, [r4, #0]
 800e64c:	2c00      	cmp	r4, #0
 800e64e:	d1f7      	bne.n	800e640 <_fwalk_sglue+0xc>
 800e650:	4630      	mov	r0, r6
 800e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e656:	89ab      	ldrh	r3, [r5, #12]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d907      	bls.n	800e66c <_fwalk_sglue+0x38>
 800e65c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e660:	3301      	adds	r3, #1
 800e662:	d003      	beq.n	800e66c <_fwalk_sglue+0x38>
 800e664:	4629      	mov	r1, r5
 800e666:	4638      	mov	r0, r7
 800e668:	47c0      	blx	r8
 800e66a:	4306      	orrs	r6, r0
 800e66c:	3568      	adds	r5, #104	@ 0x68
 800e66e:	e7e9      	b.n	800e644 <_fwalk_sglue+0x10>

0800e670 <siprintf>:
 800e670:	b40e      	push	{r1, r2, r3}
 800e672:	b500      	push	{lr}
 800e674:	b09c      	sub	sp, #112	@ 0x70
 800e676:	ab1d      	add	r3, sp, #116	@ 0x74
 800e678:	9002      	str	r0, [sp, #8]
 800e67a:	9006      	str	r0, [sp, #24]
 800e67c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e680:	4809      	ldr	r0, [pc, #36]	@ (800e6a8 <siprintf+0x38>)
 800e682:	9107      	str	r1, [sp, #28]
 800e684:	9104      	str	r1, [sp, #16]
 800e686:	4909      	ldr	r1, [pc, #36]	@ (800e6ac <siprintf+0x3c>)
 800e688:	f853 2b04 	ldr.w	r2, [r3], #4
 800e68c:	9105      	str	r1, [sp, #20]
 800e68e:	6800      	ldr	r0, [r0, #0]
 800e690:	9301      	str	r3, [sp, #4]
 800e692:	a902      	add	r1, sp, #8
 800e694:	f001 fbb8 	bl	800fe08 <_svfiprintf_r>
 800e698:	9b02      	ldr	r3, [sp, #8]
 800e69a:	2200      	movs	r2, #0
 800e69c:	701a      	strb	r2, [r3, #0]
 800e69e:	b01c      	add	sp, #112	@ 0x70
 800e6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6a4:	b003      	add	sp, #12
 800e6a6:	4770      	bx	lr
 800e6a8:	20002840 	.word	0x20002840
 800e6ac:	ffff0208 	.word	0xffff0208

0800e6b0 <__sread>:
 800e6b0:	b510      	push	{r4, lr}
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b8:	f000 f8c2 	bl	800e840 <_read_r>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	bfab      	itete	ge
 800e6c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e6c4:	181b      	addge	r3, r3, r0
 800e6c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6ca:	bfac      	ite	ge
 800e6cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6ce:	81a3      	strhlt	r3, [r4, #12]
 800e6d0:	bd10      	pop	{r4, pc}

0800e6d2 <__swrite>:
 800e6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d6:	461f      	mov	r7, r3
 800e6d8:	898b      	ldrh	r3, [r1, #12]
 800e6da:	05db      	lsls	r3, r3, #23
 800e6dc:	4605      	mov	r5, r0
 800e6de:	460c      	mov	r4, r1
 800e6e0:	4616      	mov	r6, r2
 800e6e2:	d505      	bpl.n	800e6f0 <__swrite+0x1e>
 800e6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f000 f896 	bl	800e81c <_lseek_r>
 800e6f0:	89a3      	ldrh	r3, [r4, #12]
 800e6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	463b      	mov	r3, r7
 800e700:	4628      	mov	r0, r5
 800e702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e706:	f000 b8bd 	b.w	800e884 <_write_r>

0800e70a <__sseek>:
 800e70a:	b510      	push	{r4, lr}
 800e70c:	460c      	mov	r4, r1
 800e70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e712:	f000 f883 	bl	800e81c <_lseek_r>
 800e716:	1c43      	adds	r3, r0, #1
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	bf15      	itete	ne
 800e71c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e71e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e726:	81a3      	strheq	r3, [r4, #12]
 800e728:	bf18      	it	ne
 800e72a:	81a3      	strhne	r3, [r4, #12]
 800e72c:	bd10      	pop	{r4, pc}

0800e72e <__sclose>:
 800e72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e732:	f000 b80d 	b.w	800e750 <_close_r>

0800e736 <memset>:
 800e736:	4402      	add	r2, r0
 800e738:	4603      	mov	r3, r0
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d100      	bne.n	800e740 <memset+0xa>
 800e73e:	4770      	bx	lr
 800e740:	f803 1b01 	strb.w	r1, [r3], #1
 800e744:	e7f9      	b.n	800e73a <memset+0x4>
	...

0800e748 <_localeconv_r>:
 800e748:	4800      	ldr	r0, [pc, #0]	@ (800e74c <_localeconv_r+0x4>)
 800e74a:	4770      	bx	lr
 800e74c:	20002980 	.word	0x20002980

0800e750 <_close_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4d06      	ldr	r5, [pc, #24]	@ (800e76c <_close_r+0x1c>)
 800e754:	2300      	movs	r3, #0
 800e756:	4604      	mov	r4, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	602b      	str	r3, [r5, #0]
 800e75c:	f7f3 f9c8 	bl	8001af0 <_close>
 800e760:	1c43      	adds	r3, r0, #1
 800e762:	d102      	bne.n	800e76a <_close_r+0x1a>
 800e764:	682b      	ldr	r3, [r5, #0]
 800e766:	b103      	cbz	r3, 800e76a <_close_r+0x1a>
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	bd38      	pop	{r3, r4, r5, pc}
 800e76c:	20008434 	.word	0x20008434

0800e770 <_reclaim_reent>:
 800e770:	4b29      	ldr	r3, [pc, #164]	@ (800e818 <_reclaim_reent+0xa8>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4283      	cmp	r3, r0
 800e776:	b570      	push	{r4, r5, r6, lr}
 800e778:	4604      	mov	r4, r0
 800e77a:	d04b      	beq.n	800e814 <_reclaim_reent+0xa4>
 800e77c:	69c3      	ldr	r3, [r0, #28]
 800e77e:	b1ab      	cbz	r3, 800e7ac <_reclaim_reent+0x3c>
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	b16b      	cbz	r3, 800e7a0 <_reclaim_reent+0x30>
 800e784:	2500      	movs	r5, #0
 800e786:	69e3      	ldr	r3, [r4, #28]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	5959      	ldr	r1, [r3, r5]
 800e78c:	2900      	cmp	r1, #0
 800e78e:	d13b      	bne.n	800e808 <_reclaim_reent+0x98>
 800e790:	3504      	adds	r5, #4
 800e792:	2d80      	cmp	r5, #128	@ 0x80
 800e794:	d1f7      	bne.n	800e786 <_reclaim_reent+0x16>
 800e796:	69e3      	ldr	r3, [r4, #28]
 800e798:	4620      	mov	r0, r4
 800e79a:	68d9      	ldr	r1, [r3, #12]
 800e79c:	f000 ff0c 	bl	800f5b8 <_free_r>
 800e7a0:	69e3      	ldr	r3, [r4, #28]
 800e7a2:	6819      	ldr	r1, [r3, #0]
 800e7a4:	b111      	cbz	r1, 800e7ac <_reclaim_reent+0x3c>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f000 ff06 	bl	800f5b8 <_free_r>
 800e7ac:	6961      	ldr	r1, [r4, #20]
 800e7ae:	b111      	cbz	r1, 800e7b6 <_reclaim_reent+0x46>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f000 ff01 	bl	800f5b8 <_free_r>
 800e7b6:	69e1      	ldr	r1, [r4, #28]
 800e7b8:	b111      	cbz	r1, 800e7c0 <_reclaim_reent+0x50>
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 fefc 	bl	800f5b8 <_free_r>
 800e7c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e7c2:	b111      	cbz	r1, 800e7ca <_reclaim_reent+0x5a>
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f000 fef7 	bl	800f5b8 <_free_r>
 800e7ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7cc:	b111      	cbz	r1, 800e7d4 <_reclaim_reent+0x64>
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f000 fef2 	bl	800f5b8 <_free_r>
 800e7d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e7d6:	b111      	cbz	r1, 800e7de <_reclaim_reent+0x6e>
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 feed 	bl	800f5b8 <_free_r>
 800e7de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e7e0:	b111      	cbz	r1, 800e7e8 <_reclaim_reent+0x78>
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 fee8 	bl	800f5b8 <_free_r>
 800e7e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e7ea:	b111      	cbz	r1, 800e7f2 <_reclaim_reent+0x82>
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f000 fee3 	bl	800f5b8 <_free_r>
 800e7f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e7f4:	b111      	cbz	r1, 800e7fc <_reclaim_reent+0x8c>
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f000 fede 	bl	800f5b8 <_free_r>
 800e7fc:	6a23      	ldr	r3, [r4, #32]
 800e7fe:	b14b      	cbz	r3, 800e814 <_reclaim_reent+0xa4>
 800e800:	4620      	mov	r0, r4
 800e802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e806:	4718      	bx	r3
 800e808:	680e      	ldr	r6, [r1, #0]
 800e80a:	4620      	mov	r0, r4
 800e80c:	f000 fed4 	bl	800f5b8 <_free_r>
 800e810:	4631      	mov	r1, r6
 800e812:	e7bb      	b.n	800e78c <_reclaim_reent+0x1c>
 800e814:	bd70      	pop	{r4, r5, r6, pc}
 800e816:	bf00      	nop
 800e818:	20002840 	.word	0x20002840

0800e81c <_lseek_r>:
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	4d07      	ldr	r5, [pc, #28]	@ (800e83c <_lseek_r+0x20>)
 800e820:	4604      	mov	r4, r0
 800e822:	4608      	mov	r0, r1
 800e824:	4611      	mov	r1, r2
 800e826:	2200      	movs	r2, #0
 800e828:	602a      	str	r2, [r5, #0]
 800e82a:	461a      	mov	r2, r3
 800e82c:	f7f3 f987 	bl	8001b3e <_lseek>
 800e830:	1c43      	adds	r3, r0, #1
 800e832:	d102      	bne.n	800e83a <_lseek_r+0x1e>
 800e834:	682b      	ldr	r3, [r5, #0]
 800e836:	b103      	cbz	r3, 800e83a <_lseek_r+0x1e>
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	bd38      	pop	{r3, r4, r5, pc}
 800e83c:	20008434 	.word	0x20008434

0800e840 <_read_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	4d07      	ldr	r5, [pc, #28]	@ (800e860 <_read_r+0x20>)
 800e844:	4604      	mov	r4, r0
 800e846:	4608      	mov	r0, r1
 800e848:	4611      	mov	r1, r2
 800e84a:	2200      	movs	r2, #0
 800e84c:	602a      	str	r2, [r5, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	f7f3 f915 	bl	8001a7e <_read>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_read_r+0x1e>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_read_r+0x1e>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	20008434 	.word	0x20008434

0800e864 <_sbrk_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d06      	ldr	r5, [pc, #24]	@ (800e880 <_sbrk_r+0x1c>)
 800e868:	2300      	movs	r3, #0
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	f7f3 f972 	bl	8001b58 <_sbrk>
 800e874:	1c43      	adds	r3, r0, #1
 800e876:	d102      	bne.n	800e87e <_sbrk_r+0x1a>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	b103      	cbz	r3, 800e87e <_sbrk_r+0x1a>
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	bd38      	pop	{r3, r4, r5, pc}
 800e880:	20008434 	.word	0x20008434

0800e884 <_write_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4d07      	ldr	r5, [pc, #28]	@ (800e8a4 <_write_r+0x20>)
 800e888:	4604      	mov	r4, r0
 800e88a:	4608      	mov	r0, r1
 800e88c:	4611      	mov	r1, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	602a      	str	r2, [r5, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	f7f3 f910 	bl	8001ab8 <_write>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d102      	bne.n	800e8a2 <_write_r+0x1e>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	b103      	cbz	r3, 800e8a2 <_write_r+0x1e>
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	20008434 	.word	0x20008434

0800e8a8 <__errno>:
 800e8a8:	4b01      	ldr	r3, [pc, #4]	@ (800e8b0 <__errno+0x8>)
 800e8aa:	6818      	ldr	r0, [r3, #0]
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	20002840 	.word	0x20002840

0800e8b4 <__libc_init_array>:
 800e8b4:	b570      	push	{r4, r5, r6, lr}
 800e8b6:	4d0d      	ldr	r5, [pc, #52]	@ (800e8ec <__libc_init_array+0x38>)
 800e8b8:	4c0d      	ldr	r4, [pc, #52]	@ (800e8f0 <__libc_init_array+0x3c>)
 800e8ba:	1b64      	subs	r4, r4, r5
 800e8bc:	10a4      	asrs	r4, r4, #2
 800e8be:	2600      	movs	r6, #0
 800e8c0:	42a6      	cmp	r6, r4
 800e8c2:	d109      	bne.n	800e8d8 <__libc_init_array+0x24>
 800e8c4:	4d0b      	ldr	r5, [pc, #44]	@ (800e8f4 <__libc_init_array+0x40>)
 800e8c6:	4c0c      	ldr	r4, [pc, #48]	@ (800e8f8 <__libc_init_array+0x44>)
 800e8c8:	f001 ff9e 	bl	8010808 <_init>
 800e8cc:	1b64      	subs	r4, r4, r5
 800e8ce:	10a4      	asrs	r4, r4, #2
 800e8d0:	2600      	movs	r6, #0
 800e8d2:	42a6      	cmp	r6, r4
 800e8d4:	d105      	bne.n	800e8e2 <__libc_init_array+0x2e>
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8dc:	4798      	blx	r3
 800e8de:	3601      	adds	r6, #1
 800e8e0:	e7ee      	b.n	800e8c0 <__libc_init_array+0xc>
 800e8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8e6:	4798      	blx	r3
 800e8e8:	3601      	adds	r6, #1
 800e8ea:	e7f2      	b.n	800e8d2 <__libc_init_array+0x1e>
 800e8ec:	08010cd8 	.word	0x08010cd8
 800e8f0:	08010cd8 	.word	0x08010cd8
 800e8f4:	08010cd8 	.word	0x08010cd8
 800e8f8:	08010cdc 	.word	0x08010cdc

0800e8fc <__retarget_lock_init_recursive>:
 800e8fc:	4770      	bx	lr

0800e8fe <__retarget_lock_acquire_recursive>:
 800e8fe:	4770      	bx	lr

0800e900 <__retarget_lock_release_recursive>:
 800e900:	4770      	bx	lr

0800e902 <memcpy>:
 800e902:	440a      	add	r2, r1
 800e904:	4291      	cmp	r1, r2
 800e906:	f100 33ff 	add.w	r3, r0, #4294967295
 800e90a:	d100      	bne.n	800e90e <memcpy+0xc>
 800e90c:	4770      	bx	lr
 800e90e:	b510      	push	{r4, lr}
 800e910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e918:	4291      	cmp	r1, r2
 800e91a:	d1f9      	bne.n	800e910 <memcpy+0xe>
 800e91c:	bd10      	pop	{r4, pc}

0800e91e <quorem>:
 800e91e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e922:	6903      	ldr	r3, [r0, #16]
 800e924:	690c      	ldr	r4, [r1, #16]
 800e926:	42a3      	cmp	r3, r4
 800e928:	4607      	mov	r7, r0
 800e92a:	db7e      	blt.n	800ea2a <quorem+0x10c>
 800e92c:	3c01      	subs	r4, #1
 800e92e:	f101 0814 	add.w	r8, r1, #20
 800e932:	00a3      	lsls	r3, r4, #2
 800e934:	f100 0514 	add.w	r5, r0, #20
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e948:	3301      	adds	r3, #1
 800e94a:	429a      	cmp	r2, r3
 800e94c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e950:	fbb2 f6f3 	udiv	r6, r2, r3
 800e954:	d32e      	bcc.n	800e9b4 <quorem+0x96>
 800e956:	f04f 0a00 	mov.w	sl, #0
 800e95a:	46c4      	mov	ip, r8
 800e95c:	46ae      	mov	lr, r5
 800e95e:	46d3      	mov	fp, sl
 800e960:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e964:	b298      	uxth	r0, r3
 800e966:	fb06 a000 	mla	r0, r6, r0, sl
 800e96a:	0c02      	lsrs	r2, r0, #16
 800e96c:	0c1b      	lsrs	r3, r3, #16
 800e96e:	fb06 2303 	mla	r3, r6, r3, r2
 800e972:	f8de 2000 	ldr.w	r2, [lr]
 800e976:	b280      	uxth	r0, r0
 800e978:	b292      	uxth	r2, r2
 800e97a:	1a12      	subs	r2, r2, r0
 800e97c:	445a      	add	r2, fp
 800e97e:	f8de 0000 	ldr.w	r0, [lr]
 800e982:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e986:	b29b      	uxth	r3, r3
 800e988:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e98c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e990:	b292      	uxth	r2, r2
 800e992:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e996:	45e1      	cmp	r9, ip
 800e998:	f84e 2b04 	str.w	r2, [lr], #4
 800e99c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e9a0:	d2de      	bcs.n	800e960 <quorem+0x42>
 800e9a2:	9b00      	ldr	r3, [sp, #0]
 800e9a4:	58eb      	ldr	r3, [r5, r3]
 800e9a6:	b92b      	cbnz	r3, 800e9b4 <quorem+0x96>
 800e9a8:	9b01      	ldr	r3, [sp, #4]
 800e9aa:	3b04      	subs	r3, #4
 800e9ac:	429d      	cmp	r5, r3
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	d32f      	bcc.n	800ea12 <quorem+0xf4>
 800e9b2:	613c      	str	r4, [r7, #16]
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	f001 f8c3 	bl	800fb40 <__mcmp>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	db25      	blt.n	800ea0a <quorem+0xec>
 800e9be:	4629      	mov	r1, r5
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9c6:	f8d1 c000 	ldr.w	ip, [r1]
 800e9ca:	fa1f fe82 	uxth.w	lr, r2
 800e9ce:	fa1f f38c 	uxth.w	r3, ip
 800e9d2:	eba3 030e 	sub.w	r3, r3, lr
 800e9d6:	4403      	add	r3, r0
 800e9d8:	0c12      	lsrs	r2, r2, #16
 800e9da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e9de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9e8:	45c1      	cmp	r9, r8
 800e9ea:	f841 3b04 	str.w	r3, [r1], #4
 800e9ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e9f2:	d2e6      	bcs.n	800e9c2 <quorem+0xa4>
 800e9f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9fc:	b922      	cbnz	r2, 800ea08 <quorem+0xea>
 800e9fe:	3b04      	subs	r3, #4
 800ea00:	429d      	cmp	r5, r3
 800ea02:	461a      	mov	r2, r3
 800ea04:	d30b      	bcc.n	800ea1e <quorem+0x100>
 800ea06:	613c      	str	r4, [r7, #16]
 800ea08:	3601      	adds	r6, #1
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	b003      	add	sp, #12
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea12:	6812      	ldr	r2, [r2, #0]
 800ea14:	3b04      	subs	r3, #4
 800ea16:	2a00      	cmp	r2, #0
 800ea18:	d1cb      	bne.n	800e9b2 <quorem+0x94>
 800ea1a:	3c01      	subs	r4, #1
 800ea1c:	e7c6      	b.n	800e9ac <quorem+0x8e>
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	3b04      	subs	r3, #4
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	d1ef      	bne.n	800ea06 <quorem+0xe8>
 800ea26:	3c01      	subs	r4, #1
 800ea28:	e7ea      	b.n	800ea00 <quorem+0xe2>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	e7ee      	b.n	800ea0c <quorem+0xee>
	...

0800ea30 <_dtoa_r>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	69c7      	ldr	r7, [r0, #28]
 800ea36:	b099      	sub	sp, #100	@ 0x64
 800ea38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea3c:	ec55 4b10 	vmov	r4, r5, d0
 800ea40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ea42:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea44:	4683      	mov	fp, r0
 800ea46:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea4a:	b97f      	cbnz	r7, 800ea6c <_dtoa_r+0x3c>
 800ea4c:	2010      	movs	r0, #16
 800ea4e:	f7ff f837 	bl	800dac0 <malloc>
 800ea52:	4602      	mov	r2, r0
 800ea54:	f8cb 001c 	str.w	r0, [fp, #28]
 800ea58:	b920      	cbnz	r0, 800ea64 <_dtoa_r+0x34>
 800ea5a:	4ba7      	ldr	r3, [pc, #668]	@ (800ecf8 <_dtoa_r+0x2c8>)
 800ea5c:	21ef      	movs	r1, #239	@ 0xef
 800ea5e:	48a7      	ldr	r0, [pc, #668]	@ (800ecfc <_dtoa_r+0x2cc>)
 800ea60:	f001 fb94 	bl	801018c <__assert_func>
 800ea64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ea68:	6007      	str	r7, [r0, #0]
 800ea6a:	60c7      	str	r7, [r0, #12]
 800ea6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea70:	6819      	ldr	r1, [r3, #0]
 800ea72:	b159      	cbz	r1, 800ea8c <_dtoa_r+0x5c>
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	604a      	str	r2, [r1, #4]
 800ea78:	2301      	movs	r3, #1
 800ea7a:	4093      	lsls	r3, r2
 800ea7c:	608b      	str	r3, [r1, #8]
 800ea7e:	4658      	mov	r0, fp
 800ea80:	f000 fe24 	bl	800f6cc <_Bfree>
 800ea84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]
 800ea8c:	1e2b      	subs	r3, r5, #0
 800ea8e:	bfb9      	ittee	lt
 800ea90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ea94:	9303      	strlt	r3, [sp, #12]
 800ea96:	2300      	movge	r3, #0
 800ea98:	6033      	strge	r3, [r6, #0]
 800ea9a:	9f03      	ldr	r7, [sp, #12]
 800ea9c:	4b98      	ldr	r3, [pc, #608]	@ (800ed00 <_dtoa_r+0x2d0>)
 800ea9e:	bfbc      	itt	lt
 800eaa0:	2201      	movlt	r2, #1
 800eaa2:	6032      	strlt	r2, [r6, #0]
 800eaa4:	43bb      	bics	r3, r7
 800eaa6:	d112      	bne.n	800eace <_dtoa_r+0x9e>
 800eaa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eaaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eab4:	4323      	orrs	r3, r4
 800eab6:	f000 854d 	beq.w	800f554 <_dtoa_r+0xb24>
 800eaba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eabc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ed14 <_dtoa_r+0x2e4>
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 854f 	beq.w	800f564 <_dtoa_r+0xb34>
 800eac6:	f10a 0303 	add.w	r3, sl, #3
 800eaca:	f000 bd49 	b.w	800f560 <_dtoa_r+0xb30>
 800eace:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ead2:	2200      	movs	r2, #0
 800ead4:	ec51 0b17 	vmov	r0, r1, d7
 800ead8:	2300      	movs	r3, #0
 800eada:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eade:	f7f1 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800eae2:	4680      	mov	r8, r0
 800eae4:	b158      	cbz	r0, 800eafe <_dtoa_r+0xce>
 800eae6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eae8:	2301      	movs	r3, #1
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eaee:	b113      	cbz	r3, 800eaf6 <_dtoa_r+0xc6>
 800eaf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eaf2:	4b84      	ldr	r3, [pc, #528]	@ (800ed04 <_dtoa_r+0x2d4>)
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ed18 <_dtoa_r+0x2e8>
 800eafa:	f000 bd33 	b.w	800f564 <_dtoa_r+0xb34>
 800eafe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eb02:	aa16      	add	r2, sp, #88	@ 0x58
 800eb04:	a917      	add	r1, sp, #92	@ 0x5c
 800eb06:	4658      	mov	r0, fp
 800eb08:	f001 f8ca 	bl	800fca0 <__d2b>
 800eb0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eb10:	4681      	mov	r9, r0
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d077      	beq.n	800ec06 <_dtoa_r+0x1d6>
 800eb16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eb1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eb28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eb2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eb30:	4619      	mov	r1, r3
 800eb32:	2200      	movs	r2, #0
 800eb34:	4b74      	ldr	r3, [pc, #464]	@ (800ed08 <_dtoa_r+0x2d8>)
 800eb36:	f7f1 fba7 	bl	8000288 <__aeabi_dsub>
 800eb3a:	a369      	add	r3, pc, #420	@ (adr r3, 800ece0 <_dtoa_r+0x2b0>)
 800eb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb40:	f7f1 fd5a 	bl	80005f8 <__aeabi_dmul>
 800eb44:	a368      	add	r3, pc, #416	@ (adr r3, 800ece8 <_dtoa_r+0x2b8>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	f7f1 fb9f 	bl	800028c <__adddf3>
 800eb4e:	4604      	mov	r4, r0
 800eb50:	4630      	mov	r0, r6
 800eb52:	460d      	mov	r5, r1
 800eb54:	f7f1 fce6 	bl	8000524 <__aeabi_i2d>
 800eb58:	a365      	add	r3, pc, #404	@ (adr r3, 800ecf0 <_dtoa_r+0x2c0>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 fd4b 	bl	80005f8 <__aeabi_dmul>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4620      	mov	r0, r4
 800eb68:	4629      	mov	r1, r5
 800eb6a:	f7f1 fb8f 	bl	800028c <__adddf3>
 800eb6e:	4604      	mov	r4, r0
 800eb70:	460d      	mov	r5, r1
 800eb72:	f7f1 fff1 	bl	8000b58 <__aeabi_d2iz>
 800eb76:	2200      	movs	r2, #0
 800eb78:	4607      	mov	r7, r0
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	4629      	mov	r1, r5
 800eb80:	f7f1 ffac 	bl	8000adc <__aeabi_dcmplt>
 800eb84:	b140      	cbz	r0, 800eb98 <_dtoa_r+0x168>
 800eb86:	4638      	mov	r0, r7
 800eb88:	f7f1 fccc 	bl	8000524 <__aeabi_i2d>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	462b      	mov	r3, r5
 800eb90:	f7f1 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb94:	b900      	cbnz	r0, 800eb98 <_dtoa_r+0x168>
 800eb96:	3f01      	subs	r7, #1
 800eb98:	2f16      	cmp	r7, #22
 800eb9a:	d851      	bhi.n	800ec40 <_dtoa_r+0x210>
 800eb9c:	4b5b      	ldr	r3, [pc, #364]	@ (800ed0c <_dtoa_r+0x2dc>)
 800eb9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebaa:	f7f1 ff97 	bl	8000adc <__aeabi_dcmplt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d048      	beq.n	800ec44 <_dtoa_r+0x214>
 800ebb2:	3f01      	subs	r7, #1
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9312      	str	r3, [sp, #72]	@ 0x48
 800ebb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ebba:	1b9b      	subs	r3, r3, r6
 800ebbc:	1e5a      	subs	r2, r3, #1
 800ebbe:	bf44      	itt	mi
 800ebc0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ebc4:	2300      	movmi	r3, #0
 800ebc6:	9208      	str	r2, [sp, #32]
 800ebc8:	bf54      	ite	pl
 800ebca:	f04f 0800 	movpl.w	r8, #0
 800ebce:	9308      	strmi	r3, [sp, #32]
 800ebd0:	2f00      	cmp	r7, #0
 800ebd2:	db39      	blt.n	800ec48 <_dtoa_r+0x218>
 800ebd4:	9b08      	ldr	r3, [sp, #32]
 800ebd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ebd8:	443b      	add	r3, r7
 800ebda:	9308      	str	r3, [sp, #32]
 800ebdc:	2300      	movs	r3, #0
 800ebde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe2:	2b09      	cmp	r3, #9
 800ebe4:	d864      	bhi.n	800ecb0 <_dtoa_r+0x280>
 800ebe6:	2b05      	cmp	r3, #5
 800ebe8:	bfc4      	itt	gt
 800ebea:	3b04      	subgt	r3, #4
 800ebec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ebee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf0:	f1a3 0302 	sub.w	r3, r3, #2
 800ebf4:	bfcc      	ite	gt
 800ebf6:	2400      	movgt	r4, #0
 800ebf8:	2401      	movle	r4, #1
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d863      	bhi.n	800ecc6 <_dtoa_r+0x296>
 800ebfe:	e8df f003 	tbb	[pc, r3]
 800ec02:	372a      	.short	0x372a
 800ec04:	5535      	.short	0x5535
 800ec06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ec0a:	441e      	add	r6, r3
 800ec0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ec10:	2b20      	cmp	r3, #32
 800ec12:	bfc1      	itttt	gt
 800ec14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ec18:	409f      	lslgt	r7, r3
 800ec1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ec1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec22:	bfd6      	itet	le
 800ec24:	f1c3 0320 	rsble	r3, r3, #32
 800ec28:	ea47 0003 	orrgt.w	r0, r7, r3
 800ec2c:	fa04 f003 	lslle.w	r0, r4, r3
 800ec30:	f7f1 fc68 	bl	8000504 <__aeabi_ui2d>
 800ec34:	2201      	movs	r2, #1
 800ec36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ec3a:	3e01      	subs	r6, #1
 800ec3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ec3e:	e777      	b.n	800eb30 <_dtoa_r+0x100>
 800ec40:	2301      	movs	r3, #1
 800ec42:	e7b8      	b.n	800ebb6 <_dtoa_r+0x186>
 800ec44:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec46:	e7b7      	b.n	800ebb8 <_dtoa_r+0x188>
 800ec48:	427b      	negs	r3, r7
 800ec4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	eba8 0807 	sub.w	r8, r8, r7
 800ec52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec54:	e7c4      	b.n	800ebe0 <_dtoa_r+0x1b0>
 800ec56:	2300      	movs	r3, #0
 800ec58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	dc35      	bgt.n	800eccc <_dtoa_r+0x29c>
 800ec60:	2301      	movs	r3, #1
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	9307      	str	r3, [sp, #28]
 800ec66:	461a      	mov	r2, r3
 800ec68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec6a:	e00b      	b.n	800ec84 <_dtoa_r+0x254>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e7f3      	b.n	800ec58 <_dtoa_r+0x228>
 800ec70:	2300      	movs	r3, #0
 800ec72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec76:	18fb      	adds	r3, r7, r3
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	9307      	str	r3, [sp, #28]
 800ec80:	bfb8      	it	lt
 800ec82:	2301      	movlt	r3, #1
 800ec84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ec88:	2100      	movs	r1, #0
 800ec8a:	2204      	movs	r2, #4
 800ec8c:	f102 0514 	add.w	r5, r2, #20
 800ec90:	429d      	cmp	r5, r3
 800ec92:	d91f      	bls.n	800ecd4 <_dtoa_r+0x2a4>
 800ec94:	6041      	str	r1, [r0, #4]
 800ec96:	4658      	mov	r0, fp
 800ec98:	f000 fcd8 	bl	800f64c <_Balloc>
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d13c      	bne.n	800ed1c <_dtoa_r+0x2ec>
 800eca2:	4b1b      	ldr	r3, [pc, #108]	@ (800ed10 <_dtoa_r+0x2e0>)
 800eca4:	4602      	mov	r2, r0
 800eca6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ecaa:	e6d8      	b.n	800ea5e <_dtoa_r+0x2e>
 800ecac:	2301      	movs	r3, #1
 800ecae:	e7e0      	b.n	800ec72 <_dtoa_r+0x242>
 800ecb0:	2401      	movs	r4, #1
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ecb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	9307      	str	r3, [sp, #28]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2312      	movs	r3, #18
 800ecc4:	e7d0      	b.n	800ec68 <_dtoa_r+0x238>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecca:	e7f5      	b.n	800ecb8 <_dtoa_r+0x288>
 800eccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	9307      	str	r3, [sp, #28]
 800ecd2:	e7d7      	b.n	800ec84 <_dtoa_r+0x254>
 800ecd4:	3101      	adds	r1, #1
 800ecd6:	0052      	lsls	r2, r2, #1
 800ecd8:	e7d8      	b.n	800ec8c <_dtoa_r+0x25c>
 800ecda:	bf00      	nop
 800ecdc:	f3af 8000 	nop.w
 800ece0:	636f4361 	.word	0x636f4361
 800ece4:	3fd287a7 	.word	0x3fd287a7
 800ece8:	8b60c8b3 	.word	0x8b60c8b3
 800ecec:	3fc68a28 	.word	0x3fc68a28
 800ecf0:	509f79fb 	.word	0x509f79fb
 800ecf4:	3fd34413 	.word	0x3fd34413
 800ecf8:	0801099d 	.word	0x0801099d
 800ecfc:	080109b4 	.word	0x080109b4
 800ed00:	7ff00000 	.word	0x7ff00000
 800ed04:	0801096d 	.word	0x0801096d
 800ed08:	3ff80000 	.word	0x3ff80000
 800ed0c:	08010ab0 	.word	0x08010ab0
 800ed10:	08010a0c 	.word	0x08010a0c
 800ed14:	08010999 	.word	0x08010999
 800ed18:	0801096c 	.word	0x0801096c
 800ed1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed20:	6018      	str	r0, [r3, #0]
 800ed22:	9b07      	ldr	r3, [sp, #28]
 800ed24:	2b0e      	cmp	r3, #14
 800ed26:	f200 80a4 	bhi.w	800ee72 <_dtoa_r+0x442>
 800ed2a:	2c00      	cmp	r4, #0
 800ed2c:	f000 80a1 	beq.w	800ee72 <_dtoa_r+0x442>
 800ed30:	2f00      	cmp	r7, #0
 800ed32:	dd33      	ble.n	800ed9c <_dtoa_r+0x36c>
 800ed34:	4bad      	ldr	r3, [pc, #692]	@ (800efec <_dtoa_r+0x5bc>)
 800ed36:	f007 020f 	and.w	r2, r7, #15
 800ed3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed3e:	ed93 7b00 	vldr	d7, [r3]
 800ed42:	05f8      	lsls	r0, r7, #23
 800ed44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ed48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ed4c:	d516      	bpl.n	800ed7c <_dtoa_r+0x34c>
 800ed4e:	4ba8      	ldr	r3, [pc, #672]	@ (800eff0 <_dtoa_r+0x5c0>)
 800ed50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed58:	f7f1 fd78 	bl	800084c <__aeabi_ddiv>
 800ed5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed60:	f004 040f 	and.w	r4, r4, #15
 800ed64:	2603      	movs	r6, #3
 800ed66:	4da2      	ldr	r5, [pc, #648]	@ (800eff0 <_dtoa_r+0x5c0>)
 800ed68:	b954      	cbnz	r4, 800ed80 <_dtoa_r+0x350>
 800ed6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed72:	f7f1 fd6b 	bl	800084c <__aeabi_ddiv>
 800ed76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed7a:	e028      	b.n	800edce <_dtoa_r+0x39e>
 800ed7c:	2602      	movs	r6, #2
 800ed7e:	e7f2      	b.n	800ed66 <_dtoa_r+0x336>
 800ed80:	07e1      	lsls	r1, r4, #31
 800ed82:	d508      	bpl.n	800ed96 <_dtoa_r+0x366>
 800ed84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed8c:	f7f1 fc34 	bl	80005f8 <__aeabi_dmul>
 800ed90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed94:	3601      	adds	r6, #1
 800ed96:	1064      	asrs	r4, r4, #1
 800ed98:	3508      	adds	r5, #8
 800ed9a:	e7e5      	b.n	800ed68 <_dtoa_r+0x338>
 800ed9c:	f000 80d2 	beq.w	800ef44 <_dtoa_r+0x514>
 800eda0:	427c      	negs	r4, r7
 800eda2:	4b92      	ldr	r3, [pc, #584]	@ (800efec <_dtoa_r+0x5bc>)
 800eda4:	4d92      	ldr	r5, [pc, #584]	@ (800eff0 <_dtoa_r+0x5c0>)
 800eda6:	f004 020f 	and.w	r2, r4, #15
 800edaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edb6:	f7f1 fc1f 	bl	80005f8 <__aeabi_dmul>
 800edba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edbe:	1124      	asrs	r4, r4, #4
 800edc0:	2300      	movs	r3, #0
 800edc2:	2602      	movs	r6, #2
 800edc4:	2c00      	cmp	r4, #0
 800edc6:	f040 80b2 	bne.w	800ef2e <_dtoa_r+0x4fe>
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1d3      	bne.n	800ed76 <_dtoa_r+0x346>
 800edce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 80b7 	beq.w	800ef48 <_dtoa_r+0x518>
 800edda:	4b86      	ldr	r3, [pc, #536]	@ (800eff4 <_dtoa_r+0x5c4>)
 800eddc:	2200      	movs	r2, #0
 800edde:	4620      	mov	r0, r4
 800ede0:	4629      	mov	r1, r5
 800ede2:	f7f1 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800ede6:	2800      	cmp	r0, #0
 800ede8:	f000 80ae 	beq.w	800ef48 <_dtoa_r+0x518>
 800edec:	9b07      	ldr	r3, [sp, #28]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f000 80aa 	beq.w	800ef48 <_dtoa_r+0x518>
 800edf4:	9b00      	ldr	r3, [sp, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	dd37      	ble.n	800ee6a <_dtoa_r+0x43a>
 800edfa:	1e7b      	subs	r3, r7, #1
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	4620      	mov	r0, r4
 800ee00:	4b7d      	ldr	r3, [pc, #500]	@ (800eff8 <_dtoa_r+0x5c8>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	4629      	mov	r1, r5
 800ee06:	f7f1 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ee0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee0e:	9c00      	ldr	r4, [sp, #0]
 800ee10:	3601      	adds	r6, #1
 800ee12:	4630      	mov	r0, r6
 800ee14:	f7f1 fb86 	bl	8000524 <__aeabi_i2d>
 800ee18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee1c:	f7f1 fbec 	bl	80005f8 <__aeabi_dmul>
 800ee20:	4b76      	ldr	r3, [pc, #472]	@ (800effc <_dtoa_r+0x5cc>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	f7f1 fa32 	bl	800028c <__adddf3>
 800ee28:	4605      	mov	r5, r0
 800ee2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ee2e:	2c00      	cmp	r4, #0
 800ee30:	f040 808d 	bne.w	800ef4e <_dtoa_r+0x51e>
 800ee34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee38:	4b71      	ldr	r3, [pc, #452]	@ (800f000 <_dtoa_r+0x5d0>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f7f1 fa24 	bl	8000288 <__aeabi_dsub>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee48:	462a      	mov	r2, r5
 800ee4a:	4633      	mov	r3, r6
 800ee4c:	f7f1 fe64 	bl	8000b18 <__aeabi_dcmpgt>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	f040 828b 	bne.w	800f36c <_dtoa_r+0x93c>
 800ee56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee5a:	462a      	mov	r2, r5
 800ee5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ee60:	f7f1 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f040 8128 	bne.w	800f0ba <_dtoa_r+0x68a>
 800ee6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ee6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ee72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f2c0 815a 	blt.w	800f12e <_dtoa_r+0x6fe>
 800ee7a:	2f0e      	cmp	r7, #14
 800ee7c:	f300 8157 	bgt.w	800f12e <_dtoa_r+0x6fe>
 800ee80:	4b5a      	ldr	r3, [pc, #360]	@ (800efec <_dtoa_r+0x5bc>)
 800ee82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee86:	ed93 7b00 	vldr	d7, [r3]
 800ee8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	ed8d 7b00 	vstr	d7, [sp]
 800ee92:	da03      	bge.n	800ee9c <_dtoa_r+0x46c>
 800ee94:	9b07      	ldr	r3, [sp, #28]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f340 8101 	ble.w	800f09e <_dtoa_r+0x66e>
 800ee9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eea0:	4656      	mov	r6, sl
 800eea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eea6:	4620      	mov	r0, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f7f1 fccf 	bl	800084c <__aeabi_ddiv>
 800eeae:	f7f1 fe53 	bl	8000b58 <__aeabi_d2iz>
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	f7f1 fb36 	bl	8000524 <__aeabi_i2d>
 800eeb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	4602      	mov	r2, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4620      	mov	r0, r4
 800eec6:	4629      	mov	r1, r5
 800eec8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eecc:	f7f1 f9dc 	bl	8000288 <__aeabi_dsub>
 800eed0:	f806 4b01 	strb.w	r4, [r6], #1
 800eed4:	9d07      	ldr	r5, [sp, #28]
 800eed6:	eba6 040a 	sub.w	r4, r6, sl
 800eeda:	42a5      	cmp	r5, r4
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	f040 8117 	bne.w	800f112 <_dtoa_r+0x6e2>
 800eee4:	f7f1 f9d2 	bl	800028c <__adddf3>
 800eee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeec:	4604      	mov	r4, r0
 800eeee:	460d      	mov	r5, r1
 800eef0:	f7f1 fe12 	bl	8000b18 <__aeabi_dcmpgt>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f040 80f9 	bne.w	800f0ec <_dtoa_r+0x6bc>
 800eefa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eefe:	4620      	mov	r0, r4
 800ef00:	4629      	mov	r1, r5
 800ef02:	f7f1 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef06:	b118      	cbz	r0, 800ef10 <_dtoa_r+0x4e0>
 800ef08:	f018 0f01 	tst.w	r8, #1
 800ef0c:	f040 80ee 	bne.w	800f0ec <_dtoa_r+0x6bc>
 800ef10:	4649      	mov	r1, r9
 800ef12:	4658      	mov	r0, fp
 800ef14:	f000 fbda 	bl	800f6cc <_Bfree>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	7033      	strb	r3, [r6, #0]
 800ef1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ef1e:	3701      	adds	r7, #1
 800ef20:	601f      	str	r7, [r3, #0]
 800ef22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f000 831d 	beq.w	800f564 <_dtoa_r+0xb34>
 800ef2a:	601e      	str	r6, [r3, #0]
 800ef2c:	e31a      	b.n	800f564 <_dtoa_r+0xb34>
 800ef2e:	07e2      	lsls	r2, r4, #31
 800ef30:	d505      	bpl.n	800ef3e <_dtoa_r+0x50e>
 800ef32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef36:	f7f1 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ef3a:	3601      	adds	r6, #1
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	1064      	asrs	r4, r4, #1
 800ef40:	3508      	adds	r5, #8
 800ef42:	e73f      	b.n	800edc4 <_dtoa_r+0x394>
 800ef44:	2602      	movs	r6, #2
 800ef46:	e742      	b.n	800edce <_dtoa_r+0x39e>
 800ef48:	9c07      	ldr	r4, [sp, #28]
 800ef4a:	9704      	str	r7, [sp, #16]
 800ef4c:	e761      	b.n	800ee12 <_dtoa_r+0x3e2>
 800ef4e:	4b27      	ldr	r3, [pc, #156]	@ (800efec <_dtoa_r+0x5bc>)
 800ef50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef5a:	4454      	add	r4, sl
 800ef5c:	2900      	cmp	r1, #0
 800ef5e:	d053      	beq.n	800f008 <_dtoa_r+0x5d8>
 800ef60:	4928      	ldr	r1, [pc, #160]	@ (800f004 <_dtoa_r+0x5d4>)
 800ef62:	2000      	movs	r0, #0
 800ef64:	f7f1 fc72 	bl	800084c <__aeabi_ddiv>
 800ef68:	4633      	mov	r3, r6
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	f7f1 f98c 	bl	8000288 <__aeabi_dsub>
 800ef70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef74:	4656      	mov	r6, sl
 800ef76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef7a:	f7f1 fded 	bl	8000b58 <__aeabi_d2iz>
 800ef7e:	4605      	mov	r5, r0
 800ef80:	f7f1 fad0 	bl	8000524 <__aeabi_i2d>
 800ef84:	4602      	mov	r2, r0
 800ef86:	460b      	mov	r3, r1
 800ef88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef8c:	f7f1 f97c 	bl	8000288 <__aeabi_dsub>
 800ef90:	3530      	adds	r5, #48	@ 0x30
 800ef92:	4602      	mov	r2, r0
 800ef94:	460b      	mov	r3, r1
 800ef96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef9a:	f806 5b01 	strb.w	r5, [r6], #1
 800ef9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efa2:	f7f1 fd9b 	bl	8000adc <__aeabi_dcmplt>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d171      	bne.n	800f08e <_dtoa_r+0x65e>
 800efaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efae:	4911      	ldr	r1, [pc, #68]	@ (800eff4 <_dtoa_r+0x5c4>)
 800efb0:	2000      	movs	r0, #0
 800efb2:	f7f1 f969 	bl	8000288 <__aeabi_dsub>
 800efb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800efba:	f7f1 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	f040 8095 	bne.w	800f0ee <_dtoa_r+0x6be>
 800efc4:	42a6      	cmp	r6, r4
 800efc6:	f43f af50 	beq.w	800ee6a <_dtoa_r+0x43a>
 800efca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800efce:	4b0a      	ldr	r3, [pc, #40]	@ (800eff8 <_dtoa_r+0x5c8>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	f7f1 fb11 	bl	80005f8 <__aeabi_dmul>
 800efd6:	4b08      	ldr	r3, [pc, #32]	@ (800eff8 <_dtoa_r+0x5c8>)
 800efd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800efdc:	2200      	movs	r2, #0
 800efde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efe2:	f7f1 fb09 	bl	80005f8 <__aeabi_dmul>
 800efe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efea:	e7c4      	b.n	800ef76 <_dtoa_r+0x546>
 800efec:	08010ab0 	.word	0x08010ab0
 800eff0:	08010a88 	.word	0x08010a88
 800eff4:	3ff00000 	.word	0x3ff00000
 800eff8:	40240000 	.word	0x40240000
 800effc:	401c0000 	.word	0x401c0000
 800f000:	40140000 	.word	0x40140000
 800f004:	3fe00000 	.word	0x3fe00000
 800f008:	4631      	mov	r1, r6
 800f00a:	4628      	mov	r0, r5
 800f00c:	f7f1 faf4 	bl	80005f8 <__aeabi_dmul>
 800f010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f014:	9415      	str	r4, [sp, #84]	@ 0x54
 800f016:	4656      	mov	r6, sl
 800f018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f01c:	f7f1 fd9c 	bl	8000b58 <__aeabi_d2iz>
 800f020:	4605      	mov	r5, r0
 800f022:	f7f1 fa7f 	bl	8000524 <__aeabi_i2d>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f02e:	f7f1 f92b 	bl	8000288 <__aeabi_dsub>
 800f032:	3530      	adds	r5, #48	@ 0x30
 800f034:	f806 5b01 	strb.w	r5, [r6], #1
 800f038:	4602      	mov	r2, r0
 800f03a:	460b      	mov	r3, r1
 800f03c:	42a6      	cmp	r6, r4
 800f03e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f042:	f04f 0200 	mov.w	r2, #0
 800f046:	d124      	bne.n	800f092 <_dtoa_r+0x662>
 800f048:	4bac      	ldr	r3, [pc, #688]	@ (800f2fc <_dtoa_r+0x8cc>)
 800f04a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f04e:	f7f1 f91d 	bl	800028c <__adddf3>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f05a:	f7f1 fd5d 	bl	8000b18 <__aeabi_dcmpgt>
 800f05e:	2800      	cmp	r0, #0
 800f060:	d145      	bne.n	800f0ee <_dtoa_r+0x6be>
 800f062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f066:	49a5      	ldr	r1, [pc, #660]	@ (800f2fc <_dtoa_r+0x8cc>)
 800f068:	2000      	movs	r0, #0
 800f06a:	f7f1 f90d 	bl	8000288 <__aeabi_dsub>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f076:	f7f1 fd31 	bl	8000adc <__aeabi_dcmplt>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	f43f aef5 	beq.w	800ee6a <_dtoa_r+0x43a>
 800f080:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f082:	1e73      	subs	r3, r6, #1
 800f084:	9315      	str	r3, [sp, #84]	@ 0x54
 800f086:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f08a:	2b30      	cmp	r3, #48	@ 0x30
 800f08c:	d0f8      	beq.n	800f080 <_dtoa_r+0x650>
 800f08e:	9f04      	ldr	r7, [sp, #16]
 800f090:	e73e      	b.n	800ef10 <_dtoa_r+0x4e0>
 800f092:	4b9b      	ldr	r3, [pc, #620]	@ (800f300 <_dtoa_r+0x8d0>)
 800f094:	f7f1 fab0 	bl	80005f8 <__aeabi_dmul>
 800f098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f09c:	e7bc      	b.n	800f018 <_dtoa_r+0x5e8>
 800f09e:	d10c      	bne.n	800f0ba <_dtoa_r+0x68a>
 800f0a0:	4b98      	ldr	r3, [pc, #608]	@ (800f304 <_dtoa_r+0x8d4>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0a8:	f7f1 faa6 	bl	80005f8 <__aeabi_dmul>
 800f0ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0b0:	f7f1 fd28 	bl	8000b04 <__aeabi_dcmpge>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f000 8157 	beq.w	800f368 <_dtoa_r+0x938>
 800f0ba:	2400      	movs	r4, #0
 800f0bc:	4625      	mov	r5, r4
 800f0be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0c0:	43db      	mvns	r3, r3
 800f0c2:	9304      	str	r3, [sp, #16]
 800f0c4:	4656      	mov	r6, sl
 800f0c6:	2700      	movs	r7, #0
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4658      	mov	r0, fp
 800f0cc:	f000 fafe 	bl	800f6cc <_Bfree>
 800f0d0:	2d00      	cmp	r5, #0
 800f0d2:	d0dc      	beq.n	800f08e <_dtoa_r+0x65e>
 800f0d4:	b12f      	cbz	r7, 800f0e2 <_dtoa_r+0x6b2>
 800f0d6:	42af      	cmp	r7, r5
 800f0d8:	d003      	beq.n	800f0e2 <_dtoa_r+0x6b2>
 800f0da:	4639      	mov	r1, r7
 800f0dc:	4658      	mov	r0, fp
 800f0de:	f000 faf5 	bl	800f6cc <_Bfree>
 800f0e2:	4629      	mov	r1, r5
 800f0e4:	4658      	mov	r0, fp
 800f0e6:	f000 faf1 	bl	800f6cc <_Bfree>
 800f0ea:	e7d0      	b.n	800f08e <_dtoa_r+0x65e>
 800f0ec:	9704      	str	r7, [sp, #16]
 800f0ee:	4633      	mov	r3, r6
 800f0f0:	461e      	mov	r6, r3
 800f0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0f6:	2a39      	cmp	r2, #57	@ 0x39
 800f0f8:	d107      	bne.n	800f10a <_dtoa_r+0x6da>
 800f0fa:	459a      	cmp	sl, r3
 800f0fc:	d1f8      	bne.n	800f0f0 <_dtoa_r+0x6c0>
 800f0fe:	9a04      	ldr	r2, [sp, #16]
 800f100:	3201      	adds	r2, #1
 800f102:	9204      	str	r2, [sp, #16]
 800f104:	2230      	movs	r2, #48	@ 0x30
 800f106:	f88a 2000 	strb.w	r2, [sl]
 800f10a:	781a      	ldrb	r2, [r3, #0]
 800f10c:	3201      	adds	r2, #1
 800f10e:	701a      	strb	r2, [r3, #0]
 800f110:	e7bd      	b.n	800f08e <_dtoa_r+0x65e>
 800f112:	4b7b      	ldr	r3, [pc, #492]	@ (800f300 <_dtoa_r+0x8d0>)
 800f114:	2200      	movs	r2, #0
 800f116:	f7f1 fa6f 	bl	80005f8 <__aeabi_dmul>
 800f11a:	2200      	movs	r2, #0
 800f11c:	2300      	movs	r3, #0
 800f11e:	4604      	mov	r4, r0
 800f120:	460d      	mov	r5, r1
 800f122:	f7f1 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800f126:	2800      	cmp	r0, #0
 800f128:	f43f aebb 	beq.w	800eea2 <_dtoa_r+0x472>
 800f12c:	e6f0      	b.n	800ef10 <_dtoa_r+0x4e0>
 800f12e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f130:	2a00      	cmp	r2, #0
 800f132:	f000 80db 	beq.w	800f2ec <_dtoa_r+0x8bc>
 800f136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f138:	2a01      	cmp	r2, #1
 800f13a:	f300 80bf 	bgt.w	800f2bc <_dtoa_r+0x88c>
 800f13e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f140:	2a00      	cmp	r2, #0
 800f142:	f000 80b7 	beq.w	800f2b4 <_dtoa_r+0x884>
 800f146:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f14a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f14c:	4646      	mov	r6, r8
 800f14e:	9a08      	ldr	r2, [sp, #32]
 800f150:	2101      	movs	r1, #1
 800f152:	441a      	add	r2, r3
 800f154:	4658      	mov	r0, fp
 800f156:	4498      	add	r8, r3
 800f158:	9208      	str	r2, [sp, #32]
 800f15a:	f000 fb6b 	bl	800f834 <__i2b>
 800f15e:	4605      	mov	r5, r0
 800f160:	b15e      	cbz	r6, 800f17a <_dtoa_r+0x74a>
 800f162:	9b08      	ldr	r3, [sp, #32]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd08      	ble.n	800f17a <_dtoa_r+0x74a>
 800f168:	42b3      	cmp	r3, r6
 800f16a:	9a08      	ldr	r2, [sp, #32]
 800f16c:	bfa8      	it	ge
 800f16e:	4633      	movge	r3, r6
 800f170:	eba8 0803 	sub.w	r8, r8, r3
 800f174:	1af6      	subs	r6, r6, r3
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	9308      	str	r3, [sp, #32]
 800f17a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f17c:	b1f3      	cbz	r3, 800f1bc <_dtoa_r+0x78c>
 800f17e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 80b7 	beq.w	800f2f4 <_dtoa_r+0x8c4>
 800f186:	b18c      	cbz	r4, 800f1ac <_dtoa_r+0x77c>
 800f188:	4629      	mov	r1, r5
 800f18a:	4622      	mov	r2, r4
 800f18c:	4658      	mov	r0, fp
 800f18e:	f000 fc11 	bl	800f9b4 <__pow5mult>
 800f192:	464a      	mov	r2, r9
 800f194:	4601      	mov	r1, r0
 800f196:	4605      	mov	r5, r0
 800f198:	4658      	mov	r0, fp
 800f19a:	f000 fb61 	bl	800f860 <__multiply>
 800f19e:	4649      	mov	r1, r9
 800f1a0:	9004      	str	r0, [sp, #16]
 800f1a2:	4658      	mov	r0, fp
 800f1a4:	f000 fa92 	bl	800f6cc <_Bfree>
 800f1a8:	9b04      	ldr	r3, [sp, #16]
 800f1aa:	4699      	mov	r9, r3
 800f1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ae:	1b1a      	subs	r2, r3, r4
 800f1b0:	d004      	beq.n	800f1bc <_dtoa_r+0x78c>
 800f1b2:	4649      	mov	r1, r9
 800f1b4:	4658      	mov	r0, fp
 800f1b6:	f000 fbfd 	bl	800f9b4 <__pow5mult>
 800f1ba:	4681      	mov	r9, r0
 800f1bc:	2101      	movs	r1, #1
 800f1be:	4658      	mov	r0, fp
 800f1c0:	f000 fb38 	bl	800f834 <__i2b>
 800f1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 81cf 	beq.w	800f56c <_dtoa_r+0xb3c>
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	4601      	mov	r1, r0
 800f1d2:	4658      	mov	r0, fp
 800f1d4:	f000 fbee 	bl	800f9b4 <__pow5mult>
 800f1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	4604      	mov	r4, r0
 800f1de:	f300 8095 	bgt.w	800f30c <_dtoa_r+0x8dc>
 800f1e2:	9b02      	ldr	r3, [sp, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f040 8087 	bne.w	800f2f8 <_dtoa_r+0x8c8>
 800f1ea:	9b03      	ldr	r3, [sp, #12]
 800f1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f040 8089 	bne.w	800f308 <_dtoa_r+0x8d8>
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1fc:	0d1b      	lsrs	r3, r3, #20
 800f1fe:	051b      	lsls	r3, r3, #20
 800f200:	b12b      	cbz	r3, 800f20e <_dtoa_r+0x7de>
 800f202:	9b08      	ldr	r3, [sp, #32]
 800f204:	3301      	adds	r3, #1
 800f206:	9308      	str	r3, [sp, #32]
 800f208:	f108 0801 	add.w	r8, r8, #1
 800f20c:	2301      	movs	r3, #1
 800f20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 81b0 	beq.w	800f578 <_dtoa_r+0xb48>
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f21e:	6918      	ldr	r0, [r3, #16]
 800f220:	f000 fabc 	bl	800f79c <__hi0bits>
 800f224:	f1c0 0020 	rsb	r0, r0, #32
 800f228:	9b08      	ldr	r3, [sp, #32]
 800f22a:	4418      	add	r0, r3
 800f22c:	f010 001f 	ands.w	r0, r0, #31
 800f230:	d077      	beq.n	800f322 <_dtoa_r+0x8f2>
 800f232:	f1c0 0320 	rsb	r3, r0, #32
 800f236:	2b04      	cmp	r3, #4
 800f238:	dd6b      	ble.n	800f312 <_dtoa_r+0x8e2>
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	f1c0 001c 	rsb	r0, r0, #28
 800f240:	4403      	add	r3, r0
 800f242:	4480      	add	r8, r0
 800f244:	4406      	add	r6, r0
 800f246:	9308      	str	r3, [sp, #32]
 800f248:	f1b8 0f00 	cmp.w	r8, #0
 800f24c:	dd05      	ble.n	800f25a <_dtoa_r+0x82a>
 800f24e:	4649      	mov	r1, r9
 800f250:	4642      	mov	r2, r8
 800f252:	4658      	mov	r0, fp
 800f254:	f000 fc08 	bl	800fa68 <__lshift>
 800f258:	4681      	mov	r9, r0
 800f25a:	9b08      	ldr	r3, [sp, #32]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	dd05      	ble.n	800f26c <_dtoa_r+0x83c>
 800f260:	4621      	mov	r1, r4
 800f262:	461a      	mov	r2, r3
 800f264:	4658      	mov	r0, fp
 800f266:	f000 fbff 	bl	800fa68 <__lshift>
 800f26a:	4604      	mov	r4, r0
 800f26c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d059      	beq.n	800f326 <_dtoa_r+0x8f6>
 800f272:	4621      	mov	r1, r4
 800f274:	4648      	mov	r0, r9
 800f276:	f000 fc63 	bl	800fb40 <__mcmp>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	da53      	bge.n	800f326 <_dtoa_r+0x8f6>
 800f27e:	1e7b      	subs	r3, r7, #1
 800f280:	9304      	str	r3, [sp, #16]
 800f282:	4649      	mov	r1, r9
 800f284:	2300      	movs	r3, #0
 800f286:	220a      	movs	r2, #10
 800f288:	4658      	mov	r0, fp
 800f28a:	f000 fa41 	bl	800f710 <__multadd>
 800f28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f290:	4681      	mov	r9, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8172 	beq.w	800f57c <_dtoa_r+0xb4c>
 800f298:	2300      	movs	r3, #0
 800f29a:	4629      	mov	r1, r5
 800f29c:	220a      	movs	r2, #10
 800f29e:	4658      	mov	r0, fp
 800f2a0:	f000 fa36 	bl	800f710 <__multadd>
 800f2a4:	9b00      	ldr	r3, [sp, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	4605      	mov	r5, r0
 800f2aa:	dc67      	bgt.n	800f37c <_dtoa_r+0x94c>
 800f2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	dc41      	bgt.n	800f336 <_dtoa_r+0x906>
 800f2b2:	e063      	b.n	800f37c <_dtoa_r+0x94c>
 800f2b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f2b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f2ba:	e746      	b.n	800f14a <_dtoa_r+0x71a>
 800f2bc:	9b07      	ldr	r3, [sp, #28]
 800f2be:	1e5c      	subs	r4, r3, #1
 800f2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	bfbf      	itttt	lt
 800f2c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f2c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f2ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f2cc:	1ae3      	sublt	r3, r4, r3
 800f2ce:	bfb4      	ite	lt
 800f2d0:	18d2      	addlt	r2, r2, r3
 800f2d2:	1b1c      	subge	r4, r3, r4
 800f2d4:	9b07      	ldr	r3, [sp, #28]
 800f2d6:	bfbc      	itt	lt
 800f2d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f2da:	2400      	movlt	r4, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfb5      	itete	lt
 800f2e0:	eba8 0603 	sublt.w	r6, r8, r3
 800f2e4:	9b07      	ldrge	r3, [sp, #28]
 800f2e6:	2300      	movlt	r3, #0
 800f2e8:	4646      	movge	r6, r8
 800f2ea:	e730      	b.n	800f14e <_dtoa_r+0x71e>
 800f2ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f2ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f2f0:	4646      	mov	r6, r8
 800f2f2:	e735      	b.n	800f160 <_dtoa_r+0x730>
 800f2f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2f6:	e75c      	b.n	800f1b2 <_dtoa_r+0x782>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	e788      	b.n	800f20e <_dtoa_r+0x7de>
 800f2fc:	3fe00000 	.word	0x3fe00000
 800f300:	40240000 	.word	0x40240000
 800f304:	40140000 	.word	0x40140000
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	e780      	b.n	800f20e <_dtoa_r+0x7de>
 800f30c:	2300      	movs	r3, #0
 800f30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f310:	e782      	b.n	800f218 <_dtoa_r+0x7e8>
 800f312:	d099      	beq.n	800f248 <_dtoa_r+0x818>
 800f314:	9a08      	ldr	r2, [sp, #32]
 800f316:	331c      	adds	r3, #28
 800f318:	441a      	add	r2, r3
 800f31a:	4498      	add	r8, r3
 800f31c:	441e      	add	r6, r3
 800f31e:	9208      	str	r2, [sp, #32]
 800f320:	e792      	b.n	800f248 <_dtoa_r+0x818>
 800f322:	4603      	mov	r3, r0
 800f324:	e7f6      	b.n	800f314 <_dtoa_r+0x8e4>
 800f326:	9b07      	ldr	r3, [sp, #28]
 800f328:	9704      	str	r7, [sp, #16]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dc20      	bgt.n	800f370 <_dtoa_r+0x940>
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f332:	2b02      	cmp	r3, #2
 800f334:	dd1e      	ble.n	800f374 <_dtoa_r+0x944>
 800f336:	9b00      	ldr	r3, [sp, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f47f aec0 	bne.w	800f0be <_dtoa_r+0x68e>
 800f33e:	4621      	mov	r1, r4
 800f340:	2205      	movs	r2, #5
 800f342:	4658      	mov	r0, fp
 800f344:	f000 f9e4 	bl	800f710 <__multadd>
 800f348:	4601      	mov	r1, r0
 800f34a:	4604      	mov	r4, r0
 800f34c:	4648      	mov	r0, r9
 800f34e:	f000 fbf7 	bl	800fb40 <__mcmp>
 800f352:	2800      	cmp	r0, #0
 800f354:	f77f aeb3 	ble.w	800f0be <_dtoa_r+0x68e>
 800f358:	4656      	mov	r6, sl
 800f35a:	2331      	movs	r3, #49	@ 0x31
 800f35c:	f806 3b01 	strb.w	r3, [r6], #1
 800f360:	9b04      	ldr	r3, [sp, #16]
 800f362:	3301      	adds	r3, #1
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	e6ae      	b.n	800f0c6 <_dtoa_r+0x696>
 800f368:	9c07      	ldr	r4, [sp, #28]
 800f36a:	9704      	str	r7, [sp, #16]
 800f36c:	4625      	mov	r5, r4
 800f36e:	e7f3      	b.n	800f358 <_dtoa_r+0x928>
 800f370:	9b07      	ldr	r3, [sp, #28]
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 8104 	beq.w	800f584 <_dtoa_r+0xb54>
 800f37c:	2e00      	cmp	r6, #0
 800f37e:	dd05      	ble.n	800f38c <_dtoa_r+0x95c>
 800f380:	4629      	mov	r1, r5
 800f382:	4632      	mov	r2, r6
 800f384:	4658      	mov	r0, fp
 800f386:	f000 fb6f 	bl	800fa68 <__lshift>
 800f38a:	4605      	mov	r5, r0
 800f38c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d05a      	beq.n	800f448 <_dtoa_r+0xa18>
 800f392:	6869      	ldr	r1, [r5, #4]
 800f394:	4658      	mov	r0, fp
 800f396:	f000 f959 	bl	800f64c <_Balloc>
 800f39a:	4606      	mov	r6, r0
 800f39c:	b928      	cbnz	r0, 800f3aa <_dtoa_r+0x97a>
 800f39e:	4b84      	ldr	r3, [pc, #528]	@ (800f5b0 <_dtoa_r+0xb80>)
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f3a6:	f7ff bb5a 	b.w	800ea5e <_dtoa_r+0x2e>
 800f3aa:	692a      	ldr	r2, [r5, #16]
 800f3ac:	3202      	adds	r2, #2
 800f3ae:	0092      	lsls	r2, r2, #2
 800f3b0:	f105 010c 	add.w	r1, r5, #12
 800f3b4:	300c      	adds	r0, #12
 800f3b6:	f7ff faa4 	bl	800e902 <memcpy>
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4658      	mov	r0, fp
 800f3c0:	f000 fb52 	bl	800fa68 <__lshift>
 800f3c4:	f10a 0301 	add.w	r3, sl, #1
 800f3c8:	9307      	str	r3, [sp, #28]
 800f3ca:	9b00      	ldr	r3, [sp, #0]
 800f3cc:	4453      	add	r3, sl
 800f3ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	462f      	mov	r7, r5
 800f3d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3da:	4605      	mov	r5, r0
 800f3dc:	9b07      	ldr	r3, [sp, #28]
 800f3de:	4621      	mov	r1, r4
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	4648      	mov	r0, r9
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	f7ff fa9a 	bl	800e91e <quorem>
 800f3ea:	4639      	mov	r1, r7
 800f3ec:	9002      	str	r0, [sp, #8]
 800f3ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3f2:	4648      	mov	r0, r9
 800f3f4:	f000 fba4 	bl	800fb40 <__mcmp>
 800f3f8:	462a      	mov	r2, r5
 800f3fa:	9008      	str	r0, [sp, #32]
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	4658      	mov	r0, fp
 800f400:	f000 fbba 	bl	800fb78 <__mdiff>
 800f404:	68c2      	ldr	r2, [r0, #12]
 800f406:	4606      	mov	r6, r0
 800f408:	bb02      	cbnz	r2, 800f44c <_dtoa_r+0xa1c>
 800f40a:	4601      	mov	r1, r0
 800f40c:	4648      	mov	r0, r9
 800f40e:	f000 fb97 	bl	800fb40 <__mcmp>
 800f412:	4602      	mov	r2, r0
 800f414:	4631      	mov	r1, r6
 800f416:	4658      	mov	r0, fp
 800f418:	920e      	str	r2, [sp, #56]	@ 0x38
 800f41a:	f000 f957 	bl	800f6cc <_Bfree>
 800f41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f420:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f422:	9e07      	ldr	r6, [sp, #28]
 800f424:	ea43 0102 	orr.w	r1, r3, r2
 800f428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f42a:	4319      	orrs	r1, r3
 800f42c:	d110      	bne.n	800f450 <_dtoa_r+0xa20>
 800f42e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f432:	d029      	beq.n	800f488 <_dtoa_r+0xa58>
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	2b00      	cmp	r3, #0
 800f438:	dd02      	ble.n	800f440 <_dtoa_r+0xa10>
 800f43a:	9b02      	ldr	r3, [sp, #8]
 800f43c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	f883 8000 	strb.w	r8, [r3]
 800f446:	e63f      	b.n	800f0c8 <_dtoa_r+0x698>
 800f448:	4628      	mov	r0, r5
 800f44a:	e7bb      	b.n	800f3c4 <_dtoa_r+0x994>
 800f44c:	2201      	movs	r2, #1
 800f44e:	e7e1      	b.n	800f414 <_dtoa_r+0x9e4>
 800f450:	9b08      	ldr	r3, [sp, #32]
 800f452:	2b00      	cmp	r3, #0
 800f454:	db04      	blt.n	800f460 <_dtoa_r+0xa30>
 800f456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f458:	430b      	orrs	r3, r1
 800f45a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f45c:	430b      	orrs	r3, r1
 800f45e:	d120      	bne.n	800f4a2 <_dtoa_r+0xa72>
 800f460:	2a00      	cmp	r2, #0
 800f462:	dded      	ble.n	800f440 <_dtoa_r+0xa10>
 800f464:	4649      	mov	r1, r9
 800f466:	2201      	movs	r2, #1
 800f468:	4658      	mov	r0, fp
 800f46a:	f000 fafd 	bl	800fa68 <__lshift>
 800f46e:	4621      	mov	r1, r4
 800f470:	4681      	mov	r9, r0
 800f472:	f000 fb65 	bl	800fb40 <__mcmp>
 800f476:	2800      	cmp	r0, #0
 800f478:	dc03      	bgt.n	800f482 <_dtoa_r+0xa52>
 800f47a:	d1e1      	bne.n	800f440 <_dtoa_r+0xa10>
 800f47c:	f018 0f01 	tst.w	r8, #1
 800f480:	d0de      	beq.n	800f440 <_dtoa_r+0xa10>
 800f482:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f486:	d1d8      	bne.n	800f43a <_dtoa_r+0xa0a>
 800f488:	9a00      	ldr	r2, [sp, #0]
 800f48a:	2339      	movs	r3, #57	@ 0x39
 800f48c:	7013      	strb	r3, [r2, #0]
 800f48e:	4633      	mov	r3, r6
 800f490:	461e      	mov	r6, r3
 800f492:	3b01      	subs	r3, #1
 800f494:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f498:	2a39      	cmp	r2, #57	@ 0x39
 800f49a:	d052      	beq.n	800f542 <_dtoa_r+0xb12>
 800f49c:	3201      	adds	r2, #1
 800f49e:	701a      	strb	r2, [r3, #0]
 800f4a0:	e612      	b.n	800f0c8 <_dtoa_r+0x698>
 800f4a2:	2a00      	cmp	r2, #0
 800f4a4:	dd07      	ble.n	800f4b6 <_dtoa_r+0xa86>
 800f4a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f4aa:	d0ed      	beq.n	800f488 <_dtoa_r+0xa58>
 800f4ac:	9a00      	ldr	r2, [sp, #0]
 800f4ae:	f108 0301 	add.w	r3, r8, #1
 800f4b2:	7013      	strb	r3, [r2, #0]
 800f4b4:	e608      	b.n	800f0c8 <_dtoa_r+0x698>
 800f4b6:	9b07      	ldr	r3, [sp, #28]
 800f4b8:	9a07      	ldr	r2, [sp, #28]
 800f4ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f4be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d028      	beq.n	800f516 <_dtoa_r+0xae6>
 800f4c4:	4649      	mov	r1, r9
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	220a      	movs	r2, #10
 800f4ca:	4658      	mov	r0, fp
 800f4cc:	f000 f920 	bl	800f710 <__multadd>
 800f4d0:	42af      	cmp	r7, r5
 800f4d2:	4681      	mov	r9, r0
 800f4d4:	f04f 0300 	mov.w	r3, #0
 800f4d8:	f04f 020a 	mov.w	r2, #10
 800f4dc:	4639      	mov	r1, r7
 800f4de:	4658      	mov	r0, fp
 800f4e0:	d107      	bne.n	800f4f2 <_dtoa_r+0xac2>
 800f4e2:	f000 f915 	bl	800f710 <__multadd>
 800f4e6:	4607      	mov	r7, r0
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	9b07      	ldr	r3, [sp, #28]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	9307      	str	r3, [sp, #28]
 800f4f0:	e774      	b.n	800f3dc <_dtoa_r+0x9ac>
 800f4f2:	f000 f90d 	bl	800f710 <__multadd>
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	4607      	mov	r7, r0
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	220a      	movs	r2, #10
 800f4fe:	4658      	mov	r0, fp
 800f500:	f000 f906 	bl	800f710 <__multadd>
 800f504:	4605      	mov	r5, r0
 800f506:	e7f0      	b.n	800f4ea <_dtoa_r+0xaba>
 800f508:	9b00      	ldr	r3, [sp, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	bfcc      	ite	gt
 800f50e:	461e      	movgt	r6, r3
 800f510:	2601      	movle	r6, #1
 800f512:	4456      	add	r6, sl
 800f514:	2700      	movs	r7, #0
 800f516:	4649      	mov	r1, r9
 800f518:	2201      	movs	r2, #1
 800f51a:	4658      	mov	r0, fp
 800f51c:	f000 faa4 	bl	800fa68 <__lshift>
 800f520:	4621      	mov	r1, r4
 800f522:	4681      	mov	r9, r0
 800f524:	f000 fb0c 	bl	800fb40 <__mcmp>
 800f528:	2800      	cmp	r0, #0
 800f52a:	dcb0      	bgt.n	800f48e <_dtoa_r+0xa5e>
 800f52c:	d102      	bne.n	800f534 <_dtoa_r+0xb04>
 800f52e:	f018 0f01 	tst.w	r8, #1
 800f532:	d1ac      	bne.n	800f48e <_dtoa_r+0xa5e>
 800f534:	4633      	mov	r3, r6
 800f536:	461e      	mov	r6, r3
 800f538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f53c:	2a30      	cmp	r2, #48	@ 0x30
 800f53e:	d0fa      	beq.n	800f536 <_dtoa_r+0xb06>
 800f540:	e5c2      	b.n	800f0c8 <_dtoa_r+0x698>
 800f542:	459a      	cmp	sl, r3
 800f544:	d1a4      	bne.n	800f490 <_dtoa_r+0xa60>
 800f546:	9b04      	ldr	r3, [sp, #16]
 800f548:	3301      	adds	r3, #1
 800f54a:	9304      	str	r3, [sp, #16]
 800f54c:	2331      	movs	r3, #49	@ 0x31
 800f54e:	f88a 3000 	strb.w	r3, [sl]
 800f552:	e5b9      	b.n	800f0c8 <_dtoa_r+0x698>
 800f554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f556:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f5b4 <_dtoa_r+0xb84>
 800f55a:	b11b      	cbz	r3, 800f564 <_dtoa_r+0xb34>
 800f55c:	f10a 0308 	add.w	r3, sl, #8
 800f560:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f562:	6013      	str	r3, [r2, #0]
 800f564:	4650      	mov	r0, sl
 800f566:	b019      	add	sp, #100	@ 0x64
 800f568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f56e:	2b01      	cmp	r3, #1
 800f570:	f77f ae37 	ble.w	800f1e2 <_dtoa_r+0x7b2>
 800f574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f576:	930a      	str	r3, [sp, #40]	@ 0x28
 800f578:	2001      	movs	r0, #1
 800f57a:	e655      	b.n	800f228 <_dtoa_r+0x7f8>
 800f57c:	9b00      	ldr	r3, [sp, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f77f aed6 	ble.w	800f330 <_dtoa_r+0x900>
 800f584:	4656      	mov	r6, sl
 800f586:	4621      	mov	r1, r4
 800f588:	4648      	mov	r0, r9
 800f58a:	f7ff f9c8 	bl	800e91e <quorem>
 800f58e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f592:	f806 8b01 	strb.w	r8, [r6], #1
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	eba6 020a 	sub.w	r2, r6, sl
 800f59c:	4293      	cmp	r3, r2
 800f59e:	ddb3      	ble.n	800f508 <_dtoa_r+0xad8>
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	220a      	movs	r2, #10
 800f5a6:	4658      	mov	r0, fp
 800f5a8:	f000 f8b2 	bl	800f710 <__multadd>
 800f5ac:	4681      	mov	r9, r0
 800f5ae:	e7ea      	b.n	800f586 <_dtoa_r+0xb56>
 800f5b0:	08010a0c 	.word	0x08010a0c
 800f5b4:	08010990 	.word	0x08010990

0800f5b8 <_free_r>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	d041      	beq.n	800f644 <_free_r+0x8c>
 800f5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5c4:	1f0c      	subs	r4, r1, #4
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bfb8      	it	lt
 800f5ca:	18e4      	addlt	r4, r4, r3
 800f5cc:	f7fe fb2a 	bl	800dc24 <__malloc_lock>
 800f5d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f648 <_free_r+0x90>)
 800f5d2:	6813      	ldr	r3, [r2, #0]
 800f5d4:	b933      	cbnz	r3, 800f5e4 <_free_r+0x2c>
 800f5d6:	6063      	str	r3, [r4, #4]
 800f5d8:	6014      	str	r4, [r2, #0]
 800f5da:	4628      	mov	r0, r5
 800f5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5e0:	f7fe bb26 	b.w	800dc30 <__malloc_unlock>
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	d908      	bls.n	800f5fa <_free_r+0x42>
 800f5e8:	6820      	ldr	r0, [r4, #0]
 800f5ea:	1821      	adds	r1, r4, r0
 800f5ec:	428b      	cmp	r3, r1
 800f5ee:	bf01      	itttt	eq
 800f5f0:	6819      	ldreq	r1, [r3, #0]
 800f5f2:	685b      	ldreq	r3, [r3, #4]
 800f5f4:	1809      	addeq	r1, r1, r0
 800f5f6:	6021      	streq	r1, [r4, #0]
 800f5f8:	e7ed      	b.n	800f5d6 <_free_r+0x1e>
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	b10b      	cbz	r3, 800f604 <_free_r+0x4c>
 800f600:	42a3      	cmp	r3, r4
 800f602:	d9fa      	bls.n	800f5fa <_free_r+0x42>
 800f604:	6811      	ldr	r1, [r2, #0]
 800f606:	1850      	adds	r0, r2, r1
 800f608:	42a0      	cmp	r0, r4
 800f60a:	d10b      	bne.n	800f624 <_free_r+0x6c>
 800f60c:	6820      	ldr	r0, [r4, #0]
 800f60e:	4401      	add	r1, r0
 800f610:	1850      	adds	r0, r2, r1
 800f612:	4283      	cmp	r3, r0
 800f614:	6011      	str	r1, [r2, #0]
 800f616:	d1e0      	bne.n	800f5da <_free_r+0x22>
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	6053      	str	r3, [r2, #4]
 800f61e:	4408      	add	r0, r1
 800f620:	6010      	str	r0, [r2, #0]
 800f622:	e7da      	b.n	800f5da <_free_r+0x22>
 800f624:	d902      	bls.n	800f62c <_free_r+0x74>
 800f626:	230c      	movs	r3, #12
 800f628:	602b      	str	r3, [r5, #0]
 800f62a:	e7d6      	b.n	800f5da <_free_r+0x22>
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	1821      	adds	r1, r4, r0
 800f630:	428b      	cmp	r3, r1
 800f632:	bf04      	itt	eq
 800f634:	6819      	ldreq	r1, [r3, #0]
 800f636:	685b      	ldreq	r3, [r3, #4]
 800f638:	6063      	str	r3, [r4, #4]
 800f63a:	bf04      	itt	eq
 800f63c:	1809      	addeq	r1, r1, r0
 800f63e:	6021      	streq	r1, [r4, #0]
 800f640:	6054      	str	r4, [r2, #4]
 800f642:	e7ca      	b.n	800f5da <_free_r+0x22>
 800f644:	bd38      	pop	{r3, r4, r5, pc}
 800f646:	bf00      	nop
 800f648:	200082f4 	.word	0x200082f4

0800f64c <_Balloc>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	69c6      	ldr	r6, [r0, #28]
 800f650:	4604      	mov	r4, r0
 800f652:	460d      	mov	r5, r1
 800f654:	b976      	cbnz	r6, 800f674 <_Balloc+0x28>
 800f656:	2010      	movs	r0, #16
 800f658:	f7fe fa32 	bl	800dac0 <malloc>
 800f65c:	4602      	mov	r2, r0
 800f65e:	61e0      	str	r0, [r4, #28]
 800f660:	b920      	cbnz	r0, 800f66c <_Balloc+0x20>
 800f662:	4b18      	ldr	r3, [pc, #96]	@ (800f6c4 <_Balloc+0x78>)
 800f664:	4818      	ldr	r0, [pc, #96]	@ (800f6c8 <_Balloc+0x7c>)
 800f666:	216b      	movs	r1, #107	@ 0x6b
 800f668:	f000 fd90 	bl	801018c <__assert_func>
 800f66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f670:	6006      	str	r6, [r0, #0]
 800f672:	60c6      	str	r6, [r0, #12]
 800f674:	69e6      	ldr	r6, [r4, #28]
 800f676:	68f3      	ldr	r3, [r6, #12]
 800f678:	b183      	cbz	r3, 800f69c <_Balloc+0x50>
 800f67a:	69e3      	ldr	r3, [r4, #28]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f682:	b9b8      	cbnz	r0, 800f6b4 <_Balloc+0x68>
 800f684:	2101      	movs	r1, #1
 800f686:	fa01 f605 	lsl.w	r6, r1, r5
 800f68a:	1d72      	adds	r2, r6, #5
 800f68c:	0092      	lsls	r2, r2, #2
 800f68e:	4620      	mov	r0, r4
 800f690:	f000 fd9a 	bl	80101c8 <_calloc_r>
 800f694:	b160      	cbz	r0, 800f6b0 <_Balloc+0x64>
 800f696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f69a:	e00e      	b.n	800f6ba <_Balloc+0x6e>
 800f69c:	2221      	movs	r2, #33	@ 0x21
 800f69e:	2104      	movs	r1, #4
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f000 fd91 	bl	80101c8 <_calloc_r>
 800f6a6:	69e3      	ldr	r3, [r4, #28]
 800f6a8:	60f0      	str	r0, [r6, #12]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1e4      	bne.n	800f67a <_Balloc+0x2e>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	6802      	ldr	r2, [r0, #0]
 800f6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6c0:	e7f7      	b.n	800f6b2 <_Balloc+0x66>
 800f6c2:	bf00      	nop
 800f6c4:	0801099d 	.word	0x0801099d
 800f6c8:	08010a1d 	.word	0x08010a1d

0800f6cc <_Bfree>:
 800f6cc:	b570      	push	{r4, r5, r6, lr}
 800f6ce:	69c6      	ldr	r6, [r0, #28]
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	b976      	cbnz	r6, 800f6f4 <_Bfree+0x28>
 800f6d6:	2010      	movs	r0, #16
 800f6d8:	f7fe f9f2 	bl	800dac0 <malloc>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	61e8      	str	r0, [r5, #28]
 800f6e0:	b920      	cbnz	r0, 800f6ec <_Bfree+0x20>
 800f6e2:	4b09      	ldr	r3, [pc, #36]	@ (800f708 <_Bfree+0x3c>)
 800f6e4:	4809      	ldr	r0, [pc, #36]	@ (800f70c <_Bfree+0x40>)
 800f6e6:	218f      	movs	r1, #143	@ 0x8f
 800f6e8:	f000 fd50 	bl	801018c <__assert_func>
 800f6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6f0:	6006      	str	r6, [r0, #0]
 800f6f2:	60c6      	str	r6, [r0, #12]
 800f6f4:	b13c      	cbz	r4, 800f706 <_Bfree+0x3a>
 800f6f6:	69eb      	ldr	r3, [r5, #28]
 800f6f8:	6862      	ldr	r2, [r4, #4]
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f700:	6021      	str	r1, [r4, #0]
 800f702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	0801099d 	.word	0x0801099d
 800f70c:	08010a1d 	.word	0x08010a1d

0800f710 <__multadd>:
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	690d      	ldr	r5, [r1, #16]
 800f716:	4607      	mov	r7, r0
 800f718:	460c      	mov	r4, r1
 800f71a:	461e      	mov	r6, r3
 800f71c:	f101 0c14 	add.w	ip, r1, #20
 800f720:	2000      	movs	r0, #0
 800f722:	f8dc 3000 	ldr.w	r3, [ip]
 800f726:	b299      	uxth	r1, r3
 800f728:	fb02 6101 	mla	r1, r2, r1, r6
 800f72c:	0c1e      	lsrs	r6, r3, #16
 800f72e:	0c0b      	lsrs	r3, r1, #16
 800f730:	fb02 3306 	mla	r3, r2, r6, r3
 800f734:	b289      	uxth	r1, r1
 800f736:	3001      	adds	r0, #1
 800f738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f73c:	4285      	cmp	r5, r0
 800f73e:	f84c 1b04 	str.w	r1, [ip], #4
 800f742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f746:	dcec      	bgt.n	800f722 <__multadd+0x12>
 800f748:	b30e      	cbz	r6, 800f78e <__multadd+0x7e>
 800f74a:	68a3      	ldr	r3, [r4, #8]
 800f74c:	42ab      	cmp	r3, r5
 800f74e:	dc19      	bgt.n	800f784 <__multadd+0x74>
 800f750:	6861      	ldr	r1, [r4, #4]
 800f752:	4638      	mov	r0, r7
 800f754:	3101      	adds	r1, #1
 800f756:	f7ff ff79 	bl	800f64c <_Balloc>
 800f75a:	4680      	mov	r8, r0
 800f75c:	b928      	cbnz	r0, 800f76a <__multadd+0x5a>
 800f75e:	4602      	mov	r2, r0
 800f760:	4b0c      	ldr	r3, [pc, #48]	@ (800f794 <__multadd+0x84>)
 800f762:	480d      	ldr	r0, [pc, #52]	@ (800f798 <__multadd+0x88>)
 800f764:	21ba      	movs	r1, #186	@ 0xba
 800f766:	f000 fd11 	bl	801018c <__assert_func>
 800f76a:	6922      	ldr	r2, [r4, #16]
 800f76c:	3202      	adds	r2, #2
 800f76e:	f104 010c 	add.w	r1, r4, #12
 800f772:	0092      	lsls	r2, r2, #2
 800f774:	300c      	adds	r0, #12
 800f776:	f7ff f8c4 	bl	800e902 <memcpy>
 800f77a:	4621      	mov	r1, r4
 800f77c:	4638      	mov	r0, r7
 800f77e:	f7ff ffa5 	bl	800f6cc <_Bfree>
 800f782:	4644      	mov	r4, r8
 800f784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f788:	3501      	adds	r5, #1
 800f78a:	615e      	str	r6, [r3, #20]
 800f78c:	6125      	str	r5, [r4, #16]
 800f78e:	4620      	mov	r0, r4
 800f790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f794:	08010a0c 	.word	0x08010a0c
 800f798:	08010a1d 	.word	0x08010a1d

0800f79c <__hi0bits>:
 800f79c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	bf36      	itet	cc
 800f7a4:	0403      	lslcc	r3, r0, #16
 800f7a6:	2000      	movcs	r0, #0
 800f7a8:	2010      	movcc	r0, #16
 800f7aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f7ae:	bf3c      	itt	cc
 800f7b0:	021b      	lslcc	r3, r3, #8
 800f7b2:	3008      	addcc	r0, #8
 800f7b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f7b8:	bf3c      	itt	cc
 800f7ba:	011b      	lslcc	r3, r3, #4
 800f7bc:	3004      	addcc	r0, #4
 800f7be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7c2:	bf3c      	itt	cc
 800f7c4:	009b      	lslcc	r3, r3, #2
 800f7c6:	3002      	addcc	r0, #2
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	db05      	blt.n	800f7d8 <__hi0bits+0x3c>
 800f7cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f7d0:	f100 0001 	add.w	r0, r0, #1
 800f7d4:	bf08      	it	eq
 800f7d6:	2020      	moveq	r0, #32
 800f7d8:	4770      	bx	lr

0800f7da <__lo0bits>:
 800f7da:	6803      	ldr	r3, [r0, #0]
 800f7dc:	4602      	mov	r2, r0
 800f7de:	f013 0007 	ands.w	r0, r3, #7
 800f7e2:	d00b      	beq.n	800f7fc <__lo0bits+0x22>
 800f7e4:	07d9      	lsls	r1, r3, #31
 800f7e6:	d421      	bmi.n	800f82c <__lo0bits+0x52>
 800f7e8:	0798      	lsls	r0, r3, #30
 800f7ea:	bf49      	itett	mi
 800f7ec:	085b      	lsrmi	r3, r3, #1
 800f7ee:	089b      	lsrpl	r3, r3, #2
 800f7f0:	2001      	movmi	r0, #1
 800f7f2:	6013      	strmi	r3, [r2, #0]
 800f7f4:	bf5c      	itt	pl
 800f7f6:	6013      	strpl	r3, [r2, #0]
 800f7f8:	2002      	movpl	r0, #2
 800f7fa:	4770      	bx	lr
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	b909      	cbnz	r1, 800f804 <__lo0bits+0x2a>
 800f800:	0c1b      	lsrs	r3, r3, #16
 800f802:	2010      	movs	r0, #16
 800f804:	b2d9      	uxtb	r1, r3
 800f806:	b909      	cbnz	r1, 800f80c <__lo0bits+0x32>
 800f808:	3008      	adds	r0, #8
 800f80a:	0a1b      	lsrs	r3, r3, #8
 800f80c:	0719      	lsls	r1, r3, #28
 800f80e:	bf04      	itt	eq
 800f810:	091b      	lsreq	r3, r3, #4
 800f812:	3004      	addeq	r0, #4
 800f814:	0799      	lsls	r1, r3, #30
 800f816:	bf04      	itt	eq
 800f818:	089b      	lsreq	r3, r3, #2
 800f81a:	3002      	addeq	r0, #2
 800f81c:	07d9      	lsls	r1, r3, #31
 800f81e:	d403      	bmi.n	800f828 <__lo0bits+0x4e>
 800f820:	085b      	lsrs	r3, r3, #1
 800f822:	f100 0001 	add.w	r0, r0, #1
 800f826:	d003      	beq.n	800f830 <__lo0bits+0x56>
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	4770      	bx	lr
 800f82c:	2000      	movs	r0, #0
 800f82e:	4770      	bx	lr
 800f830:	2020      	movs	r0, #32
 800f832:	4770      	bx	lr

0800f834 <__i2b>:
 800f834:	b510      	push	{r4, lr}
 800f836:	460c      	mov	r4, r1
 800f838:	2101      	movs	r1, #1
 800f83a:	f7ff ff07 	bl	800f64c <_Balloc>
 800f83e:	4602      	mov	r2, r0
 800f840:	b928      	cbnz	r0, 800f84e <__i2b+0x1a>
 800f842:	4b05      	ldr	r3, [pc, #20]	@ (800f858 <__i2b+0x24>)
 800f844:	4805      	ldr	r0, [pc, #20]	@ (800f85c <__i2b+0x28>)
 800f846:	f240 1145 	movw	r1, #325	@ 0x145
 800f84a:	f000 fc9f 	bl	801018c <__assert_func>
 800f84e:	2301      	movs	r3, #1
 800f850:	6144      	str	r4, [r0, #20]
 800f852:	6103      	str	r3, [r0, #16]
 800f854:	bd10      	pop	{r4, pc}
 800f856:	bf00      	nop
 800f858:	08010a0c 	.word	0x08010a0c
 800f85c:	08010a1d 	.word	0x08010a1d

0800f860 <__multiply>:
 800f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	4614      	mov	r4, r2
 800f866:	690a      	ldr	r2, [r1, #16]
 800f868:	6923      	ldr	r3, [r4, #16]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	bfa8      	it	ge
 800f86e:	4623      	movge	r3, r4
 800f870:	460f      	mov	r7, r1
 800f872:	bfa4      	itt	ge
 800f874:	460c      	movge	r4, r1
 800f876:	461f      	movge	r7, r3
 800f878:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f87c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f880:	68a3      	ldr	r3, [r4, #8]
 800f882:	6861      	ldr	r1, [r4, #4]
 800f884:	eb0a 0609 	add.w	r6, sl, r9
 800f888:	42b3      	cmp	r3, r6
 800f88a:	b085      	sub	sp, #20
 800f88c:	bfb8      	it	lt
 800f88e:	3101      	addlt	r1, #1
 800f890:	f7ff fedc 	bl	800f64c <_Balloc>
 800f894:	b930      	cbnz	r0, 800f8a4 <__multiply+0x44>
 800f896:	4602      	mov	r2, r0
 800f898:	4b44      	ldr	r3, [pc, #272]	@ (800f9ac <__multiply+0x14c>)
 800f89a:	4845      	ldr	r0, [pc, #276]	@ (800f9b0 <__multiply+0x150>)
 800f89c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f8a0:	f000 fc74 	bl	801018c <__assert_func>
 800f8a4:	f100 0514 	add.w	r5, r0, #20
 800f8a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f8ac:	462b      	mov	r3, r5
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	4543      	cmp	r3, r8
 800f8b2:	d321      	bcc.n	800f8f8 <__multiply+0x98>
 800f8b4:	f107 0114 	add.w	r1, r7, #20
 800f8b8:	f104 0214 	add.w	r2, r4, #20
 800f8bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f8c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f8c4:	9302      	str	r3, [sp, #8]
 800f8c6:	1b13      	subs	r3, r2, r4
 800f8c8:	3b15      	subs	r3, #21
 800f8ca:	f023 0303 	bic.w	r3, r3, #3
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	f104 0715 	add.w	r7, r4, #21
 800f8d4:	42ba      	cmp	r2, r7
 800f8d6:	bf38      	it	cc
 800f8d8:	2304      	movcc	r3, #4
 800f8da:	9301      	str	r3, [sp, #4]
 800f8dc:	9b02      	ldr	r3, [sp, #8]
 800f8de:	9103      	str	r1, [sp, #12]
 800f8e0:	428b      	cmp	r3, r1
 800f8e2:	d80c      	bhi.n	800f8fe <__multiply+0x9e>
 800f8e4:	2e00      	cmp	r6, #0
 800f8e6:	dd03      	ble.n	800f8f0 <__multiply+0x90>
 800f8e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d05b      	beq.n	800f9a8 <__multiply+0x148>
 800f8f0:	6106      	str	r6, [r0, #16]
 800f8f2:	b005      	add	sp, #20
 800f8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f8:	f843 2b04 	str.w	r2, [r3], #4
 800f8fc:	e7d8      	b.n	800f8b0 <__multiply+0x50>
 800f8fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800f902:	f1ba 0f00 	cmp.w	sl, #0
 800f906:	d024      	beq.n	800f952 <__multiply+0xf2>
 800f908:	f104 0e14 	add.w	lr, r4, #20
 800f90c:	46a9      	mov	r9, r5
 800f90e:	f04f 0c00 	mov.w	ip, #0
 800f912:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f916:	f8d9 3000 	ldr.w	r3, [r9]
 800f91a:	fa1f fb87 	uxth.w	fp, r7
 800f91e:	b29b      	uxth	r3, r3
 800f920:	fb0a 330b 	mla	r3, sl, fp, r3
 800f924:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f928:	f8d9 7000 	ldr.w	r7, [r9]
 800f92c:	4463      	add	r3, ip
 800f92e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f932:	fb0a c70b 	mla	r7, sl, fp, ip
 800f936:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f940:	4572      	cmp	r2, lr
 800f942:	f849 3b04 	str.w	r3, [r9], #4
 800f946:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f94a:	d8e2      	bhi.n	800f912 <__multiply+0xb2>
 800f94c:	9b01      	ldr	r3, [sp, #4]
 800f94e:	f845 c003 	str.w	ip, [r5, r3]
 800f952:	9b03      	ldr	r3, [sp, #12]
 800f954:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f958:	3104      	adds	r1, #4
 800f95a:	f1b9 0f00 	cmp.w	r9, #0
 800f95e:	d021      	beq.n	800f9a4 <__multiply+0x144>
 800f960:	682b      	ldr	r3, [r5, #0]
 800f962:	f104 0c14 	add.w	ip, r4, #20
 800f966:	46ae      	mov	lr, r5
 800f968:	f04f 0a00 	mov.w	sl, #0
 800f96c:	f8bc b000 	ldrh.w	fp, [ip]
 800f970:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f974:	fb09 770b 	mla	r7, r9, fp, r7
 800f978:	4457      	add	r7, sl
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f980:	f84e 3b04 	str.w	r3, [lr], #4
 800f984:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f98c:	f8be 3000 	ldrh.w	r3, [lr]
 800f990:	fb09 330a 	mla	r3, r9, sl, r3
 800f994:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f998:	4562      	cmp	r2, ip
 800f99a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f99e:	d8e5      	bhi.n	800f96c <__multiply+0x10c>
 800f9a0:	9f01      	ldr	r7, [sp, #4]
 800f9a2:	51eb      	str	r3, [r5, r7]
 800f9a4:	3504      	adds	r5, #4
 800f9a6:	e799      	b.n	800f8dc <__multiply+0x7c>
 800f9a8:	3e01      	subs	r6, #1
 800f9aa:	e79b      	b.n	800f8e4 <__multiply+0x84>
 800f9ac:	08010a0c 	.word	0x08010a0c
 800f9b0:	08010a1d 	.word	0x08010a1d

0800f9b4 <__pow5mult>:
 800f9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9b8:	4615      	mov	r5, r2
 800f9ba:	f012 0203 	ands.w	r2, r2, #3
 800f9be:	4607      	mov	r7, r0
 800f9c0:	460e      	mov	r6, r1
 800f9c2:	d007      	beq.n	800f9d4 <__pow5mult+0x20>
 800f9c4:	4c25      	ldr	r4, [pc, #148]	@ (800fa5c <__pow5mult+0xa8>)
 800f9c6:	3a01      	subs	r2, #1
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ce:	f7ff fe9f 	bl	800f710 <__multadd>
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	10ad      	asrs	r5, r5, #2
 800f9d6:	d03d      	beq.n	800fa54 <__pow5mult+0xa0>
 800f9d8:	69fc      	ldr	r4, [r7, #28]
 800f9da:	b97c      	cbnz	r4, 800f9fc <__pow5mult+0x48>
 800f9dc:	2010      	movs	r0, #16
 800f9de:	f7fe f86f 	bl	800dac0 <malloc>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	61f8      	str	r0, [r7, #28]
 800f9e6:	b928      	cbnz	r0, 800f9f4 <__pow5mult+0x40>
 800f9e8:	4b1d      	ldr	r3, [pc, #116]	@ (800fa60 <__pow5mult+0xac>)
 800f9ea:	481e      	ldr	r0, [pc, #120]	@ (800fa64 <__pow5mult+0xb0>)
 800f9ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f9f0:	f000 fbcc 	bl	801018c <__assert_func>
 800f9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9f8:	6004      	str	r4, [r0, #0]
 800f9fa:	60c4      	str	r4, [r0, #12]
 800f9fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fa00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa04:	b94c      	cbnz	r4, 800fa1a <__pow5mult+0x66>
 800fa06:	f240 2171 	movw	r1, #625	@ 0x271
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	f7ff ff12 	bl	800f834 <__i2b>
 800fa10:	2300      	movs	r3, #0
 800fa12:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa16:	4604      	mov	r4, r0
 800fa18:	6003      	str	r3, [r0, #0]
 800fa1a:	f04f 0900 	mov.w	r9, #0
 800fa1e:	07eb      	lsls	r3, r5, #31
 800fa20:	d50a      	bpl.n	800fa38 <__pow5mult+0x84>
 800fa22:	4631      	mov	r1, r6
 800fa24:	4622      	mov	r2, r4
 800fa26:	4638      	mov	r0, r7
 800fa28:	f7ff ff1a 	bl	800f860 <__multiply>
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4680      	mov	r8, r0
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff fe4b 	bl	800f6cc <_Bfree>
 800fa36:	4646      	mov	r6, r8
 800fa38:	106d      	asrs	r5, r5, #1
 800fa3a:	d00b      	beq.n	800fa54 <__pow5mult+0xa0>
 800fa3c:	6820      	ldr	r0, [r4, #0]
 800fa3e:	b938      	cbnz	r0, 800fa50 <__pow5mult+0x9c>
 800fa40:	4622      	mov	r2, r4
 800fa42:	4621      	mov	r1, r4
 800fa44:	4638      	mov	r0, r7
 800fa46:	f7ff ff0b 	bl	800f860 <__multiply>
 800fa4a:	6020      	str	r0, [r4, #0]
 800fa4c:	f8c0 9000 	str.w	r9, [r0]
 800fa50:	4604      	mov	r4, r0
 800fa52:	e7e4      	b.n	800fa1e <__pow5mult+0x6a>
 800fa54:	4630      	mov	r0, r6
 800fa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa5a:	bf00      	nop
 800fa5c:	08010a78 	.word	0x08010a78
 800fa60:	0801099d 	.word	0x0801099d
 800fa64:	08010a1d 	.word	0x08010a1d

0800fa68 <__lshift>:
 800fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa6c:	460c      	mov	r4, r1
 800fa6e:	6849      	ldr	r1, [r1, #4]
 800fa70:	6923      	ldr	r3, [r4, #16]
 800fa72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa76:	68a3      	ldr	r3, [r4, #8]
 800fa78:	4607      	mov	r7, r0
 800fa7a:	4691      	mov	r9, r2
 800fa7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa80:	f108 0601 	add.w	r6, r8, #1
 800fa84:	42b3      	cmp	r3, r6
 800fa86:	db0b      	blt.n	800faa0 <__lshift+0x38>
 800fa88:	4638      	mov	r0, r7
 800fa8a:	f7ff fddf 	bl	800f64c <_Balloc>
 800fa8e:	4605      	mov	r5, r0
 800fa90:	b948      	cbnz	r0, 800faa6 <__lshift+0x3e>
 800fa92:	4602      	mov	r2, r0
 800fa94:	4b28      	ldr	r3, [pc, #160]	@ (800fb38 <__lshift+0xd0>)
 800fa96:	4829      	ldr	r0, [pc, #164]	@ (800fb3c <__lshift+0xd4>)
 800fa98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fa9c:	f000 fb76 	bl	801018c <__assert_func>
 800faa0:	3101      	adds	r1, #1
 800faa2:	005b      	lsls	r3, r3, #1
 800faa4:	e7ee      	b.n	800fa84 <__lshift+0x1c>
 800faa6:	2300      	movs	r3, #0
 800faa8:	f100 0114 	add.w	r1, r0, #20
 800faac:	f100 0210 	add.w	r2, r0, #16
 800fab0:	4618      	mov	r0, r3
 800fab2:	4553      	cmp	r3, sl
 800fab4:	db33      	blt.n	800fb1e <__lshift+0xb6>
 800fab6:	6920      	ldr	r0, [r4, #16]
 800fab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fabc:	f104 0314 	add.w	r3, r4, #20
 800fac0:	f019 091f 	ands.w	r9, r9, #31
 800fac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800facc:	d02b      	beq.n	800fb26 <__lshift+0xbe>
 800face:	f1c9 0e20 	rsb	lr, r9, #32
 800fad2:	468a      	mov	sl, r1
 800fad4:	2200      	movs	r2, #0
 800fad6:	6818      	ldr	r0, [r3, #0]
 800fad8:	fa00 f009 	lsl.w	r0, r0, r9
 800fadc:	4310      	orrs	r0, r2
 800fade:	f84a 0b04 	str.w	r0, [sl], #4
 800fae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae6:	459c      	cmp	ip, r3
 800fae8:	fa22 f20e 	lsr.w	r2, r2, lr
 800faec:	d8f3      	bhi.n	800fad6 <__lshift+0x6e>
 800faee:	ebac 0304 	sub.w	r3, ip, r4
 800faf2:	3b15      	subs	r3, #21
 800faf4:	f023 0303 	bic.w	r3, r3, #3
 800faf8:	3304      	adds	r3, #4
 800fafa:	f104 0015 	add.w	r0, r4, #21
 800fafe:	4584      	cmp	ip, r0
 800fb00:	bf38      	it	cc
 800fb02:	2304      	movcc	r3, #4
 800fb04:	50ca      	str	r2, [r1, r3]
 800fb06:	b10a      	cbz	r2, 800fb0c <__lshift+0xa4>
 800fb08:	f108 0602 	add.w	r6, r8, #2
 800fb0c:	3e01      	subs	r6, #1
 800fb0e:	4638      	mov	r0, r7
 800fb10:	612e      	str	r6, [r5, #16]
 800fb12:	4621      	mov	r1, r4
 800fb14:	f7ff fdda 	bl	800f6cc <_Bfree>
 800fb18:	4628      	mov	r0, r5
 800fb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb22:	3301      	adds	r3, #1
 800fb24:	e7c5      	b.n	800fab2 <__lshift+0x4a>
 800fb26:	3904      	subs	r1, #4
 800fb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb30:	459c      	cmp	ip, r3
 800fb32:	d8f9      	bhi.n	800fb28 <__lshift+0xc0>
 800fb34:	e7ea      	b.n	800fb0c <__lshift+0xa4>
 800fb36:	bf00      	nop
 800fb38:	08010a0c 	.word	0x08010a0c
 800fb3c:	08010a1d 	.word	0x08010a1d

0800fb40 <__mcmp>:
 800fb40:	690a      	ldr	r2, [r1, #16]
 800fb42:	4603      	mov	r3, r0
 800fb44:	6900      	ldr	r0, [r0, #16]
 800fb46:	1a80      	subs	r0, r0, r2
 800fb48:	b530      	push	{r4, r5, lr}
 800fb4a:	d10e      	bne.n	800fb6a <__mcmp+0x2a>
 800fb4c:	3314      	adds	r3, #20
 800fb4e:	3114      	adds	r1, #20
 800fb50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb60:	4295      	cmp	r5, r2
 800fb62:	d003      	beq.n	800fb6c <__mcmp+0x2c>
 800fb64:	d205      	bcs.n	800fb72 <__mcmp+0x32>
 800fb66:	f04f 30ff 	mov.w	r0, #4294967295
 800fb6a:	bd30      	pop	{r4, r5, pc}
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	d3f3      	bcc.n	800fb58 <__mcmp+0x18>
 800fb70:	e7fb      	b.n	800fb6a <__mcmp+0x2a>
 800fb72:	2001      	movs	r0, #1
 800fb74:	e7f9      	b.n	800fb6a <__mcmp+0x2a>
	...

0800fb78 <__mdiff>:
 800fb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	4689      	mov	r9, r1
 800fb7e:	4606      	mov	r6, r0
 800fb80:	4611      	mov	r1, r2
 800fb82:	4648      	mov	r0, r9
 800fb84:	4614      	mov	r4, r2
 800fb86:	f7ff ffdb 	bl	800fb40 <__mcmp>
 800fb8a:	1e05      	subs	r5, r0, #0
 800fb8c:	d112      	bne.n	800fbb4 <__mdiff+0x3c>
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4630      	mov	r0, r6
 800fb92:	f7ff fd5b 	bl	800f64c <_Balloc>
 800fb96:	4602      	mov	r2, r0
 800fb98:	b928      	cbnz	r0, 800fba6 <__mdiff+0x2e>
 800fb9a:	4b3f      	ldr	r3, [pc, #252]	@ (800fc98 <__mdiff+0x120>)
 800fb9c:	f240 2137 	movw	r1, #567	@ 0x237
 800fba0:	483e      	ldr	r0, [pc, #248]	@ (800fc9c <__mdiff+0x124>)
 800fba2:	f000 faf3 	bl	801018c <__assert_func>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fbac:	4610      	mov	r0, r2
 800fbae:	b003      	add	sp, #12
 800fbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb4:	bfbc      	itt	lt
 800fbb6:	464b      	movlt	r3, r9
 800fbb8:	46a1      	movlt	r9, r4
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fbc0:	bfba      	itte	lt
 800fbc2:	461c      	movlt	r4, r3
 800fbc4:	2501      	movlt	r5, #1
 800fbc6:	2500      	movge	r5, #0
 800fbc8:	f7ff fd40 	bl	800f64c <_Balloc>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	b918      	cbnz	r0, 800fbd8 <__mdiff+0x60>
 800fbd0:	4b31      	ldr	r3, [pc, #196]	@ (800fc98 <__mdiff+0x120>)
 800fbd2:	f240 2145 	movw	r1, #581	@ 0x245
 800fbd6:	e7e3      	b.n	800fba0 <__mdiff+0x28>
 800fbd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fbdc:	6926      	ldr	r6, [r4, #16]
 800fbde:	60c5      	str	r5, [r0, #12]
 800fbe0:	f109 0310 	add.w	r3, r9, #16
 800fbe4:	f109 0514 	add.w	r5, r9, #20
 800fbe8:	f104 0e14 	add.w	lr, r4, #20
 800fbec:	f100 0b14 	add.w	fp, r0, #20
 800fbf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fbf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	46d9      	mov	r9, fp
 800fbfc:	f04f 0c00 	mov.w	ip, #0
 800fc00:	9b01      	ldr	r3, [sp, #4]
 800fc02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fc06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fc0a:	9301      	str	r3, [sp, #4]
 800fc0c:	fa1f f38a 	uxth.w	r3, sl
 800fc10:	4619      	mov	r1, r3
 800fc12:	b283      	uxth	r3, r0
 800fc14:	1acb      	subs	r3, r1, r3
 800fc16:	0c00      	lsrs	r0, r0, #16
 800fc18:	4463      	add	r3, ip
 800fc1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fc1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fc28:	4576      	cmp	r6, lr
 800fc2a:	f849 3b04 	str.w	r3, [r9], #4
 800fc2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc32:	d8e5      	bhi.n	800fc00 <__mdiff+0x88>
 800fc34:	1b33      	subs	r3, r6, r4
 800fc36:	3b15      	subs	r3, #21
 800fc38:	f023 0303 	bic.w	r3, r3, #3
 800fc3c:	3415      	adds	r4, #21
 800fc3e:	3304      	adds	r3, #4
 800fc40:	42a6      	cmp	r6, r4
 800fc42:	bf38      	it	cc
 800fc44:	2304      	movcc	r3, #4
 800fc46:	441d      	add	r5, r3
 800fc48:	445b      	add	r3, fp
 800fc4a:	461e      	mov	r6, r3
 800fc4c:	462c      	mov	r4, r5
 800fc4e:	4544      	cmp	r4, r8
 800fc50:	d30e      	bcc.n	800fc70 <__mdiff+0xf8>
 800fc52:	f108 0103 	add.w	r1, r8, #3
 800fc56:	1b49      	subs	r1, r1, r5
 800fc58:	f021 0103 	bic.w	r1, r1, #3
 800fc5c:	3d03      	subs	r5, #3
 800fc5e:	45a8      	cmp	r8, r5
 800fc60:	bf38      	it	cc
 800fc62:	2100      	movcc	r1, #0
 800fc64:	440b      	add	r3, r1
 800fc66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc6a:	b191      	cbz	r1, 800fc92 <__mdiff+0x11a>
 800fc6c:	6117      	str	r7, [r2, #16]
 800fc6e:	e79d      	b.n	800fbac <__mdiff+0x34>
 800fc70:	f854 1b04 	ldr.w	r1, [r4], #4
 800fc74:	46e6      	mov	lr, ip
 800fc76:	0c08      	lsrs	r0, r1, #16
 800fc78:	fa1c fc81 	uxtah	ip, ip, r1
 800fc7c:	4471      	add	r1, lr
 800fc7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fc82:	b289      	uxth	r1, r1
 800fc84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fc88:	f846 1b04 	str.w	r1, [r6], #4
 800fc8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fc90:	e7dd      	b.n	800fc4e <__mdiff+0xd6>
 800fc92:	3f01      	subs	r7, #1
 800fc94:	e7e7      	b.n	800fc66 <__mdiff+0xee>
 800fc96:	bf00      	nop
 800fc98:	08010a0c 	.word	0x08010a0c
 800fc9c:	08010a1d 	.word	0x08010a1d

0800fca0 <__d2b>:
 800fca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fca4:	460f      	mov	r7, r1
 800fca6:	2101      	movs	r1, #1
 800fca8:	ec59 8b10 	vmov	r8, r9, d0
 800fcac:	4616      	mov	r6, r2
 800fcae:	f7ff fccd 	bl	800f64c <_Balloc>
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	b930      	cbnz	r0, 800fcc4 <__d2b+0x24>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b23      	ldr	r3, [pc, #140]	@ (800fd48 <__d2b+0xa8>)
 800fcba:	4824      	ldr	r0, [pc, #144]	@ (800fd4c <__d2b+0xac>)
 800fcbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800fcc0:	f000 fa64 	bl	801018c <__assert_func>
 800fcc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fcc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fccc:	b10d      	cbz	r5, 800fcd2 <__d2b+0x32>
 800fcce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fcd2:	9301      	str	r3, [sp, #4]
 800fcd4:	f1b8 0300 	subs.w	r3, r8, #0
 800fcd8:	d023      	beq.n	800fd22 <__d2b+0x82>
 800fcda:	4668      	mov	r0, sp
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	f7ff fd7c 	bl	800f7da <__lo0bits>
 800fce2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fce6:	b1d0      	cbz	r0, 800fd1e <__d2b+0x7e>
 800fce8:	f1c0 0320 	rsb	r3, r0, #32
 800fcec:	fa02 f303 	lsl.w	r3, r2, r3
 800fcf0:	430b      	orrs	r3, r1
 800fcf2:	40c2      	lsrs	r2, r0
 800fcf4:	6163      	str	r3, [r4, #20]
 800fcf6:	9201      	str	r2, [sp, #4]
 800fcf8:	9b01      	ldr	r3, [sp, #4]
 800fcfa:	61a3      	str	r3, [r4, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	bf0c      	ite	eq
 800fd00:	2201      	moveq	r2, #1
 800fd02:	2202      	movne	r2, #2
 800fd04:	6122      	str	r2, [r4, #16]
 800fd06:	b1a5      	cbz	r5, 800fd32 <__d2b+0x92>
 800fd08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fd0c:	4405      	add	r5, r0
 800fd0e:	603d      	str	r5, [r7, #0]
 800fd10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fd14:	6030      	str	r0, [r6, #0]
 800fd16:	4620      	mov	r0, r4
 800fd18:	b003      	add	sp, #12
 800fd1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd1e:	6161      	str	r1, [r4, #20]
 800fd20:	e7ea      	b.n	800fcf8 <__d2b+0x58>
 800fd22:	a801      	add	r0, sp, #4
 800fd24:	f7ff fd59 	bl	800f7da <__lo0bits>
 800fd28:	9b01      	ldr	r3, [sp, #4]
 800fd2a:	6163      	str	r3, [r4, #20]
 800fd2c:	3020      	adds	r0, #32
 800fd2e:	2201      	movs	r2, #1
 800fd30:	e7e8      	b.n	800fd04 <__d2b+0x64>
 800fd32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fd3a:	6038      	str	r0, [r7, #0]
 800fd3c:	6918      	ldr	r0, [r3, #16]
 800fd3e:	f7ff fd2d 	bl	800f79c <__hi0bits>
 800fd42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd46:	e7e5      	b.n	800fd14 <__d2b+0x74>
 800fd48:	08010a0c 	.word	0x08010a0c
 800fd4c:	08010a1d 	.word	0x08010a1d

0800fd50 <__ssputs_r>:
 800fd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd54:	688e      	ldr	r6, [r1, #8]
 800fd56:	461f      	mov	r7, r3
 800fd58:	42be      	cmp	r6, r7
 800fd5a:	680b      	ldr	r3, [r1, #0]
 800fd5c:	4682      	mov	sl, r0
 800fd5e:	460c      	mov	r4, r1
 800fd60:	4690      	mov	r8, r2
 800fd62:	d82d      	bhi.n	800fdc0 <__ssputs_r+0x70>
 800fd64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fd6c:	d026      	beq.n	800fdbc <__ssputs_r+0x6c>
 800fd6e:	6965      	ldr	r5, [r4, #20]
 800fd70:	6909      	ldr	r1, [r1, #16]
 800fd72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd76:	eba3 0901 	sub.w	r9, r3, r1
 800fd7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd7e:	1c7b      	adds	r3, r7, #1
 800fd80:	444b      	add	r3, r9
 800fd82:	106d      	asrs	r5, r5, #1
 800fd84:	429d      	cmp	r5, r3
 800fd86:	bf38      	it	cc
 800fd88:	461d      	movcc	r5, r3
 800fd8a:	0553      	lsls	r3, r2, #21
 800fd8c:	d527      	bpl.n	800fdde <__ssputs_r+0x8e>
 800fd8e:	4629      	mov	r1, r5
 800fd90:	f7fd fec8 	bl	800db24 <_malloc_r>
 800fd94:	4606      	mov	r6, r0
 800fd96:	b360      	cbz	r0, 800fdf2 <__ssputs_r+0xa2>
 800fd98:	6921      	ldr	r1, [r4, #16]
 800fd9a:	464a      	mov	r2, r9
 800fd9c:	f7fe fdb1 	bl	800e902 <memcpy>
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fda6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdaa:	81a3      	strh	r3, [r4, #12]
 800fdac:	6126      	str	r6, [r4, #16]
 800fdae:	6165      	str	r5, [r4, #20]
 800fdb0:	444e      	add	r6, r9
 800fdb2:	eba5 0509 	sub.w	r5, r5, r9
 800fdb6:	6026      	str	r6, [r4, #0]
 800fdb8:	60a5      	str	r5, [r4, #8]
 800fdba:	463e      	mov	r6, r7
 800fdbc:	42be      	cmp	r6, r7
 800fdbe:	d900      	bls.n	800fdc2 <__ssputs_r+0x72>
 800fdc0:	463e      	mov	r6, r7
 800fdc2:	6820      	ldr	r0, [r4, #0]
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	4641      	mov	r1, r8
 800fdc8:	f000 f9c6 	bl	8010158 <memmove>
 800fdcc:	68a3      	ldr	r3, [r4, #8]
 800fdce:	1b9b      	subs	r3, r3, r6
 800fdd0:	60a3      	str	r3, [r4, #8]
 800fdd2:	6823      	ldr	r3, [r4, #0]
 800fdd4:	4433      	add	r3, r6
 800fdd6:	6023      	str	r3, [r4, #0]
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdde:	462a      	mov	r2, r5
 800fde0:	f000 fa18 	bl	8010214 <_realloc_r>
 800fde4:	4606      	mov	r6, r0
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d1e0      	bne.n	800fdac <__ssputs_r+0x5c>
 800fdea:	6921      	ldr	r1, [r4, #16]
 800fdec:	4650      	mov	r0, sl
 800fdee:	f7ff fbe3 	bl	800f5b8 <_free_r>
 800fdf2:	230c      	movs	r3, #12
 800fdf4:	f8ca 3000 	str.w	r3, [sl]
 800fdf8:	89a3      	ldrh	r3, [r4, #12]
 800fdfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdfe:	81a3      	strh	r3, [r4, #12]
 800fe00:	f04f 30ff 	mov.w	r0, #4294967295
 800fe04:	e7e9      	b.n	800fdda <__ssputs_r+0x8a>
	...

0800fe08 <_svfiprintf_r>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	4698      	mov	r8, r3
 800fe0e:	898b      	ldrh	r3, [r1, #12]
 800fe10:	061b      	lsls	r3, r3, #24
 800fe12:	b09d      	sub	sp, #116	@ 0x74
 800fe14:	4607      	mov	r7, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	4614      	mov	r4, r2
 800fe1a:	d510      	bpl.n	800fe3e <_svfiprintf_r+0x36>
 800fe1c:	690b      	ldr	r3, [r1, #16]
 800fe1e:	b973      	cbnz	r3, 800fe3e <_svfiprintf_r+0x36>
 800fe20:	2140      	movs	r1, #64	@ 0x40
 800fe22:	f7fd fe7f 	bl	800db24 <_malloc_r>
 800fe26:	6028      	str	r0, [r5, #0]
 800fe28:	6128      	str	r0, [r5, #16]
 800fe2a:	b930      	cbnz	r0, 800fe3a <_svfiprintf_r+0x32>
 800fe2c:	230c      	movs	r3, #12
 800fe2e:	603b      	str	r3, [r7, #0]
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	b01d      	add	sp, #116	@ 0x74
 800fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3a:	2340      	movs	r3, #64	@ 0x40
 800fe3c:	616b      	str	r3, [r5, #20]
 800fe3e:	2300      	movs	r3, #0
 800fe40:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe42:	2320      	movs	r3, #32
 800fe44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe48:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe4c:	2330      	movs	r3, #48	@ 0x30
 800fe4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ffec <_svfiprintf_r+0x1e4>
 800fe52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe56:	f04f 0901 	mov.w	r9, #1
 800fe5a:	4623      	mov	r3, r4
 800fe5c:	469a      	mov	sl, r3
 800fe5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe62:	b10a      	cbz	r2, 800fe68 <_svfiprintf_r+0x60>
 800fe64:	2a25      	cmp	r2, #37	@ 0x25
 800fe66:	d1f9      	bne.n	800fe5c <_svfiprintf_r+0x54>
 800fe68:	ebba 0b04 	subs.w	fp, sl, r4
 800fe6c:	d00b      	beq.n	800fe86 <_svfiprintf_r+0x7e>
 800fe6e:	465b      	mov	r3, fp
 800fe70:	4622      	mov	r2, r4
 800fe72:	4629      	mov	r1, r5
 800fe74:	4638      	mov	r0, r7
 800fe76:	f7ff ff6b 	bl	800fd50 <__ssputs_r>
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	f000 80a7 	beq.w	800ffce <_svfiprintf_r+0x1c6>
 800fe80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe82:	445a      	add	r2, fp
 800fe84:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe86:	f89a 3000 	ldrb.w	r3, [sl]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	f000 809f 	beq.w	800ffce <_svfiprintf_r+0x1c6>
 800fe90:	2300      	movs	r3, #0
 800fe92:	f04f 32ff 	mov.w	r2, #4294967295
 800fe96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe9a:	f10a 0a01 	add.w	sl, sl, #1
 800fe9e:	9304      	str	r3, [sp, #16]
 800fea0:	9307      	str	r3, [sp, #28]
 800fea2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fea6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fea8:	4654      	mov	r4, sl
 800feaa:	2205      	movs	r2, #5
 800feac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feb0:	484e      	ldr	r0, [pc, #312]	@ (800ffec <_svfiprintf_r+0x1e4>)
 800feb2:	f7f0 f98d 	bl	80001d0 <memchr>
 800feb6:	9a04      	ldr	r2, [sp, #16]
 800feb8:	b9d8      	cbnz	r0, 800fef2 <_svfiprintf_r+0xea>
 800feba:	06d0      	lsls	r0, r2, #27
 800febc:	bf44      	itt	mi
 800febe:	2320      	movmi	r3, #32
 800fec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fec4:	0711      	lsls	r1, r2, #28
 800fec6:	bf44      	itt	mi
 800fec8:	232b      	movmi	r3, #43	@ 0x2b
 800feca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fece:	f89a 3000 	ldrb.w	r3, [sl]
 800fed2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fed4:	d015      	beq.n	800ff02 <_svfiprintf_r+0xfa>
 800fed6:	9a07      	ldr	r2, [sp, #28]
 800fed8:	4654      	mov	r4, sl
 800feda:	2000      	movs	r0, #0
 800fedc:	f04f 0c0a 	mov.w	ip, #10
 800fee0:	4621      	mov	r1, r4
 800fee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fee6:	3b30      	subs	r3, #48	@ 0x30
 800fee8:	2b09      	cmp	r3, #9
 800feea:	d94b      	bls.n	800ff84 <_svfiprintf_r+0x17c>
 800feec:	b1b0      	cbz	r0, 800ff1c <_svfiprintf_r+0x114>
 800feee:	9207      	str	r2, [sp, #28]
 800fef0:	e014      	b.n	800ff1c <_svfiprintf_r+0x114>
 800fef2:	eba0 0308 	sub.w	r3, r0, r8
 800fef6:	fa09 f303 	lsl.w	r3, r9, r3
 800fefa:	4313      	orrs	r3, r2
 800fefc:	9304      	str	r3, [sp, #16]
 800fefe:	46a2      	mov	sl, r4
 800ff00:	e7d2      	b.n	800fea8 <_svfiprintf_r+0xa0>
 800ff02:	9b03      	ldr	r3, [sp, #12]
 800ff04:	1d19      	adds	r1, r3, #4
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	9103      	str	r1, [sp, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	bfbb      	ittet	lt
 800ff0e:	425b      	neglt	r3, r3
 800ff10:	f042 0202 	orrlt.w	r2, r2, #2
 800ff14:	9307      	strge	r3, [sp, #28]
 800ff16:	9307      	strlt	r3, [sp, #28]
 800ff18:	bfb8      	it	lt
 800ff1a:	9204      	strlt	r2, [sp, #16]
 800ff1c:	7823      	ldrb	r3, [r4, #0]
 800ff1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff20:	d10a      	bne.n	800ff38 <_svfiprintf_r+0x130>
 800ff22:	7863      	ldrb	r3, [r4, #1]
 800ff24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff26:	d132      	bne.n	800ff8e <_svfiprintf_r+0x186>
 800ff28:	9b03      	ldr	r3, [sp, #12]
 800ff2a:	1d1a      	adds	r2, r3, #4
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	9203      	str	r2, [sp, #12]
 800ff30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff34:	3402      	adds	r4, #2
 800ff36:	9305      	str	r3, [sp, #20]
 800ff38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fffc <_svfiprintf_r+0x1f4>
 800ff3c:	7821      	ldrb	r1, [r4, #0]
 800ff3e:	2203      	movs	r2, #3
 800ff40:	4650      	mov	r0, sl
 800ff42:	f7f0 f945 	bl	80001d0 <memchr>
 800ff46:	b138      	cbz	r0, 800ff58 <_svfiprintf_r+0x150>
 800ff48:	9b04      	ldr	r3, [sp, #16]
 800ff4a:	eba0 000a 	sub.w	r0, r0, sl
 800ff4e:	2240      	movs	r2, #64	@ 0x40
 800ff50:	4082      	lsls	r2, r0
 800ff52:	4313      	orrs	r3, r2
 800ff54:	3401      	adds	r4, #1
 800ff56:	9304      	str	r3, [sp, #16]
 800ff58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5c:	4824      	ldr	r0, [pc, #144]	@ (800fff0 <_svfiprintf_r+0x1e8>)
 800ff5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff62:	2206      	movs	r2, #6
 800ff64:	f7f0 f934 	bl	80001d0 <memchr>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d036      	beq.n	800ffda <_svfiprintf_r+0x1d2>
 800ff6c:	4b21      	ldr	r3, [pc, #132]	@ (800fff4 <_svfiprintf_r+0x1ec>)
 800ff6e:	bb1b      	cbnz	r3, 800ffb8 <_svfiprintf_r+0x1b0>
 800ff70:	9b03      	ldr	r3, [sp, #12]
 800ff72:	3307      	adds	r3, #7
 800ff74:	f023 0307 	bic.w	r3, r3, #7
 800ff78:	3308      	adds	r3, #8
 800ff7a:	9303      	str	r3, [sp, #12]
 800ff7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff7e:	4433      	add	r3, r6
 800ff80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff82:	e76a      	b.n	800fe5a <_svfiprintf_r+0x52>
 800ff84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff88:	460c      	mov	r4, r1
 800ff8a:	2001      	movs	r0, #1
 800ff8c:	e7a8      	b.n	800fee0 <_svfiprintf_r+0xd8>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	3401      	adds	r4, #1
 800ff92:	9305      	str	r3, [sp, #20]
 800ff94:	4619      	mov	r1, r3
 800ff96:	f04f 0c0a 	mov.w	ip, #10
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffa0:	3a30      	subs	r2, #48	@ 0x30
 800ffa2:	2a09      	cmp	r2, #9
 800ffa4:	d903      	bls.n	800ffae <_svfiprintf_r+0x1a6>
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0c6      	beq.n	800ff38 <_svfiprintf_r+0x130>
 800ffaa:	9105      	str	r1, [sp, #20]
 800ffac:	e7c4      	b.n	800ff38 <_svfiprintf_r+0x130>
 800ffae:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e7f0      	b.n	800ff9a <_svfiprintf_r+0x192>
 800ffb8:	ab03      	add	r3, sp, #12
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	462a      	mov	r2, r5
 800ffbe:	4b0e      	ldr	r3, [pc, #56]	@ (800fff8 <_svfiprintf_r+0x1f0>)
 800ffc0:	a904      	add	r1, sp, #16
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7fd feda 	bl	800dd7c <_printf_float>
 800ffc8:	1c42      	adds	r2, r0, #1
 800ffca:	4606      	mov	r6, r0
 800ffcc:	d1d6      	bne.n	800ff7c <_svfiprintf_r+0x174>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	065b      	lsls	r3, r3, #25
 800ffd2:	f53f af2d 	bmi.w	800fe30 <_svfiprintf_r+0x28>
 800ffd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ffd8:	e72c      	b.n	800fe34 <_svfiprintf_r+0x2c>
 800ffda:	ab03      	add	r3, sp, #12
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	462a      	mov	r2, r5
 800ffe0:	4b05      	ldr	r3, [pc, #20]	@ (800fff8 <_svfiprintf_r+0x1f0>)
 800ffe2:	a904      	add	r1, sp, #16
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f7fe f961 	bl	800e2ac <_printf_i>
 800ffea:	e7ed      	b.n	800ffc8 <_svfiprintf_r+0x1c0>
 800ffec:	08010b78 	.word	0x08010b78
 800fff0:	08010b82 	.word	0x08010b82
 800fff4:	0800dd7d 	.word	0x0800dd7d
 800fff8:	0800fd51 	.word	0x0800fd51
 800fffc:	08010b7e 	.word	0x08010b7e

08010000 <__sflush_r>:
 8010000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010008:	0716      	lsls	r6, r2, #28
 801000a:	4605      	mov	r5, r0
 801000c:	460c      	mov	r4, r1
 801000e:	d454      	bmi.n	80100ba <__sflush_r+0xba>
 8010010:	684b      	ldr	r3, [r1, #4]
 8010012:	2b00      	cmp	r3, #0
 8010014:	dc02      	bgt.n	801001c <__sflush_r+0x1c>
 8010016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010018:	2b00      	cmp	r3, #0
 801001a:	dd48      	ble.n	80100ae <__sflush_r+0xae>
 801001c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801001e:	2e00      	cmp	r6, #0
 8010020:	d045      	beq.n	80100ae <__sflush_r+0xae>
 8010022:	2300      	movs	r3, #0
 8010024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010028:	682f      	ldr	r7, [r5, #0]
 801002a:	6a21      	ldr	r1, [r4, #32]
 801002c:	602b      	str	r3, [r5, #0]
 801002e:	d030      	beq.n	8010092 <__sflush_r+0x92>
 8010030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	0759      	lsls	r1, r3, #29
 8010036:	d505      	bpl.n	8010044 <__sflush_r+0x44>
 8010038:	6863      	ldr	r3, [r4, #4]
 801003a:	1ad2      	subs	r2, r2, r3
 801003c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801003e:	b10b      	cbz	r3, 8010044 <__sflush_r+0x44>
 8010040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010042:	1ad2      	subs	r2, r2, r3
 8010044:	2300      	movs	r3, #0
 8010046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010048:	6a21      	ldr	r1, [r4, #32]
 801004a:	4628      	mov	r0, r5
 801004c:	47b0      	blx	r6
 801004e:	1c43      	adds	r3, r0, #1
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	d106      	bne.n	8010062 <__sflush_r+0x62>
 8010054:	6829      	ldr	r1, [r5, #0]
 8010056:	291d      	cmp	r1, #29
 8010058:	d82b      	bhi.n	80100b2 <__sflush_r+0xb2>
 801005a:	4a2a      	ldr	r2, [pc, #168]	@ (8010104 <__sflush_r+0x104>)
 801005c:	410a      	asrs	r2, r1
 801005e:	07d6      	lsls	r6, r2, #31
 8010060:	d427      	bmi.n	80100b2 <__sflush_r+0xb2>
 8010062:	2200      	movs	r2, #0
 8010064:	6062      	str	r2, [r4, #4]
 8010066:	04d9      	lsls	r1, r3, #19
 8010068:	6922      	ldr	r2, [r4, #16]
 801006a:	6022      	str	r2, [r4, #0]
 801006c:	d504      	bpl.n	8010078 <__sflush_r+0x78>
 801006e:	1c42      	adds	r2, r0, #1
 8010070:	d101      	bne.n	8010076 <__sflush_r+0x76>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b903      	cbnz	r3, 8010078 <__sflush_r+0x78>
 8010076:	6560      	str	r0, [r4, #84]	@ 0x54
 8010078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801007a:	602f      	str	r7, [r5, #0]
 801007c:	b1b9      	cbz	r1, 80100ae <__sflush_r+0xae>
 801007e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010082:	4299      	cmp	r1, r3
 8010084:	d002      	beq.n	801008c <__sflush_r+0x8c>
 8010086:	4628      	mov	r0, r5
 8010088:	f7ff fa96 	bl	800f5b8 <_free_r>
 801008c:	2300      	movs	r3, #0
 801008e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010090:	e00d      	b.n	80100ae <__sflush_r+0xae>
 8010092:	2301      	movs	r3, #1
 8010094:	4628      	mov	r0, r5
 8010096:	47b0      	blx	r6
 8010098:	4602      	mov	r2, r0
 801009a:	1c50      	adds	r0, r2, #1
 801009c:	d1c9      	bne.n	8010032 <__sflush_r+0x32>
 801009e:	682b      	ldr	r3, [r5, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d0c6      	beq.n	8010032 <__sflush_r+0x32>
 80100a4:	2b1d      	cmp	r3, #29
 80100a6:	d001      	beq.n	80100ac <__sflush_r+0xac>
 80100a8:	2b16      	cmp	r3, #22
 80100aa:	d11e      	bne.n	80100ea <__sflush_r+0xea>
 80100ac:	602f      	str	r7, [r5, #0]
 80100ae:	2000      	movs	r0, #0
 80100b0:	e022      	b.n	80100f8 <__sflush_r+0xf8>
 80100b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100b6:	b21b      	sxth	r3, r3
 80100b8:	e01b      	b.n	80100f2 <__sflush_r+0xf2>
 80100ba:	690f      	ldr	r7, [r1, #16]
 80100bc:	2f00      	cmp	r7, #0
 80100be:	d0f6      	beq.n	80100ae <__sflush_r+0xae>
 80100c0:	0793      	lsls	r3, r2, #30
 80100c2:	680e      	ldr	r6, [r1, #0]
 80100c4:	bf08      	it	eq
 80100c6:	694b      	ldreq	r3, [r1, #20]
 80100c8:	600f      	str	r7, [r1, #0]
 80100ca:	bf18      	it	ne
 80100cc:	2300      	movne	r3, #0
 80100ce:	eba6 0807 	sub.w	r8, r6, r7
 80100d2:	608b      	str	r3, [r1, #8]
 80100d4:	f1b8 0f00 	cmp.w	r8, #0
 80100d8:	dde9      	ble.n	80100ae <__sflush_r+0xae>
 80100da:	6a21      	ldr	r1, [r4, #32]
 80100dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80100de:	4643      	mov	r3, r8
 80100e0:	463a      	mov	r2, r7
 80100e2:	4628      	mov	r0, r5
 80100e4:	47b0      	blx	r6
 80100e6:	2800      	cmp	r0, #0
 80100e8:	dc08      	bgt.n	80100fc <__sflush_r+0xfc>
 80100ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100f2:	81a3      	strh	r3, [r4, #12]
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295
 80100f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100fc:	4407      	add	r7, r0
 80100fe:	eba8 0800 	sub.w	r8, r8, r0
 8010102:	e7e7      	b.n	80100d4 <__sflush_r+0xd4>
 8010104:	dfbffffe 	.word	0xdfbffffe

08010108 <_fflush_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	690b      	ldr	r3, [r1, #16]
 801010c:	4605      	mov	r5, r0
 801010e:	460c      	mov	r4, r1
 8010110:	b913      	cbnz	r3, 8010118 <_fflush_r+0x10>
 8010112:	2500      	movs	r5, #0
 8010114:	4628      	mov	r0, r5
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	b118      	cbz	r0, 8010122 <_fflush_r+0x1a>
 801011a:	6a03      	ldr	r3, [r0, #32]
 801011c:	b90b      	cbnz	r3, 8010122 <_fflush_r+0x1a>
 801011e:	f7fe fa71 	bl	800e604 <__sinit>
 8010122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d0f3      	beq.n	8010112 <_fflush_r+0xa>
 801012a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801012c:	07d0      	lsls	r0, r2, #31
 801012e:	d404      	bmi.n	801013a <_fflush_r+0x32>
 8010130:	0599      	lsls	r1, r3, #22
 8010132:	d402      	bmi.n	801013a <_fflush_r+0x32>
 8010134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010136:	f7fe fbe2 	bl	800e8fe <__retarget_lock_acquire_recursive>
 801013a:	4628      	mov	r0, r5
 801013c:	4621      	mov	r1, r4
 801013e:	f7ff ff5f 	bl	8010000 <__sflush_r>
 8010142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010144:	07da      	lsls	r2, r3, #31
 8010146:	4605      	mov	r5, r0
 8010148:	d4e4      	bmi.n	8010114 <_fflush_r+0xc>
 801014a:	89a3      	ldrh	r3, [r4, #12]
 801014c:	059b      	lsls	r3, r3, #22
 801014e:	d4e1      	bmi.n	8010114 <_fflush_r+0xc>
 8010150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010152:	f7fe fbd5 	bl	800e900 <__retarget_lock_release_recursive>
 8010156:	e7dd      	b.n	8010114 <_fflush_r+0xc>

08010158 <memmove>:
 8010158:	4288      	cmp	r0, r1
 801015a:	b510      	push	{r4, lr}
 801015c:	eb01 0402 	add.w	r4, r1, r2
 8010160:	d902      	bls.n	8010168 <memmove+0x10>
 8010162:	4284      	cmp	r4, r0
 8010164:	4623      	mov	r3, r4
 8010166:	d807      	bhi.n	8010178 <memmove+0x20>
 8010168:	1e43      	subs	r3, r0, #1
 801016a:	42a1      	cmp	r1, r4
 801016c:	d008      	beq.n	8010180 <memmove+0x28>
 801016e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010176:	e7f8      	b.n	801016a <memmove+0x12>
 8010178:	4402      	add	r2, r0
 801017a:	4601      	mov	r1, r0
 801017c:	428a      	cmp	r2, r1
 801017e:	d100      	bne.n	8010182 <memmove+0x2a>
 8010180:	bd10      	pop	{r4, pc}
 8010182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801018a:	e7f7      	b.n	801017c <memmove+0x24>

0801018c <__assert_func>:
 801018c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801018e:	4614      	mov	r4, r2
 8010190:	461a      	mov	r2, r3
 8010192:	4b09      	ldr	r3, [pc, #36]	@ (80101b8 <__assert_func+0x2c>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4605      	mov	r5, r0
 8010198:	68d8      	ldr	r0, [r3, #12]
 801019a:	b954      	cbnz	r4, 80101b2 <__assert_func+0x26>
 801019c:	4b07      	ldr	r3, [pc, #28]	@ (80101bc <__assert_func+0x30>)
 801019e:	461c      	mov	r4, r3
 80101a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101a4:	9100      	str	r1, [sp, #0]
 80101a6:	462b      	mov	r3, r5
 80101a8:	4905      	ldr	r1, [pc, #20]	@ (80101c0 <__assert_func+0x34>)
 80101aa:	f000 f86f 	bl	801028c <fiprintf>
 80101ae:	f000 f87f 	bl	80102b0 <abort>
 80101b2:	4b04      	ldr	r3, [pc, #16]	@ (80101c4 <__assert_func+0x38>)
 80101b4:	e7f4      	b.n	80101a0 <__assert_func+0x14>
 80101b6:	bf00      	nop
 80101b8:	20002840 	.word	0x20002840
 80101bc:	08010bce 	.word	0x08010bce
 80101c0:	08010ba0 	.word	0x08010ba0
 80101c4:	08010b93 	.word	0x08010b93

080101c8 <_calloc_r>:
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	fba1 5402 	umull	r5, r4, r1, r2
 80101ce:	b93c      	cbnz	r4, 80101e0 <_calloc_r+0x18>
 80101d0:	4629      	mov	r1, r5
 80101d2:	f7fd fca7 	bl	800db24 <_malloc_r>
 80101d6:	4606      	mov	r6, r0
 80101d8:	b928      	cbnz	r0, 80101e6 <_calloc_r+0x1e>
 80101da:	2600      	movs	r6, #0
 80101dc:	4630      	mov	r0, r6
 80101de:	bd70      	pop	{r4, r5, r6, pc}
 80101e0:	220c      	movs	r2, #12
 80101e2:	6002      	str	r2, [r0, #0]
 80101e4:	e7f9      	b.n	80101da <_calloc_r+0x12>
 80101e6:	462a      	mov	r2, r5
 80101e8:	4621      	mov	r1, r4
 80101ea:	f7fe faa4 	bl	800e736 <memset>
 80101ee:	e7f5      	b.n	80101dc <_calloc_r+0x14>

080101f0 <__ascii_mbtowc>:
 80101f0:	b082      	sub	sp, #8
 80101f2:	b901      	cbnz	r1, 80101f6 <__ascii_mbtowc+0x6>
 80101f4:	a901      	add	r1, sp, #4
 80101f6:	b142      	cbz	r2, 801020a <__ascii_mbtowc+0x1a>
 80101f8:	b14b      	cbz	r3, 801020e <__ascii_mbtowc+0x1e>
 80101fa:	7813      	ldrb	r3, [r2, #0]
 80101fc:	600b      	str	r3, [r1, #0]
 80101fe:	7812      	ldrb	r2, [r2, #0]
 8010200:	1e10      	subs	r0, r2, #0
 8010202:	bf18      	it	ne
 8010204:	2001      	movne	r0, #1
 8010206:	b002      	add	sp, #8
 8010208:	4770      	bx	lr
 801020a:	4610      	mov	r0, r2
 801020c:	e7fb      	b.n	8010206 <__ascii_mbtowc+0x16>
 801020e:	f06f 0001 	mvn.w	r0, #1
 8010212:	e7f8      	b.n	8010206 <__ascii_mbtowc+0x16>

08010214 <_realloc_r>:
 8010214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010218:	4680      	mov	r8, r0
 801021a:	4615      	mov	r5, r2
 801021c:	460c      	mov	r4, r1
 801021e:	b921      	cbnz	r1, 801022a <_realloc_r+0x16>
 8010220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	4611      	mov	r1, r2
 8010226:	f7fd bc7d 	b.w	800db24 <_malloc_r>
 801022a:	b92a      	cbnz	r2, 8010238 <_realloc_r+0x24>
 801022c:	f7ff f9c4 	bl	800f5b8 <_free_r>
 8010230:	2400      	movs	r4, #0
 8010232:	4620      	mov	r0, r4
 8010234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010238:	f000 f841 	bl	80102be <_malloc_usable_size_r>
 801023c:	4285      	cmp	r5, r0
 801023e:	4606      	mov	r6, r0
 8010240:	d802      	bhi.n	8010248 <_realloc_r+0x34>
 8010242:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010246:	d8f4      	bhi.n	8010232 <_realloc_r+0x1e>
 8010248:	4629      	mov	r1, r5
 801024a:	4640      	mov	r0, r8
 801024c:	f7fd fc6a 	bl	800db24 <_malloc_r>
 8010250:	4607      	mov	r7, r0
 8010252:	2800      	cmp	r0, #0
 8010254:	d0ec      	beq.n	8010230 <_realloc_r+0x1c>
 8010256:	42b5      	cmp	r5, r6
 8010258:	462a      	mov	r2, r5
 801025a:	4621      	mov	r1, r4
 801025c:	bf28      	it	cs
 801025e:	4632      	movcs	r2, r6
 8010260:	f7fe fb4f 	bl	800e902 <memcpy>
 8010264:	4621      	mov	r1, r4
 8010266:	4640      	mov	r0, r8
 8010268:	f7ff f9a6 	bl	800f5b8 <_free_r>
 801026c:	463c      	mov	r4, r7
 801026e:	e7e0      	b.n	8010232 <_realloc_r+0x1e>

08010270 <__ascii_wctomb>:
 8010270:	4603      	mov	r3, r0
 8010272:	4608      	mov	r0, r1
 8010274:	b141      	cbz	r1, 8010288 <__ascii_wctomb+0x18>
 8010276:	2aff      	cmp	r2, #255	@ 0xff
 8010278:	d904      	bls.n	8010284 <__ascii_wctomb+0x14>
 801027a:	228a      	movs	r2, #138	@ 0x8a
 801027c:	601a      	str	r2, [r3, #0]
 801027e:	f04f 30ff 	mov.w	r0, #4294967295
 8010282:	4770      	bx	lr
 8010284:	700a      	strb	r2, [r1, #0]
 8010286:	2001      	movs	r0, #1
 8010288:	4770      	bx	lr
	...

0801028c <fiprintf>:
 801028c:	b40e      	push	{r1, r2, r3}
 801028e:	b503      	push	{r0, r1, lr}
 8010290:	4601      	mov	r1, r0
 8010292:	ab03      	add	r3, sp, #12
 8010294:	4805      	ldr	r0, [pc, #20]	@ (80102ac <fiprintf+0x20>)
 8010296:	f853 2b04 	ldr.w	r2, [r3], #4
 801029a:	6800      	ldr	r0, [r0, #0]
 801029c:	9301      	str	r3, [sp, #4]
 801029e:	f000 f83f 	bl	8010320 <_vfiprintf_r>
 80102a2:	b002      	add	sp, #8
 80102a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102a8:	b003      	add	sp, #12
 80102aa:	4770      	bx	lr
 80102ac:	20002840 	.word	0x20002840

080102b0 <abort>:
 80102b0:	b508      	push	{r3, lr}
 80102b2:	2006      	movs	r0, #6
 80102b4:	f000 fa08 	bl	80106c8 <raise>
 80102b8:	2001      	movs	r0, #1
 80102ba:	f7f1 fbd5 	bl	8001a68 <_exit>

080102be <_malloc_usable_size_r>:
 80102be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102c2:	1f18      	subs	r0, r3, #4
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	bfbc      	itt	lt
 80102c8:	580b      	ldrlt	r3, [r1, r0]
 80102ca:	18c0      	addlt	r0, r0, r3
 80102cc:	4770      	bx	lr

080102ce <__sfputc_r>:
 80102ce:	6893      	ldr	r3, [r2, #8]
 80102d0:	3b01      	subs	r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	b410      	push	{r4}
 80102d6:	6093      	str	r3, [r2, #8]
 80102d8:	da08      	bge.n	80102ec <__sfputc_r+0x1e>
 80102da:	6994      	ldr	r4, [r2, #24]
 80102dc:	42a3      	cmp	r3, r4
 80102de:	db01      	blt.n	80102e4 <__sfputc_r+0x16>
 80102e0:	290a      	cmp	r1, #10
 80102e2:	d103      	bne.n	80102ec <__sfputc_r+0x1e>
 80102e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102e8:	f000 b932 	b.w	8010550 <__swbuf_r>
 80102ec:	6813      	ldr	r3, [r2, #0]
 80102ee:	1c58      	adds	r0, r3, #1
 80102f0:	6010      	str	r0, [r2, #0]
 80102f2:	7019      	strb	r1, [r3, #0]
 80102f4:	4608      	mov	r0, r1
 80102f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <__sfputs_r>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	4606      	mov	r6, r0
 8010300:	460f      	mov	r7, r1
 8010302:	4614      	mov	r4, r2
 8010304:	18d5      	adds	r5, r2, r3
 8010306:	42ac      	cmp	r4, r5
 8010308:	d101      	bne.n	801030e <__sfputs_r+0x12>
 801030a:	2000      	movs	r0, #0
 801030c:	e007      	b.n	801031e <__sfputs_r+0x22>
 801030e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010312:	463a      	mov	r2, r7
 8010314:	4630      	mov	r0, r6
 8010316:	f7ff ffda 	bl	80102ce <__sfputc_r>
 801031a:	1c43      	adds	r3, r0, #1
 801031c:	d1f3      	bne.n	8010306 <__sfputs_r+0xa>
 801031e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010320 <_vfiprintf_r>:
 8010320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010324:	460d      	mov	r5, r1
 8010326:	b09d      	sub	sp, #116	@ 0x74
 8010328:	4614      	mov	r4, r2
 801032a:	4698      	mov	r8, r3
 801032c:	4606      	mov	r6, r0
 801032e:	b118      	cbz	r0, 8010338 <_vfiprintf_r+0x18>
 8010330:	6a03      	ldr	r3, [r0, #32]
 8010332:	b90b      	cbnz	r3, 8010338 <_vfiprintf_r+0x18>
 8010334:	f7fe f966 	bl	800e604 <__sinit>
 8010338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801033a:	07d9      	lsls	r1, r3, #31
 801033c:	d405      	bmi.n	801034a <_vfiprintf_r+0x2a>
 801033e:	89ab      	ldrh	r3, [r5, #12]
 8010340:	059a      	lsls	r2, r3, #22
 8010342:	d402      	bmi.n	801034a <_vfiprintf_r+0x2a>
 8010344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010346:	f7fe fada 	bl	800e8fe <__retarget_lock_acquire_recursive>
 801034a:	89ab      	ldrh	r3, [r5, #12]
 801034c:	071b      	lsls	r3, r3, #28
 801034e:	d501      	bpl.n	8010354 <_vfiprintf_r+0x34>
 8010350:	692b      	ldr	r3, [r5, #16]
 8010352:	b99b      	cbnz	r3, 801037c <_vfiprintf_r+0x5c>
 8010354:	4629      	mov	r1, r5
 8010356:	4630      	mov	r0, r6
 8010358:	f000 f938 	bl	80105cc <__swsetup_r>
 801035c:	b170      	cbz	r0, 801037c <_vfiprintf_r+0x5c>
 801035e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010360:	07dc      	lsls	r4, r3, #31
 8010362:	d504      	bpl.n	801036e <_vfiprintf_r+0x4e>
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	b01d      	add	sp, #116	@ 0x74
 801036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801036e:	89ab      	ldrh	r3, [r5, #12]
 8010370:	0598      	lsls	r0, r3, #22
 8010372:	d4f7      	bmi.n	8010364 <_vfiprintf_r+0x44>
 8010374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010376:	f7fe fac3 	bl	800e900 <__retarget_lock_release_recursive>
 801037a:	e7f3      	b.n	8010364 <_vfiprintf_r+0x44>
 801037c:	2300      	movs	r3, #0
 801037e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010380:	2320      	movs	r3, #32
 8010382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010386:	f8cd 800c 	str.w	r8, [sp, #12]
 801038a:	2330      	movs	r3, #48	@ 0x30
 801038c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801053c <_vfiprintf_r+0x21c>
 8010390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010394:	f04f 0901 	mov.w	r9, #1
 8010398:	4623      	mov	r3, r4
 801039a:	469a      	mov	sl, r3
 801039c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103a0:	b10a      	cbz	r2, 80103a6 <_vfiprintf_r+0x86>
 80103a2:	2a25      	cmp	r2, #37	@ 0x25
 80103a4:	d1f9      	bne.n	801039a <_vfiprintf_r+0x7a>
 80103a6:	ebba 0b04 	subs.w	fp, sl, r4
 80103aa:	d00b      	beq.n	80103c4 <_vfiprintf_r+0xa4>
 80103ac:	465b      	mov	r3, fp
 80103ae:	4622      	mov	r2, r4
 80103b0:	4629      	mov	r1, r5
 80103b2:	4630      	mov	r0, r6
 80103b4:	f7ff ffa2 	bl	80102fc <__sfputs_r>
 80103b8:	3001      	adds	r0, #1
 80103ba:	f000 80a7 	beq.w	801050c <_vfiprintf_r+0x1ec>
 80103be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103c0:	445a      	add	r2, fp
 80103c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80103c4:	f89a 3000 	ldrb.w	r3, [sl]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 809f 	beq.w	801050c <_vfiprintf_r+0x1ec>
 80103ce:	2300      	movs	r3, #0
 80103d0:	f04f 32ff 	mov.w	r2, #4294967295
 80103d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103d8:	f10a 0a01 	add.w	sl, sl, #1
 80103dc:	9304      	str	r3, [sp, #16]
 80103de:	9307      	str	r3, [sp, #28]
 80103e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80103e6:	4654      	mov	r4, sl
 80103e8:	2205      	movs	r2, #5
 80103ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ee:	4853      	ldr	r0, [pc, #332]	@ (801053c <_vfiprintf_r+0x21c>)
 80103f0:	f7ef feee 	bl	80001d0 <memchr>
 80103f4:	9a04      	ldr	r2, [sp, #16]
 80103f6:	b9d8      	cbnz	r0, 8010430 <_vfiprintf_r+0x110>
 80103f8:	06d1      	lsls	r1, r2, #27
 80103fa:	bf44      	itt	mi
 80103fc:	2320      	movmi	r3, #32
 80103fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010402:	0713      	lsls	r3, r2, #28
 8010404:	bf44      	itt	mi
 8010406:	232b      	movmi	r3, #43	@ 0x2b
 8010408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801040c:	f89a 3000 	ldrb.w	r3, [sl]
 8010410:	2b2a      	cmp	r3, #42	@ 0x2a
 8010412:	d015      	beq.n	8010440 <_vfiprintf_r+0x120>
 8010414:	9a07      	ldr	r2, [sp, #28]
 8010416:	4654      	mov	r4, sl
 8010418:	2000      	movs	r0, #0
 801041a:	f04f 0c0a 	mov.w	ip, #10
 801041e:	4621      	mov	r1, r4
 8010420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010424:	3b30      	subs	r3, #48	@ 0x30
 8010426:	2b09      	cmp	r3, #9
 8010428:	d94b      	bls.n	80104c2 <_vfiprintf_r+0x1a2>
 801042a:	b1b0      	cbz	r0, 801045a <_vfiprintf_r+0x13a>
 801042c:	9207      	str	r2, [sp, #28]
 801042e:	e014      	b.n	801045a <_vfiprintf_r+0x13a>
 8010430:	eba0 0308 	sub.w	r3, r0, r8
 8010434:	fa09 f303 	lsl.w	r3, r9, r3
 8010438:	4313      	orrs	r3, r2
 801043a:	9304      	str	r3, [sp, #16]
 801043c:	46a2      	mov	sl, r4
 801043e:	e7d2      	b.n	80103e6 <_vfiprintf_r+0xc6>
 8010440:	9b03      	ldr	r3, [sp, #12]
 8010442:	1d19      	adds	r1, r3, #4
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	9103      	str	r1, [sp, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	bfbb      	ittet	lt
 801044c:	425b      	neglt	r3, r3
 801044e:	f042 0202 	orrlt.w	r2, r2, #2
 8010452:	9307      	strge	r3, [sp, #28]
 8010454:	9307      	strlt	r3, [sp, #28]
 8010456:	bfb8      	it	lt
 8010458:	9204      	strlt	r2, [sp, #16]
 801045a:	7823      	ldrb	r3, [r4, #0]
 801045c:	2b2e      	cmp	r3, #46	@ 0x2e
 801045e:	d10a      	bne.n	8010476 <_vfiprintf_r+0x156>
 8010460:	7863      	ldrb	r3, [r4, #1]
 8010462:	2b2a      	cmp	r3, #42	@ 0x2a
 8010464:	d132      	bne.n	80104cc <_vfiprintf_r+0x1ac>
 8010466:	9b03      	ldr	r3, [sp, #12]
 8010468:	1d1a      	adds	r2, r3, #4
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	9203      	str	r2, [sp, #12]
 801046e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010472:	3402      	adds	r4, #2
 8010474:	9305      	str	r3, [sp, #20]
 8010476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801054c <_vfiprintf_r+0x22c>
 801047a:	7821      	ldrb	r1, [r4, #0]
 801047c:	2203      	movs	r2, #3
 801047e:	4650      	mov	r0, sl
 8010480:	f7ef fea6 	bl	80001d0 <memchr>
 8010484:	b138      	cbz	r0, 8010496 <_vfiprintf_r+0x176>
 8010486:	9b04      	ldr	r3, [sp, #16]
 8010488:	eba0 000a 	sub.w	r0, r0, sl
 801048c:	2240      	movs	r2, #64	@ 0x40
 801048e:	4082      	lsls	r2, r0
 8010490:	4313      	orrs	r3, r2
 8010492:	3401      	adds	r4, #1
 8010494:	9304      	str	r3, [sp, #16]
 8010496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801049a:	4829      	ldr	r0, [pc, #164]	@ (8010540 <_vfiprintf_r+0x220>)
 801049c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104a0:	2206      	movs	r2, #6
 80104a2:	f7ef fe95 	bl	80001d0 <memchr>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d03f      	beq.n	801052a <_vfiprintf_r+0x20a>
 80104aa:	4b26      	ldr	r3, [pc, #152]	@ (8010544 <_vfiprintf_r+0x224>)
 80104ac:	bb1b      	cbnz	r3, 80104f6 <_vfiprintf_r+0x1d6>
 80104ae:	9b03      	ldr	r3, [sp, #12]
 80104b0:	3307      	adds	r3, #7
 80104b2:	f023 0307 	bic.w	r3, r3, #7
 80104b6:	3308      	adds	r3, #8
 80104b8:	9303      	str	r3, [sp, #12]
 80104ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104bc:	443b      	add	r3, r7
 80104be:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c0:	e76a      	b.n	8010398 <_vfiprintf_r+0x78>
 80104c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80104c6:	460c      	mov	r4, r1
 80104c8:	2001      	movs	r0, #1
 80104ca:	e7a8      	b.n	801041e <_vfiprintf_r+0xfe>
 80104cc:	2300      	movs	r3, #0
 80104ce:	3401      	adds	r4, #1
 80104d0:	9305      	str	r3, [sp, #20]
 80104d2:	4619      	mov	r1, r3
 80104d4:	f04f 0c0a 	mov.w	ip, #10
 80104d8:	4620      	mov	r0, r4
 80104da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104de:	3a30      	subs	r2, #48	@ 0x30
 80104e0:	2a09      	cmp	r2, #9
 80104e2:	d903      	bls.n	80104ec <_vfiprintf_r+0x1cc>
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d0c6      	beq.n	8010476 <_vfiprintf_r+0x156>
 80104e8:	9105      	str	r1, [sp, #20]
 80104ea:	e7c4      	b.n	8010476 <_vfiprintf_r+0x156>
 80104ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80104f0:	4604      	mov	r4, r0
 80104f2:	2301      	movs	r3, #1
 80104f4:	e7f0      	b.n	80104d8 <_vfiprintf_r+0x1b8>
 80104f6:	ab03      	add	r3, sp, #12
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	462a      	mov	r2, r5
 80104fc:	4b12      	ldr	r3, [pc, #72]	@ (8010548 <_vfiprintf_r+0x228>)
 80104fe:	a904      	add	r1, sp, #16
 8010500:	4630      	mov	r0, r6
 8010502:	f7fd fc3b 	bl	800dd7c <_printf_float>
 8010506:	4607      	mov	r7, r0
 8010508:	1c78      	adds	r0, r7, #1
 801050a:	d1d6      	bne.n	80104ba <_vfiprintf_r+0x19a>
 801050c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801050e:	07d9      	lsls	r1, r3, #31
 8010510:	d405      	bmi.n	801051e <_vfiprintf_r+0x1fe>
 8010512:	89ab      	ldrh	r3, [r5, #12]
 8010514:	059a      	lsls	r2, r3, #22
 8010516:	d402      	bmi.n	801051e <_vfiprintf_r+0x1fe>
 8010518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801051a:	f7fe f9f1 	bl	800e900 <__retarget_lock_release_recursive>
 801051e:	89ab      	ldrh	r3, [r5, #12]
 8010520:	065b      	lsls	r3, r3, #25
 8010522:	f53f af1f 	bmi.w	8010364 <_vfiprintf_r+0x44>
 8010526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010528:	e71e      	b.n	8010368 <_vfiprintf_r+0x48>
 801052a:	ab03      	add	r3, sp, #12
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	462a      	mov	r2, r5
 8010530:	4b05      	ldr	r3, [pc, #20]	@ (8010548 <_vfiprintf_r+0x228>)
 8010532:	a904      	add	r1, sp, #16
 8010534:	4630      	mov	r0, r6
 8010536:	f7fd feb9 	bl	800e2ac <_printf_i>
 801053a:	e7e4      	b.n	8010506 <_vfiprintf_r+0x1e6>
 801053c:	08010b78 	.word	0x08010b78
 8010540:	08010b82 	.word	0x08010b82
 8010544:	0800dd7d 	.word	0x0800dd7d
 8010548:	080102fd 	.word	0x080102fd
 801054c:	08010b7e 	.word	0x08010b7e

08010550 <__swbuf_r>:
 8010550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010552:	460e      	mov	r6, r1
 8010554:	4614      	mov	r4, r2
 8010556:	4605      	mov	r5, r0
 8010558:	b118      	cbz	r0, 8010562 <__swbuf_r+0x12>
 801055a:	6a03      	ldr	r3, [r0, #32]
 801055c:	b90b      	cbnz	r3, 8010562 <__swbuf_r+0x12>
 801055e:	f7fe f851 	bl	800e604 <__sinit>
 8010562:	69a3      	ldr	r3, [r4, #24]
 8010564:	60a3      	str	r3, [r4, #8]
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	071a      	lsls	r2, r3, #28
 801056a:	d501      	bpl.n	8010570 <__swbuf_r+0x20>
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	b943      	cbnz	r3, 8010582 <__swbuf_r+0x32>
 8010570:	4621      	mov	r1, r4
 8010572:	4628      	mov	r0, r5
 8010574:	f000 f82a 	bl	80105cc <__swsetup_r>
 8010578:	b118      	cbz	r0, 8010582 <__swbuf_r+0x32>
 801057a:	f04f 37ff 	mov.w	r7, #4294967295
 801057e:	4638      	mov	r0, r7
 8010580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	6922      	ldr	r2, [r4, #16]
 8010586:	1a98      	subs	r0, r3, r2
 8010588:	6963      	ldr	r3, [r4, #20]
 801058a:	b2f6      	uxtb	r6, r6
 801058c:	4283      	cmp	r3, r0
 801058e:	4637      	mov	r7, r6
 8010590:	dc05      	bgt.n	801059e <__swbuf_r+0x4e>
 8010592:	4621      	mov	r1, r4
 8010594:	4628      	mov	r0, r5
 8010596:	f7ff fdb7 	bl	8010108 <_fflush_r>
 801059a:	2800      	cmp	r0, #0
 801059c:	d1ed      	bne.n	801057a <__swbuf_r+0x2a>
 801059e:	68a3      	ldr	r3, [r4, #8]
 80105a0:	3b01      	subs	r3, #1
 80105a2:	60a3      	str	r3, [r4, #8]
 80105a4:	6823      	ldr	r3, [r4, #0]
 80105a6:	1c5a      	adds	r2, r3, #1
 80105a8:	6022      	str	r2, [r4, #0]
 80105aa:	701e      	strb	r6, [r3, #0]
 80105ac:	6962      	ldr	r2, [r4, #20]
 80105ae:	1c43      	adds	r3, r0, #1
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d004      	beq.n	80105be <__swbuf_r+0x6e>
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	07db      	lsls	r3, r3, #31
 80105b8:	d5e1      	bpl.n	801057e <__swbuf_r+0x2e>
 80105ba:	2e0a      	cmp	r6, #10
 80105bc:	d1df      	bne.n	801057e <__swbuf_r+0x2e>
 80105be:	4621      	mov	r1, r4
 80105c0:	4628      	mov	r0, r5
 80105c2:	f7ff fda1 	bl	8010108 <_fflush_r>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d0d9      	beq.n	801057e <__swbuf_r+0x2e>
 80105ca:	e7d6      	b.n	801057a <__swbuf_r+0x2a>

080105cc <__swsetup_r>:
 80105cc:	b538      	push	{r3, r4, r5, lr}
 80105ce:	4b29      	ldr	r3, [pc, #164]	@ (8010674 <__swsetup_r+0xa8>)
 80105d0:	4605      	mov	r5, r0
 80105d2:	6818      	ldr	r0, [r3, #0]
 80105d4:	460c      	mov	r4, r1
 80105d6:	b118      	cbz	r0, 80105e0 <__swsetup_r+0x14>
 80105d8:	6a03      	ldr	r3, [r0, #32]
 80105da:	b90b      	cbnz	r3, 80105e0 <__swsetup_r+0x14>
 80105dc:	f7fe f812 	bl	800e604 <__sinit>
 80105e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105e4:	0719      	lsls	r1, r3, #28
 80105e6:	d422      	bmi.n	801062e <__swsetup_r+0x62>
 80105e8:	06da      	lsls	r2, r3, #27
 80105ea:	d407      	bmi.n	80105fc <__swsetup_r+0x30>
 80105ec:	2209      	movs	r2, #9
 80105ee:	602a      	str	r2, [r5, #0]
 80105f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105f4:	81a3      	strh	r3, [r4, #12]
 80105f6:	f04f 30ff 	mov.w	r0, #4294967295
 80105fa:	e033      	b.n	8010664 <__swsetup_r+0x98>
 80105fc:	0758      	lsls	r0, r3, #29
 80105fe:	d512      	bpl.n	8010626 <__swsetup_r+0x5a>
 8010600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010602:	b141      	cbz	r1, 8010616 <__swsetup_r+0x4a>
 8010604:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010608:	4299      	cmp	r1, r3
 801060a:	d002      	beq.n	8010612 <__swsetup_r+0x46>
 801060c:	4628      	mov	r0, r5
 801060e:	f7fe ffd3 	bl	800f5b8 <_free_r>
 8010612:	2300      	movs	r3, #0
 8010614:	6363      	str	r3, [r4, #52]	@ 0x34
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801061c:	81a3      	strh	r3, [r4, #12]
 801061e:	2300      	movs	r3, #0
 8010620:	6063      	str	r3, [r4, #4]
 8010622:	6923      	ldr	r3, [r4, #16]
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	89a3      	ldrh	r3, [r4, #12]
 8010628:	f043 0308 	orr.w	r3, r3, #8
 801062c:	81a3      	strh	r3, [r4, #12]
 801062e:	6923      	ldr	r3, [r4, #16]
 8010630:	b94b      	cbnz	r3, 8010646 <__swsetup_r+0x7a>
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801063c:	d003      	beq.n	8010646 <__swsetup_r+0x7a>
 801063e:	4621      	mov	r1, r4
 8010640:	4628      	mov	r0, r5
 8010642:	f000 f883 	bl	801074c <__smakebuf_r>
 8010646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801064a:	f013 0201 	ands.w	r2, r3, #1
 801064e:	d00a      	beq.n	8010666 <__swsetup_r+0x9a>
 8010650:	2200      	movs	r2, #0
 8010652:	60a2      	str	r2, [r4, #8]
 8010654:	6962      	ldr	r2, [r4, #20]
 8010656:	4252      	negs	r2, r2
 8010658:	61a2      	str	r2, [r4, #24]
 801065a:	6922      	ldr	r2, [r4, #16]
 801065c:	b942      	cbnz	r2, 8010670 <__swsetup_r+0xa4>
 801065e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010662:	d1c5      	bne.n	80105f0 <__swsetup_r+0x24>
 8010664:	bd38      	pop	{r3, r4, r5, pc}
 8010666:	0799      	lsls	r1, r3, #30
 8010668:	bf58      	it	pl
 801066a:	6962      	ldrpl	r2, [r4, #20]
 801066c:	60a2      	str	r2, [r4, #8]
 801066e:	e7f4      	b.n	801065a <__swsetup_r+0x8e>
 8010670:	2000      	movs	r0, #0
 8010672:	e7f7      	b.n	8010664 <__swsetup_r+0x98>
 8010674:	20002840 	.word	0x20002840

08010678 <_raise_r>:
 8010678:	291f      	cmp	r1, #31
 801067a:	b538      	push	{r3, r4, r5, lr}
 801067c:	4605      	mov	r5, r0
 801067e:	460c      	mov	r4, r1
 8010680:	d904      	bls.n	801068c <_raise_r+0x14>
 8010682:	2316      	movs	r3, #22
 8010684:	6003      	str	r3, [r0, #0]
 8010686:	f04f 30ff 	mov.w	r0, #4294967295
 801068a:	bd38      	pop	{r3, r4, r5, pc}
 801068c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801068e:	b112      	cbz	r2, 8010696 <_raise_r+0x1e>
 8010690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010694:	b94b      	cbnz	r3, 80106aa <_raise_r+0x32>
 8010696:	4628      	mov	r0, r5
 8010698:	f000 f830 	bl	80106fc <_getpid_r>
 801069c:	4622      	mov	r2, r4
 801069e:	4601      	mov	r1, r0
 80106a0:	4628      	mov	r0, r5
 80106a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106a6:	f000 b817 	b.w	80106d8 <_kill_r>
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d00a      	beq.n	80106c4 <_raise_r+0x4c>
 80106ae:	1c59      	adds	r1, r3, #1
 80106b0:	d103      	bne.n	80106ba <_raise_r+0x42>
 80106b2:	2316      	movs	r3, #22
 80106b4:	6003      	str	r3, [r0, #0]
 80106b6:	2001      	movs	r0, #1
 80106b8:	e7e7      	b.n	801068a <_raise_r+0x12>
 80106ba:	2100      	movs	r1, #0
 80106bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80106c0:	4620      	mov	r0, r4
 80106c2:	4798      	blx	r3
 80106c4:	2000      	movs	r0, #0
 80106c6:	e7e0      	b.n	801068a <_raise_r+0x12>

080106c8 <raise>:
 80106c8:	4b02      	ldr	r3, [pc, #8]	@ (80106d4 <raise+0xc>)
 80106ca:	4601      	mov	r1, r0
 80106cc:	6818      	ldr	r0, [r3, #0]
 80106ce:	f7ff bfd3 	b.w	8010678 <_raise_r>
 80106d2:	bf00      	nop
 80106d4:	20002840 	.word	0x20002840

080106d8 <_kill_r>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	4d07      	ldr	r5, [pc, #28]	@ (80106f8 <_kill_r+0x20>)
 80106dc:	2300      	movs	r3, #0
 80106de:	4604      	mov	r4, r0
 80106e0:	4608      	mov	r0, r1
 80106e2:	4611      	mov	r1, r2
 80106e4:	602b      	str	r3, [r5, #0]
 80106e6:	f7f1 f9af 	bl	8001a48 <_kill>
 80106ea:	1c43      	adds	r3, r0, #1
 80106ec:	d102      	bne.n	80106f4 <_kill_r+0x1c>
 80106ee:	682b      	ldr	r3, [r5, #0]
 80106f0:	b103      	cbz	r3, 80106f4 <_kill_r+0x1c>
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	bd38      	pop	{r3, r4, r5, pc}
 80106f6:	bf00      	nop
 80106f8:	20008434 	.word	0x20008434

080106fc <_getpid_r>:
 80106fc:	f7f1 b99c 	b.w	8001a38 <_getpid>

08010700 <__swhatbuf_r>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	460c      	mov	r4, r1
 8010704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010708:	2900      	cmp	r1, #0
 801070a:	b096      	sub	sp, #88	@ 0x58
 801070c:	4615      	mov	r5, r2
 801070e:	461e      	mov	r6, r3
 8010710:	da0d      	bge.n	801072e <__swhatbuf_r+0x2e>
 8010712:	89a3      	ldrh	r3, [r4, #12]
 8010714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010718:	f04f 0100 	mov.w	r1, #0
 801071c:	bf14      	ite	ne
 801071e:	2340      	movne	r3, #64	@ 0x40
 8010720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010724:	2000      	movs	r0, #0
 8010726:	6031      	str	r1, [r6, #0]
 8010728:	602b      	str	r3, [r5, #0]
 801072a:	b016      	add	sp, #88	@ 0x58
 801072c:	bd70      	pop	{r4, r5, r6, pc}
 801072e:	466a      	mov	r2, sp
 8010730:	f000 f848 	bl	80107c4 <_fstat_r>
 8010734:	2800      	cmp	r0, #0
 8010736:	dbec      	blt.n	8010712 <__swhatbuf_r+0x12>
 8010738:	9901      	ldr	r1, [sp, #4]
 801073a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801073e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010742:	4259      	negs	r1, r3
 8010744:	4159      	adcs	r1, r3
 8010746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801074a:	e7eb      	b.n	8010724 <__swhatbuf_r+0x24>

0801074c <__smakebuf_r>:
 801074c:	898b      	ldrh	r3, [r1, #12]
 801074e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010750:	079d      	lsls	r5, r3, #30
 8010752:	4606      	mov	r6, r0
 8010754:	460c      	mov	r4, r1
 8010756:	d507      	bpl.n	8010768 <__smakebuf_r+0x1c>
 8010758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801075c:	6023      	str	r3, [r4, #0]
 801075e:	6123      	str	r3, [r4, #16]
 8010760:	2301      	movs	r3, #1
 8010762:	6163      	str	r3, [r4, #20]
 8010764:	b003      	add	sp, #12
 8010766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010768:	ab01      	add	r3, sp, #4
 801076a:	466a      	mov	r2, sp
 801076c:	f7ff ffc8 	bl	8010700 <__swhatbuf_r>
 8010770:	9f00      	ldr	r7, [sp, #0]
 8010772:	4605      	mov	r5, r0
 8010774:	4639      	mov	r1, r7
 8010776:	4630      	mov	r0, r6
 8010778:	f7fd f9d4 	bl	800db24 <_malloc_r>
 801077c:	b948      	cbnz	r0, 8010792 <__smakebuf_r+0x46>
 801077e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010782:	059a      	lsls	r2, r3, #22
 8010784:	d4ee      	bmi.n	8010764 <__smakebuf_r+0x18>
 8010786:	f023 0303 	bic.w	r3, r3, #3
 801078a:	f043 0302 	orr.w	r3, r3, #2
 801078e:	81a3      	strh	r3, [r4, #12]
 8010790:	e7e2      	b.n	8010758 <__smakebuf_r+0xc>
 8010792:	89a3      	ldrh	r3, [r4, #12]
 8010794:	6020      	str	r0, [r4, #0]
 8010796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801079a:	81a3      	strh	r3, [r4, #12]
 801079c:	9b01      	ldr	r3, [sp, #4]
 801079e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80107a2:	b15b      	cbz	r3, 80107bc <__smakebuf_r+0x70>
 80107a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107a8:	4630      	mov	r0, r6
 80107aa:	f000 f81d 	bl	80107e8 <_isatty_r>
 80107ae:	b128      	cbz	r0, 80107bc <__smakebuf_r+0x70>
 80107b0:	89a3      	ldrh	r3, [r4, #12]
 80107b2:	f023 0303 	bic.w	r3, r3, #3
 80107b6:	f043 0301 	orr.w	r3, r3, #1
 80107ba:	81a3      	strh	r3, [r4, #12]
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	431d      	orrs	r5, r3
 80107c0:	81a5      	strh	r5, [r4, #12]
 80107c2:	e7cf      	b.n	8010764 <__smakebuf_r+0x18>

080107c4 <_fstat_r>:
 80107c4:	b538      	push	{r3, r4, r5, lr}
 80107c6:	4d07      	ldr	r5, [pc, #28]	@ (80107e4 <_fstat_r+0x20>)
 80107c8:	2300      	movs	r3, #0
 80107ca:	4604      	mov	r4, r0
 80107cc:	4608      	mov	r0, r1
 80107ce:	4611      	mov	r1, r2
 80107d0:	602b      	str	r3, [r5, #0]
 80107d2:	f7f1 f999 	bl	8001b08 <_fstat>
 80107d6:	1c43      	adds	r3, r0, #1
 80107d8:	d102      	bne.n	80107e0 <_fstat_r+0x1c>
 80107da:	682b      	ldr	r3, [r5, #0]
 80107dc:	b103      	cbz	r3, 80107e0 <_fstat_r+0x1c>
 80107de:	6023      	str	r3, [r4, #0]
 80107e0:	bd38      	pop	{r3, r4, r5, pc}
 80107e2:	bf00      	nop
 80107e4:	20008434 	.word	0x20008434

080107e8 <_isatty_r>:
 80107e8:	b538      	push	{r3, r4, r5, lr}
 80107ea:	4d06      	ldr	r5, [pc, #24]	@ (8010804 <_isatty_r+0x1c>)
 80107ec:	2300      	movs	r3, #0
 80107ee:	4604      	mov	r4, r0
 80107f0:	4608      	mov	r0, r1
 80107f2:	602b      	str	r3, [r5, #0]
 80107f4:	f7f1 f998 	bl	8001b28 <_isatty>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d102      	bne.n	8010802 <_isatty_r+0x1a>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b103      	cbz	r3, 8010802 <_isatty_r+0x1a>
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	20008434 	.word	0x20008434

08010808 <_init>:
 8010808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080a:	bf00      	nop
 801080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801080e:	bc08      	pop	{r3}
 8010810:	469e      	mov	lr, r3
 8010812:	4770      	bx	lr

08010814 <_fini>:
 8010814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010816:	bf00      	nop
 8010818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801081a:	bc08      	pop	{r3}
 801081c:	469e      	mov	lr, r3
 801081e:	4770      	bx	lr
