
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800ce38  0800ce38  0000de38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf64  0800cf64  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf64  0800cf64  0000df64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf6c  0800cf6c  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf6c  0800cf6c  0000df6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf70  0800cf70  0000df70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800cf74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          00005a3c  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005abc  20005abc  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e0c  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058e2  00000000  00000000  00034ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fa0  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001863  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007143  00000000  00000000  0003dfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002841f  00000000  00000000  000450e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df350  00000000  00000000  0006d505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c855  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008964  00000000  00000000  0014c898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001551fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce20 	.word	0x0800ce20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800ce20 	.word	0x0800ce20

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fdf5 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f86b 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f9b5 	bl	800083c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8d1 	bl	8000678 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8fd 	bl	80006d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f93f 	bl	800075c <MX_SPI1_Init>
  MX_TIM7_Init();
 80004de:	f000 f973 	bl	80007c8 <MX_TIM7_Init>
  MX_RNG_Init();
 80004e2:	f000 f927 	bl	8000734 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e6:	f008 fecd 	bl	8009284 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of swTimer */
  swTimerHandle = osTimerNew(Callback01, osTimerPeriodic, NULL, &swTimer_attributes);
 80004ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000564 <main+0xa4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	2101      	movs	r1, #1
 80004f0:	481d      	ldr	r0, [pc, #116]	@ (8000568 <main+0xa8>)
 80004f2:	f008 ffd3 	bl	800949c <osTimerNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <main+0xac>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osStatus_t mySWTimer;
  mySWTimer = osTimerStart(swTimerHandle, 100);
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <main+0xac>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2164      	movs	r1, #100	@ 0x64
 8000502:	4618      	mov	r0, r3
 8000504:	f009 f846 	bl	8009594 <osTimerStart>
 8000508:	6078      	str	r0, [r7, #4]
  if (mySWTimer == osOK) { /* I hate warnings */ }
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of hinweg */
  hinwegHandle = osMessageQueueNew (16, sizeof(uint16_t), &hinweg_attributes);
 800050a:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <main+0xb0>)
 800050c:	2102      	movs	r1, #2
 800050e:	2010      	movs	r0, #16
 8000510:	f009 f86e 	bl	80095f0 <osMessageQueueNew>
 8000514:	4603      	mov	r3, r0
 8000516:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <main+0xb4>)
 8000518:	6013      	str	r3, [r2, #0]

  /* creation of rueckweg */
  rueckwegHandle = osMessageQueueNew (16, sizeof(uint16_t), &rueckweg_attributes);
 800051a:	4a17      	ldr	r2, [pc, #92]	@ (8000578 <main+0xb8>)
 800051c:	2102      	movs	r1, #2
 800051e:	2010      	movs	r0, #16
 8000520:	f009 f866 	bl	80095f0 <osMessageQueueNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a15      	ldr	r2, [pc, #84]	@ (800057c <main+0xbc>)
 8000528:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a15      	ldr	r2, [pc, #84]	@ (8000580 <main+0xc0>)
 800052c:	2100      	movs	r1, #0
 800052e:	4815      	ldr	r0, [pc, #84]	@ (8000584 <main+0xc4>)
 8000530:	f008 fef2 	bl	8009318 <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <main+0xc8>)
 8000538:	6013      	str	r3, [r2, #0]

  /* creation of producer */
  producerHandle = osThreadNew(StartProducer, NULL, &producer_attributes);
 800053a:	4a14      	ldr	r2, [pc, #80]	@ (800058c <main+0xcc>)
 800053c:	2100      	movs	r1, #0
 800053e:	4814      	ldr	r0, [pc, #80]	@ (8000590 <main+0xd0>)
 8000540:	f008 feea 	bl	8009318 <osThreadNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a13      	ldr	r2, [pc, #76]	@ (8000594 <main+0xd4>)
 8000548:	6013      	str	r3, [r2, #0]

  /* creation of consumer */
  consumerHandle = osThreadNew(StartConsumer, NULL, &consumer_attributes);
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <main+0xd8>)
 800054c:	2100      	movs	r1, #0
 800054e:	4813      	ldr	r0, [pc, #76]	@ (800059c <main+0xdc>)
 8000550:	f008 fee2 	bl	8009318 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <main+0xe0>)
 8000558:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055a:	f008 feb7 	bl	80092cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055e:	bf00      	nop
 8000560:	e7fd      	b.n	800055e <main+0x9e>
 8000562:	bf00      	nop
 8000564:	0800cf3c 	.word	0x0800cf3c
 8000568:	08000af9 	.word	0x08000af9
 800056c:	2000074c 	.word	0x2000074c
 8000570:	0800cf0c 	.word	0x0800cf0c
 8000574:	20000744 	.word	0x20000744
 8000578:	0800cf24 	.word	0x0800cf24
 800057c:	20000748 	.word	0x20000748
 8000580:	0800cea0 	.word	0x0800cea0
 8000584:	08000a39 	.word	0x08000a39
 8000588:	200001e8 	.word	0x200001e8
 800058c:	0800cec4 	.word	0x0800cec4
 8000590:	08000a7d 	.word	0x08000a7d
 8000594:	200001ec 	.word	0x200001ec
 8000598:	0800cee8 	.word	0x0800cee8
 800059c:	08000ae9 	.word	0x08000ae9
 80005a0:	20000498 	.word	0x20000498

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00c fb42 	bl	800cc3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000618:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	4618      	mov	r0, r3
 800062c:	f003 ff8a 	bl	8004544 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000636:	f000 fa89 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f004 f9eb 	bl	8004a34 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 fa72 	bl	8000b4c <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f003 f961 	bl	800397c <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 fa44 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <MX_I2S3_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_I2S3_Init+0x54>)
 80006fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <MX_I2S3_Init+0x5c>)
 80006fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_I2S3_Init+0x54>)
 8000714:	f003 fa76 	bl	8003c04 <HAL_I2S_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071e:	f000 fa15 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000f0 	.word	0x200000f0
 800072c:	40003c00 	.word	0x40003c00
 8000730:	00017700 	.word	0x00017700

08000734 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_RNG_Init+0x20>)
 800073a:	4a07      	ldr	r2, [pc, #28]	@ (8000758 <MX_RNG_Init+0x24>)
 800073c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_RNG_Init+0x20>)
 8000740:	f004 fcf8 	bl	8005134 <HAL_RNG_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800074a:	f000 f9ff 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000138 	.word	0x20000138
 8000758:	50060800 	.word	0x50060800

0800075c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI1_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI1_Init+0x64>)
 80007ae:	f004 fd41 	bl	8005234 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f9c8 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000148 	.word	0x20000148
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007d8:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <MX_TIM7_Init+0x70>)
 80007da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007de:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007ec:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007f8:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_TIM7_Init+0x6c>)
 80007fa:	f004 fda4 	bl	8005346 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000804:	f000 f9a2 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4807      	ldr	r0, [pc, #28]	@ (8000834 <MX_TIM7_Init+0x6c>)
 8000816:	f005 f819 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 f994 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <MX_TIM7_Init+0x6c>)
 8000826:	f004 fddd 	bl	80053e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200001a0 	.word	0x200001a0
 8000838:	40001400 	.word	0x40001400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	@ 0x30
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	4b72      	ldr	r3, [pc, #456]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a71      	ldr	r2, [pc, #452]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0310 	orr.w	r3, r3, #16
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b6f      	ldr	r3, [pc, #444]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0310 	and.w	r3, r3, #16
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	4b6b      	ldr	r3, [pc, #428]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a6a      	ldr	r2, [pc, #424]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b68      	ldr	r3, [pc, #416]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b64      	ldr	r3, [pc, #400]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a63      	ldr	r2, [pc, #396]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b61      	ldr	r3, [pc, #388]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b5d      	ldr	r3, [pc, #372]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a5c      	ldr	r2, [pc, #368]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b56      	ldr	r3, [pc, #344]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a55      	ldr	r2, [pc, #340]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a4e      	ldr	r2, [pc, #312]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000a20 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	4849      	ldr	r0, [pc, #292]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000900:	f000 fed4 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2101      	movs	r1, #1
 8000908:	4847      	ldr	r0, [pc, #284]	@ (8000a28 <MX_GPIO_Init+0x1ec>)
 800090a:	f000 fecf 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090e:	2200      	movs	r2, #0
 8000910:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000914:	4845      	ldr	r0, [pc, #276]	@ (8000a2c <MX_GPIO_Init+0x1f0>)
 8000916:	f000 fec9 	bl	80016ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000932:	f000 fd07 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4836      	ldr	r0, [pc, #216]	@ (8000a28 <MX_GPIO_Init+0x1ec>)
 800094e:	f000 fcf9 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000952:	2308      	movs	r3, #8
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482e      	ldr	r0, [pc, #184]	@ (8000a28 <MX_GPIO_Init+0x1ec>)
 800096e:	f000 fce9 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	482a      	ldr	r0, [pc, #168]	@ (8000a30 <MX_GPIO_Init+0x1f4>)
 8000988:	f000 fcdc 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098c:	2304      	movs	r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4825      	ldr	r0, [pc, #148]	@ (8000a34 <MX_GPIO_Init+0x1f8>)
 80009a0:	f000 fcd0 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b6:	2305      	movs	r3, #5
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <MX_GPIO_Init+0x1f8>)
 80009c2:	f000 fcbf 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_GPIO_Init+0x1f0>)
 80009e0:	f000 fcb0 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e4:	2320      	movs	r3, #32
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_GPIO_Init+0x1f0>)
 80009f8:	f000 fca4 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a00:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000a12:	f000 fc97 	bl	8001344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000a40:	f00b fd3a 	bl	800c4b8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while( 1 )
  {
	osDelay(100);
 8000a44:	2064      	movs	r0, #100	@ 0x64
 8000a46:	f008 fcf9 	bl	800943c <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <StartDefaultTask+0x3c>)
 8000a4e:	f000 fe15 	bl	800167c <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <StartDefaultTask+0x2c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a5c:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <StartDefaultTask+0x40>)
 8000a5e:	f000 fe3e 	bl	80016de <HAL_GPIO_TogglePin>
 8000a62:	e7ef      	b.n	8000a44 <StartDefaultTask+0xc>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6a:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <StartDefaultTask+0x40>)
 8000a6c:	f000 fe1e 	bl	80016ac <HAL_GPIO_WritePin>
	osDelay(100);
 8000a70:	e7e8      	b.n	8000a44 <StartDefaultTask+0xc>
 8000a72:	bf00      	nop
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <StartProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProducer */
void StartProducer(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint32_t randInt;
  uint32_t myRandInt;
  for(;;)
  {
	HAL_RNG_GenerateRandomNumber(&hrng, &randInt);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <StartProducer+0x5c>)
 8000a8c:	f004 fb7c 	bl	8005188 <HAL_RNG_GenerateRandomNumber>
	myRandInt = randInt % 10;
 8000a90:	6979      	ldr	r1, [r7, #20]
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <StartProducer+0x60>)
 8000a94:	fba3 2301 	umull	r2, r3, r3, r1
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	1aca      	subs	r2, r1, r3
 8000aa4:	613a      	str	r2, [r7, #16]


	osMessageQueuePut(hinwegHandle, &myRandInt, 0, osWaitForever);
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <StartProducer+0x64>)
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	f107 0110 	add.w	r1, r7, #16
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f008 fe10 	bl	80096d8 <osMessageQueuePut>

	if(myRandInt == 0) {
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d108      	bne.n	8000ad0 <StartProducer+0x54>
		float result;

		osMessageQueueGet(rueckwegHandle, &result, 0, osWaitForever);
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <StartProducer+0x68>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f107 010c 	add.w	r1, r7, #12
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2200      	movs	r2, #0
 8000acc:	f008 fe64 	bl	8009798 <osMessageQueueGet>
	}
	//if (status1 == osOK && status2 == osOK) { /* I hate warnings */}
	osDelay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 fcb3 	bl	800943c <osDelay>
	HAL_RNG_GenerateRandomNumber(&hrng, &randInt);
 8000ad6:	e7d5      	b.n	8000a84 <StartProducer+0x8>
 8000ad8:	20000138 	.word	0x20000138
 8000adc:	cccccccd 	.word	0xcccccccd
 8000ae0:	20000744 	.word	0x20000744
 8000ae4:	20000748 	.word	0x20000748

08000ae8 <StartConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartConsumer */
void StartConsumer(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartConsumer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f008 fca3 	bl	800943c <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartConsumer+0x8>

08000af8 <Callback01>:
  /* USER CODE END StartConsumer */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
  /* USER CODE END Callback01 */
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM7) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d104      	bne.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b22:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b24:	f000 fddb 	bl	80016de <HAL_GPIO_TogglePin>
	  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8000b32:	f000 fae1 	bl	80010f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001400 	.word	0x40001400
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40001000 	.word	0x40001000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_MspInit+0x54>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_MspInit+0x54>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	f06f 0001 	mvn.w	r0, #1
 8000b9e:	f000 fba7 	bl	80012f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_I2C_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12c      	bne.n	8000c2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <HAL_I2C_MspInit+0x8c>)
 8000c0c:	f000 fb9a 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	4a07      	ldr	r2, [pc, #28]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	@ 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_I2S_MspInit+0xf0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d15a      	bne.n	8000d26 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c74:	23c0      	movs	r3, #192	@ 0xc0
 8000c76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 f915 	bl	8004eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c8c:	f7ff ff5e 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	4a26      	ldr	r2, [pc, #152]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca0:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_I2S_MspInit+0xf4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480e      	ldr	r0, [pc, #56]	@ (8000d38 <HAL_I2S_MspInit+0xf8>)
 8000d00:	f000 fb20 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d04:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d16:	2306      	movs	r3, #6
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4806      	ldr	r0, [pc, #24]	@ (8000d3c <HAL_I2S_MspInit+0xfc>)
 8000d22:	f000 fb0f 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	3738      	adds	r7, #56	@ 0x38
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40003c00 	.word	0x40003c00
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020800 	.word	0x40020800

08000d40 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <HAL_RNG_MspInit+0x3c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10d      	bne.n	8000d6e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_RNG_MspInit+0x40>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5a:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <HAL_RNG_MspInit+0x40>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d60:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <HAL_RNG_MspInit+0x40>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	50060800 	.word	0x50060800
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_SPI_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dde:	23e0      	movs	r3, #224	@ 0xe0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dee:	2305      	movs	r3, #5
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_SPI_MspInit+0x8c>)
 8000dfa:	f000 faa3 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <HAL_TIM_Base_MspInit+0x48>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d115      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_TIM_Base_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e60 <HAL_TIM_Base_MspInit+0x4c>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_TIM_Base_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f003 0320 	and.w	r3, r3, #32
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2105      	movs	r1, #5
 8000e46:	2037      	movs	r0, #55	@ 0x37
 8000e48:	f000 fa52 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e4c:	2037      	movs	r0, #55	@ 0x37
 8000e4e:	f000 fa6b 	bl	8001328 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40001400 	.word	0x40001400
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	@ 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a32      	ldr	r2, [pc, #200]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e90:	f107 0210 	add.w	r2, r7, #16
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 ffd6 	bl	8004e4c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d103      	bne.n	8000eb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eaa:	f003 ffbb 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8000eae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000eb0:	e004      	b.n	8000ebc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb2:	f003 ffb7 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <HAL_InitTick+0xe8>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_InitTick+0xf0>)
 8000ece:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ed2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <HAL_InitTick+0xec>)
 8000eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000edc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <HAL_InitTick+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ef2:	f004 fa28 	bl	8005346 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11b      	bne.n	8000f3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f04:	4812      	ldr	r0, [pc, #72]	@ (8000f50 <HAL_InitTick+0xec>)
 8000f06:	f004 fa6d 	bl	80053e4 <HAL_TIM_Base_Start_IT>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d111      	bne.n	8000f3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f18:	2036      	movs	r0, #54	@ 0x36
 8000f1a:	f000 fa05 	bl	8001328 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d808      	bhi.n	8000f36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2036      	movs	r0, #54	@ 0x36
 8000f2a:	f000 f9e1 	bl	80012f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_InitTick+0xf4>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e002      	b.n	8000f3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3738      	adds	r7, #56	@ 0x38
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	20000750 	.word	0x20000750
 8000f54:	40001000 	.word	0x40001000
 8000f58:	20000004 	.word	0x20000004

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <TIM6_DAC_IRQHandler+0x10>)
 8000f9a:	f004 fa93 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000750 	.word	0x20000750

08000fa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <TIM7_IRQHandler+0x10>)
 8000fae:	f004 fa89 	bl	80054c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001a0 	.word	0x200001a0

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f000 fe87 	bl	8001cd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20005594 	.word	0x20005594

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f00b fe8a 	bl	800cd18 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000798 	.word	0x20000798
 8001038:	20005ac0 	.word	0x20005ac0

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001098 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001064:	f7ff ffea 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001068:	480c      	ldr	r0, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800106a:	490d      	ldr	r1, [pc, #52]	@ (80010a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001080:	4c0a      	ldr	r4, [pc, #40]	@ (80010ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f00b fe49 	bl	800cd24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fa15 	bl	80004c0 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010a4:	0800cf74 	.word	0x0800cf74
  ldr r2, =_sbss
 80010a8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010ac:	20005abc 	.word	0x20005abc

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f8fc 	bl	80012da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff febe 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fd36 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	2000079c 	.word	0x2000079c

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000079c 	.word	0x2000079c

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	@ (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff4c 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001302:	f7ff ff61 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f7ff ffb1 	bl	8001274 <NVIC_EncodePriority>
 8001312:	4602      	mov	r2, r0
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff80 	bl	8001220 <__NVIC_SetPriority>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff54 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e16b      	b.n	8001638 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001360:	2201      	movs	r2, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	429a      	cmp	r2, r3
 800137a:	f040 815a 	bne.w	8001632 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d005      	beq.n	8001396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	2b02      	cmp	r3, #2
 8001394:	d130      	bne.n	80013f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013cc:	2201      	movs	r2, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 0201 	and.w	r2, r3, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b03      	cmp	r3, #3
 8001402:	d017      	beq.n	8001434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	69b9      	ldr	r1, [r7, #24]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 80b4 	beq.w	8001632 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b60      	ldr	r3, [pc, #384]	@ (8001650 <HAL_GPIO_Init+0x30c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001650 <HAL_GPIO_Init+0x30c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b5d      	ldr	r3, [pc, #372]	@ (8001650 <HAL_GPIO_Init+0x30c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <HAL_GPIO_Init+0x310>)
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a52      	ldr	r2, [pc, #328]	@ (8001658 <HAL_GPIO_Init+0x314>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02b      	beq.n	800156a <HAL_GPIO_Init+0x226>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a51      	ldr	r2, [pc, #324]	@ (800165c <HAL_GPIO_Init+0x318>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d025      	beq.n	8001566 <HAL_GPIO_Init+0x222>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a50      	ldr	r2, [pc, #320]	@ (8001660 <HAL_GPIO_Init+0x31c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01f      	beq.n	8001562 <HAL_GPIO_Init+0x21e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4f      	ldr	r2, [pc, #316]	@ (8001664 <HAL_GPIO_Init+0x320>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d019      	beq.n	800155e <HAL_GPIO_Init+0x21a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4e      	ldr	r2, [pc, #312]	@ (8001668 <HAL_GPIO_Init+0x324>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x216>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4d      	ldr	r2, [pc, #308]	@ (800166c <HAL_GPIO_Init+0x328>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x212>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4c      	ldr	r2, [pc, #304]	@ (8001670 <HAL_GPIO_Init+0x32c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4b      	ldr	r2, [pc, #300]	@ (8001674 <HAL_GPIO_Init+0x330>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x20a>
 800154a:	2307      	movs	r3, #7
 800154c:	e00e      	b.n	800156c <HAL_GPIO_Init+0x228>
 800154e:	2308      	movs	r3, #8
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001552:	2306      	movs	r3, #6
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x228>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x228>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x228>
 800156a:	2300      	movs	r3, #0
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157c:	4935      	ldr	r1, [pc, #212]	@ (8001654 <HAL_GPIO_Init+0x310>)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b3b      	ldr	r3, [pc, #236]	@ (8001678 <HAL_GPIO_Init+0x334>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a32      	ldr	r2, [pc, #200]	@ (8001678 <HAL_GPIO_Init+0x334>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <HAL_GPIO_Init+0x334>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <HAL_GPIO_Init+0x334>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015de:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <HAL_GPIO_Init+0x334>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001602:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_GPIO_Init+0x334>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3301      	adds	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b0f      	cmp	r3, #15
 800163c:	f67f ae90 	bls.w	8001360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40013800 	.word	0x40013800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021000 	.word	0x40021000
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40021c00 	.word	0x40021c00
 8001678:	40013c00 	.word	0x40013c00

0800167c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e001      	b.n	800169e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	041a      	lsls	r2, r3, #16
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	400b      	ands	r3, r1
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af02      	add	r7, sp, #8
 8001718:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e059      	b.n	80017d8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f00a ff0e 	bl	800c560 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001752:	d102      	bne.n	800175a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f004 f979 	bl	8005a56 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7c1a      	ldrb	r2, [r3, #16]
 800176c:	f88d 2000 	strb.w	r2, [sp]
 8001770:	3304      	adds	r3, #4
 8001772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001774:	f004 f8fa 	bl	800596c <USB_CoreInit>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e026      	b.n	80017d8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f004 f971 	bl	8005a78 <USB_SetCurrentMode>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e017      	b.n	80017d8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7c1a      	ldrb	r2, [r3, #16]
 80017b0:	f88d 2000 	strb.w	r2, [sp]
 80017b4:	3304      	adds	r3, #4
 80017b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b8:	f004 fb14 	bl	8005de4 <USB_HostInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e004      	b.n	80017d8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70bb      	strb	r3, [r7, #2]
 80017f6:	4613      	mov	r3, r2
 80017f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017fa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80017fc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_HCD_HC_Init+0x2c>
 8001808:	2302      	movs	r3, #2
 800180a:	e09d      	b.n	8001948 <HAL_HCD_HC_Init+0x168>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3319      	adds	r3, #25
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	3314      	adds	r3, #20
 8001838:	787a      	ldrb	r2, [r7, #1]
 800183a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3315      	adds	r3, #21
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3326      	adds	r3, #38	@ 0x26
 8001860:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001864:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	78bb      	ldrb	r3, [r7, #2]
 800186a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800186e:	b2d8      	uxtb	r0, r3
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3316      	adds	r3, #22
 800187e:	4602      	mov	r2, r0
 8001880:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fbc8 	bl	800201c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800188c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001890:	2b00      	cmp	r3, #0
 8001892:	da0a      	bge.n	80018aa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3317      	adds	r3, #23
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e009      	b.n	80018be <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3317      	adds	r3, #23
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fbf2 	bl	80060ac <USB_GetHostSpeed>
 80018c8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80018ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10b      	bne.n	80018ea <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80018d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_HCD_HC_Init+0x10a>
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80018e4:	d901      	bls.n	80018ea <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018e6:	23bc      	movs	r3, #188	@ 0xbc
 80018e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3318      	adds	r3, #24
 80018fa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	b298      	uxth	r0, r3
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3328      	adds	r3, #40	@ 0x28
 8001914:	4602      	mov	r2, r0
 8001916:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	b29b      	uxth	r3, r3
 8001920:	787c      	ldrb	r4, [r7, #1]
 8001922:	78ba      	ldrb	r2, [r7, #2]
 8001924:	78f9      	ldrb	r1, [r7, #3]
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4623      	mov	r3, r4
 8001936:	f004 fbe1 	bl	80060fc <USB_HC_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_HCD_HC_Halt+0x1e>
 800196a:	2302      	movs	r3, #2
 800196c:	e00f      	b.n	800198e <HAL_HCD_HC_Halt+0x3e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f004 ff73 	bl	800686a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	70fb      	strb	r3, [r7, #3]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70bb      	strb	r3, [r7, #2]
 80019ae:	4613      	mov	r3, r2
 80019b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	3317      	adds	r3, #23
 80019c2:	78ba      	ldrb	r2, [r7, #2]
 80019c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3326      	adds	r3, #38	@ 0x26
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019da:	7c3b      	ldrb	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d114      	bne.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	332a      	adds	r3, #42	@ 0x2a
 80019f0:	2203      	movs	r2, #3
 80019f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3319      	adds	r3, #25
 8001a04:	7f3a      	ldrb	r2, [r7, #28]
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e009      	b.n	8001a1e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	332a      	adds	r3, #42	@ 0x2a
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a1e:	787b      	ldrb	r3, [r7, #1]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	f200 8102 	bhi.w	8001c2a <HAL_HCD_HC_SubmitRequest+0x292>
 8001a26:	a201      	add	r2, pc, #4	@ (adr r2, 8001a2c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001c15 	.word	0x08001c15
 8001a34:	08001b01 	.word	0x08001b01
 8001a38:	08001b8b 	.word	0x08001b8b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a3c:	7c3b      	ldrb	r3, [r7, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f040 80f5 	bne.w	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a44:	78bb      	ldrb	r3, [r7, #2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d12d      	bne.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a4a:	8b3b      	ldrh	r3, [r7, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	333d      	adds	r3, #61	@ 0x3d
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	333d      	adds	r3, #61	@ 0x3d
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10a      	bne.n	8001a90 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	332a      	adds	r3, #42	@ 0x2a
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a8e:	e0ce      	b.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	332a      	adds	r3, #42	@ 0x2a
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
      break;
 8001aa4:	e0c3      	b.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	331a      	adds	r3, #26
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 80b8 	bne.w	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	333c      	adds	r3, #60	@ 0x3c
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10a      	bne.n	8001aea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	332a      	adds	r3, #42	@ 0x2a
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
      break;
 8001ae8:	e0a1      	b.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	332a      	adds	r3, #42	@ 0x2a
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
      break;
 8001afe:	e096      	b.n	8001c2e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d120      	bne.n	8001b48 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	333d      	adds	r3, #61	@ 0x3d
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	332a      	adds	r3, #42	@ 0x2a
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b30:	e07e      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	332a      	adds	r3, #42	@ 0x2a
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
      break;
 8001b46:	e073      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	333c      	adds	r3, #60	@ 0x3c
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10a      	bne.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	332a      	adds	r3, #42	@ 0x2a
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e05d      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	332a      	adds	r3, #42	@ 0x2a
 8001b84:	2202      	movs	r2, #2
 8001b86:	701a      	strb	r2, [r3, #0]
      break;
 8001b88:	e052      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b8a:	78bb      	ldrb	r3, [r7, #2]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d120      	bne.n	8001bd2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	333d      	adds	r3, #61	@ 0x3d
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10a      	bne.n	8001bbc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	332a      	adds	r3, #42	@ 0x2a
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bba:	e039      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	332a      	adds	r3, #42	@ 0x2a
 8001bcc:	2202      	movs	r2, #2
 8001bce:	701a      	strb	r2, [r3, #0]
      break;
 8001bd0:	e02e      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	333c      	adds	r3, #60	@ 0x3c
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10a      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	332a      	adds	r3, #42	@ 0x2a
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
      break;
 8001bfc:	e018      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	332a      	adds	r3, #42	@ 0x2a
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	e00d      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	332a      	adds	r3, #42	@ 0x2a
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
      break;
 8001c28:	e002      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c2e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	332c      	adds	r3, #44	@ 0x2c
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	8b39      	ldrh	r1, [r7, #24]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4403      	add	r3, r0
 8001c54:	3334      	adds	r3, #52	@ 0x34
 8001c56:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	334c      	adds	r3, #76	@ 0x4c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3338      	adds	r3, #56	@ 0x38
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3315      	adds	r3, #21
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	334d      	adds	r3, #77	@ 0x4d
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	3310      	adds	r3, #16
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	1d19      	adds	r1, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	799b      	ldrb	r3, [r3, #6]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f004 fb46 	bl	8006354 <USB_HC_StartXfer>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop

08001cd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 f83a 	bl	8005d64 <USB_GetMode>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	f040 80fb 	bne.w	8001eee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fffd 	bl	8005cfc <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80f1 	beq.w	8001eec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fff4 	bl	8005cfc <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d1e:	d104      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ffe4 	bl	8005cfc <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d3e:	d104      	bne.n	8001d4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 ffd4 	bl	8005cfc <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d5e:	d104      	bne.n	8001d6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 ffc4 	bl	8005cfc <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d103      	bne.n	8001d86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 ffb6 	bl	8005cfc <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d9a:	d120      	bne.n	8001dde <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001da4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d113      	bne.n	8001dde <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001db6:	2110      	movs	r1, #16
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f003 fea9 	bl	8005b10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f003 fed8 	bl	8005b74 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7a5b      	ldrb	r3, [r3, #9]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d105      	bne.n	8001dd8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f8ca 	bl	8005f6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f00a fc3f 	bl	800c65c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 ff8a 	bl	8005cfc <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df2:	d102      	bne.n	8001dfa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f001 fd4d 	bl	8003894 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 ff7c 	bl	8005cfc <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d106      	bne.n	8001e1c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f00a fc08 	bl	800c624 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2208      	movs	r2, #8
 8001e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 ff6b 	bl	8005cfc <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e30:	d139      	bne.n	8001ea6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fd06 	bl	8006848 <USB_HC_ReadInterrupt>
 8001e3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e025      	b.n	8001e90 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d018      	beq.n	8001e8a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e6e:	d106      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f905 	bl	8002086 <HCD_HC_IN_IRQHandler>
 8001e7c:	e005      	b.n	8001e8a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 ff67 	bl	8002d58 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	795b      	ldrb	r3, [r3, #5]
 8001e94:	461a      	mov	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d3d3      	bcc.n	8001e44 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 ff26 	bl	8005cfc <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d101      	bne.n	8001ebe <HAL_HCD_IRQHandler+0x1ea>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_HCD_IRQHandler+0x1ec>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d014      	beq.n	8001eee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0210 	bic.w	r2, r2, #16
 8001ed2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 fbfe 	bl	80036d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0210 	orr.w	r2, r2, #16
 8001ee8:	619a      	str	r2, [r3, #24]
 8001eea:	e000      	b.n	8001eee <HAL_HCD_IRQHandler+0x21a>
      return;
 8001eec:	bf00      	nop
    }
  }
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_HCD_Start+0x16>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e013      	b.n	8001f32 <HAL_HCD_Start+0x3e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 f88e 	bl	800603a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fd86 	bl	8005a34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_HCD_Stop+0x16>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e00d      	b.n	8001f6c <HAL_HCD_Stop+0x32>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fde1 	bl	8006b24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 f830 	bl	8005fe6 <USB_ResetPort>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	334c      	adds	r3, #76	@ 0x4c
 8001fac:	781b      	ldrb	r3, [r3, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3338      	adds	r3, #56	@ 0x38
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f872 	bl	80060da <USB_GetCurrentFrame>
 8001ff6:	4603      	mov	r3, r0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f004 f84d 	bl	80060ac <USB_GetHostSpeed>
 8002012:	4603      	mov	r3, r0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	331a      	adds	r3, #26
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	331b      	adds	r3, #27
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3325      	adds	r3, #37	@ 0x25
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3324      	adds	r3, #36	@ 0x24
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fe3c 	bl	8005d22 <USB_ReadChInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d11a      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c0:	461a      	mov	r2, r3
 80020c2:	2304      	movs	r3, #4
 80020c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	334d      	adds	r3, #77	@ 0x4d
 80020d6:	2207      	movs	r2, #7
 80020d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 fbc1 	bl	800686a <USB_HC_Halt>
 80020e8:	e09e      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fe15 	bl	8005d22 <USB_ReadChInterrupts>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002102:	d11b      	bne.n	800213c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002110:	461a      	mov	r2, r3
 8002112:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002116:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	334d      	adds	r3, #77	@ 0x4d
 8002128:	2208      	movs	r2, #8
 800212a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fb98 	bl	800686a <USB_HC_Halt>
 800213a:	e075      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fdec 	bl	8005d22 <USB_ReadChInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d11a      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2308      	movs	r3, #8
 8002164:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	334d      	adds	r3, #77	@ 0x4d
 8002176:	2206      	movs	r2, #6
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f004 fb71 	bl	800686a <USB_HC_Halt>
 8002188:	e04e      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fdc5 	bl	8005d22 <USB_ReadChInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a2:	d11b      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	334d      	adds	r3, #77	@ 0x4d
 80021c8:	2209      	movs	r2, #9
 80021ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fb48 	bl	800686a <USB_HC_Halt>
 80021da:	e025      	b.n	8002228 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 fd9c 	bl	8005d22 <USB_ReadChInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f0:	2b80      	cmp	r3, #128	@ 0x80
 80021f2:	d119      	bne.n	8002228 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	334d      	adds	r3, #77	@ 0x4d
 8002216:	2207      	movs	r2, #7
 8002218:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fb21 	bl	800686a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fd76 	bl	8005d22 <USB_ReadChInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002240:	d112      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fb0d 	bl	800686a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	f000 bd75 	b.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fd56 	bl	8005d22 <USB_ReadChInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	f040 8128 	bne.w	80024d2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	2320      	movs	r3, #32
 8002292:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	331b      	adds	r3, #27
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d119      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	331b      	adds	r3, #27
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	0151      	lsls	r1, r2, #5
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	440a      	add	r2, r1
 80022d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022dc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	799b      	ldrb	r3, [r3, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01b      	beq.n	800231e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3330      	adds	r3, #48	@ 0x30
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	1ac9      	subs	r1, r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4403      	add	r3, r0
 800231a:	3338      	adds	r3, #56	@ 0x38
 800231c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	334d      	adds	r3, #77	@ 0x4d
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3344      	adds	r3, #68	@ 0x44
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002352:	461a      	mov	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3326      	adds	r3, #38	@ 0x26
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3326      	adds	r3, #38	@ 0x26
 800237e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002380:	2b02      	cmp	r3, #2
 8002382:	d110      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fa6c 	bl	800686a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	2310      	movs	r3, #16
 80023a2:	6093      	str	r3, [r2, #8]
 80023a4:	e03d      	b.n	8002422 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3326      	adds	r3, #38	@ 0x26
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d00a      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3326      	adds	r3, #38	@ 0x26
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d127      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023f0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	334c      	adds	r3, #76	@ 0x4c
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334c      	adds	r3, #76	@ 0x4c
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f00a f92b 	bl	800c678 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	799b      	ldrb	r3, [r3, #6]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d13b      	bne.n	80024a2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3338      	adds	r3, #56	@ 0x38
 800243a:	6819      	ldr	r1, [r3, #0]
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4403      	add	r3, r0
 800244a:	3328      	adds	r3, #40	@ 0x28
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	440b      	add	r3, r1
 8002450:	1e59      	subs	r1, r3, #1
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4403      	add	r3, r0
 8002460:	3328      	adds	r3, #40	@ 0x28
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	fbb1 f3f3 	udiv	r3, r1, r3
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8470 	beq.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	333c      	adds	r3, #60	@ 0x3c
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	333c      	adds	r3, #60	@ 0x3c
 800249a:	4602      	mov	r2, r0
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	f000 bc58 	b.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	333c      	adds	r3, #60	@ 0x3c
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2d8      	uxtb	r0, r3
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	333c      	adds	r3, #60	@ 0x3c
 80024ca:	4602      	mov	r2, r0
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	f000 bc40 	b.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fc21 	bl	8005d22 <USB_ReadChInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d131      	bne.n	800254e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2320      	movs	r3, #32
 80024fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	331a      	adds	r3, #26
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 841f 	bne.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	331b      	adds	r3, #27
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334d      	adds	r3, #77	@ 0x4d
 8002538:	2203      	movs	r2, #3
 800253a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f990 	bl	800686a <USB_HC_Halt>
 800254a:	f000 bc02 	b.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fbe3 	bl	8005d22 <USB_ReadChInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 8305 	bne.w	8002b72 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	2302      	movs	r3, #2
 8002578:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334d      	adds	r3, #77	@ 0x4d
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d114      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334d      	adds	r3, #77	@ 0x4d
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	334c      	adds	r3, #76	@ 0x4c
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e2cc      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334d      	adds	r3, #77	@ 0x4d
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d114      	bne.n	80025fa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334d      	adds	r3, #77	@ 0x4d
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334c      	adds	r3, #76	@ 0x4c
 80025f4:	2205      	movs	r2, #5
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e2ac      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	334d      	adds	r3, #77	@ 0x4d
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d00b      	beq.n	8002628 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334d      	adds	r3, #77	@ 0x4d
 8002620:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002622:	2b09      	cmp	r3, #9
 8002624:	f040 80a6 	bne.w	8002774 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334d      	adds	r3, #77	@ 0x4d
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3344      	adds	r3, #68	@ 0x44
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1c59      	adds	r1, r3, #1
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	3344      	adds	r3, #68	@ 0x44
 800265e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3344      	adds	r3, #68	@ 0x44
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d943      	bls.n	80026fe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3344      	adds	r3, #68	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	331a      	adds	r3, #26
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d123      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	331b      	adds	r3, #27
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	331c      	adds	r3, #28
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	334c      	adds	r3, #76	@ 0x4c
 80026f8:	2204      	movs	r2, #4
 80026fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026fc:	e229      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	334c      	adds	r3, #76	@ 0x4c
 800270e:	2202      	movs	r2, #2
 8002710:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3326      	adds	r3, #38	@ 0x26
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3326      	adds	r3, #38	@ 0x26
 8002738:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273a:	2b02      	cmp	r3, #2
 800273c:	f040 8209 	bne.w	8002b52 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002756:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800275e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002772:	e1ee      	b.n	8002b52 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	@ 0x4d
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b05      	cmp	r3, #5
 8002788:	f040 80c8 	bne.w	800291c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334d      	adds	r3, #77	@ 0x4d
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	331b      	adds	r3, #27
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	f040 81ce 	bne.w	8002b54 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3326      	adds	r3, #38	@ 0x26
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d16b      	bne.n	80028a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3348      	adds	r3, #72	@ 0x48
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c59      	adds	r1, r3, #1
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	3348      	adds	r3, #72	@ 0x48
 80027f0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3348      	adds	r3, #72	@ 0x48
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d943      	bls.n	8002890 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3348      	adds	r3, #72	@ 0x48
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	331b      	adds	r3, #27
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	3344      	adds	r3, #68	@ 0x44
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d809      	bhi.n	800285a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	331c      	adds	r3, #28
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	78fa      	ldrb	r2, [r7, #3]
 800286a:	0151      	lsls	r1, r2, #5
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	440a      	add	r2, r1
 8002870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002878:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	334c      	adds	r3, #76	@ 0x4c
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e014      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334c      	adds	r3, #76	@ 0x4c
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e009      	b.n	80028ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	334c      	adds	r3, #76	@ 0x4c
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3326      	adds	r3, #38	@ 0x26
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00b      	beq.n	80028e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3326      	adds	r3, #38	@ 0x26
 80028e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	f040 8136 	bne.w	8002b54 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002906:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e11b      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334d      	adds	r3, #77	@ 0x4d
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	f040 8081 	bne.w	8002a36 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334d      	adds	r3, #77	@ 0x4d
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	331b      	adds	r3, #27
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	f040 80fa 	bne.w	8002b54 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334c      	adds	r3, #76	@ 0x4c
 8002970:	2202      	movs	r2, #2
 8002972:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	0151      	lsls	r1, r2, #5
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	440a      	add	r2, r1
 800298a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800298e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002992:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	0151      	lsls	r1, r2, #5
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	440a      	add	r2, r1
 80029ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029ce:	f023 0320 	bic.w	r3, r3, #32
 80029d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3326      	adds	r3, #38	@ 0x26
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3326      	adds	r3, #38	@ 0x26
 80029fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	f040 80a9 	bne.w	8002b54 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a18:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a20:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e08e      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	334d      	adds	r3, #77	@ 0x4d
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d143      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	334d      	adds	r3, #77	@ 0x4d
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334c      	adds	r3, #76	@ 0x4c
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3326      	adds	r3, #38	@ 0x26
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3326      	adds	r3, #38	@ 0x26
 8002a9a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d159      	bne.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ab6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002abe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e03f      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	334d      	adds	r3, #77	@ 0x4d
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d126      	bne.n	8002b38 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	334d      	adds	r3, #77	@ 0x4d
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	@ 0x44
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c59      	adds	r1, r3, #1
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4403      	add	r3, r0
 8002b1e:	3344      	adds	r3, #68	@ 0x44
 8002b20:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	334c      	adds	r3, #76	@ 0x4c
 8002b32:	2204      	movs	r2, #4
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e00d      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	334d      	adds	r3, #77	@ 0x4d
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	f000 8100 	beq.w	8002d50 <HCD_HC_IN_IRQHandler+0xcca>
 8002b50:	e000      	b.n	8002b54 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b52:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334c      	adds	r3, #76	@ 0x4c
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f009 fd84 	bl	800c678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b70:	e0ef      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f8d1 	bl	8005d22 <USB_ReadChInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b86:	2b40      	cmp	r3, #64	@ 0x40
 8002b88:	d12f      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	2340      	movs	r3, #64	@ 0x40
 8002b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	334d      	adds	r3, #77	@ 0x4d
 8002bac:	2205      	movs	r2, #5
 8002bae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	331a      	adds	r3, #26
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3344      	adds	r3, #68	@ 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fe41 	bl	800686a <USB_HC_Halt>
 8002be8:	e0b3      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 f895 	bl	8005d22 <USB_ReadChInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	f040 80a7 	bne.w	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3326      	adds	r3, #38	@ 0x26
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d11b      	bne.n	8002c52 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3344      	adds	r3, #68	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	334d      	adds	r3, #77	@ 0x4d
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fe0d 	bl	800686a <USB_HC_Halt>
 8002c50:	e03f      	b.n	8002cd2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3326      	adds	r3, #38	@ 0x26
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3326      	adds	r3, #38	@ 0x26
 8002c78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d129      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3344      	adds	r3, #68	@ 0x44
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	799b      	ldrb	r3, [r3, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	331b      	adds	r3, #27
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d110      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fdcc 	bl	800686a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	331b      	adds	r3, #27
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d129      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	331b      	adds	r3, #27
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	0151      	lsls	r1, r2, #5
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	440a      	add	r2, r1
 8002d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	6093      	str	r3, [r2, #8]
 8002d4e:	e000      	b.n	8002d52 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d50:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 ffd3 	bl	8005d22 <USB_ReadChInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d11b      	bne.n	8002dbe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2304      	movs	r3, #4
 8002d96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334d      	adds	r3, #77	@ 0x4d
 8002da8:	2207      	movs	r2, #7
 8002daa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fd58 	bl	800686a <USB_HC_Halt>
 8002dba:	f000 bc89 	b.w	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 ffab 	bl	8005d22 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	f040 8082 	bne.w	8002edc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	2320      	movs	r3, #32
 8002de8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3319      	adds	r3, #25
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d124      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3319      	adds	r3, #25
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	334c      	adds	r3, #76	@ 0x4c
 8002e24:	2202      	movs	r2, #2
 8002e26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	334d      	adds	r3, #77	@ 0x4d
 8002e38:	2203      	movs	r2, #3
 8002e3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 fd10 	bl	800686a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	331a      	adds	r3, #26
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 8437 	bne.w	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	331b      	adds	r3, #27
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 842b 	bne.w	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3326      	adds	r3, #38	@ 0x26
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d009      	beq.n	8002ea4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	331b      	adds	r3, #27
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334d      	adds	r3, #77	@ 0x4d
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fcd2 	bl	800686a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e3f9      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 ff1c 	bl	8005d22 <USB_ReadChInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d111      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fca9 	bl	800686a <USB_HC_Halt>
 8002f18:	e3da      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fefd 	bl	8005d22 <USB_ReadChInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d168      	bne.n	8003004 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	@ 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fee7 	bl	8005d22 <USB_ReadChInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d112      	bne.n	8002f84 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3319      	adds	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2340      	movs	r3, #64	@ 0x40
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	331b      	adds	r3, #27
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	331b      	adds	r3, #27
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	0151      	lsls	r1, r2, #5
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	440a      	add	r2, r1
 8002fc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2301      	movs	r3, #1
 8002fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 fc34 	bl	800686a <USB_HC_Halt>
 8003002:	e365      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f002 fe88 	bl	8005d22 <USB_ReadChInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003018:	2b40      	cmp	r3, #64	@ 0x40
 800301a:	d139      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	334d      	adds	r3, #77	@ 0x4d
 800302c:	2205      	movs	r2, #5
 800302e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	331a      	adds	r3, #26
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3319      	adds	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3344      	adds	r3, #68	@ 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fbf7 	bl	800686a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2340      	movs	r3, #64	@ 0x40
 800308c:	6093      	str	r3, [r2, #8]
 800308e:	e31f      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f002 fe42 	bl	8005d22 <USB_ReadChInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d11a      	bne.n	80030de <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	2308      	movs	r3, #8
 80030b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	334d      	adds	r3, #77	@ 0x4d
 80030ca:	2206      	movs	r2, #6
 80030cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fbc7 	bl	800686a <USB_HC_Halt>
 80030dc:	e2f8      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 fe1b 	bl	8005d22 <USB_ReadChInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d144      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3344      	adds	r3, #68	@ 0x44
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334d      	adds	r3, #77	@ 0x4d
 800311a:	2204      	movs	r2, #4
 800311c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3319      	adds	r3, #25
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d114      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3318      	adds	r3, #24
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3319      	adds	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fb7f 	bl	800686a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2310      	movs	r3, #16
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	e2a7      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f002 fdca 	bl	8005d22 <USB_ReadChInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b80      	cmp	r3, #128	@ 0x80
 8003196:	f040 8083 	bne.w	80032a0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	799b      	ldrb	r3, [r3, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d111      	bne.n	80031c6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334d      	adds	r3, #77	@ 0x4d
 80031b2:	2207      	movs	r2, #7
 80031b4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fb53 	bl	800686a <USB_HC_Halt>
 80031c4:	e062      	b.n	800328c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3344      	adds	r3, #68	@ 0x44
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c59      	adds	r1, r3, #1
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	3344      	adds	r3, #68	@ 0x44
 80031e8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3344      	adds	r3, #68	@ 0x44
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d922      	bls.n	8003246 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	@ 0x44
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334c      	adds	r3, #76	@ 0x4c
 8003224:	2204      	movs	r2, #4
 8003226:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334c      	adds	r3, #76	@ 0x4c
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f009 fa1a 	bl	800c678 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003244:	e022      	b.n	800328c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334c      	adds	r3, #76	@ 0x4c
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003270:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003278:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003298:	461a      	mov	r2, r3
 800329a:	2380      	movs	r3, #128	@ 0x80
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	e217      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fd3a 	bl	8005d22 <USB_ReadChInterrupts>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b8:	d11b      	bne.n	80032f2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334d      	adds	r3, #77	@ 0x4d
 80032ca:	2209      	movs	r2, #9
 80032cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fac7 	bl	800686a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e8:	461a      	mov	r2, r3
 80032ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	e1ee      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fd11 	bl	8005d22 <USB_ReadChInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 81df 	bne.w	80036ca <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2302      	movs	r3, #2
 800331c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	334d      	adds	r3, #77	@ 0x4d
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 8093 	bne.w	800345c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	334d      	adds	r3, #77	@ 0x4d
 8003346:	2202      	movs	r2, #2
 8003348:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334c      	adds	r3, #76	@ 0x4c
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3326      	adds	r3, #38	@ 0x26
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d00b      	beq.n	800338c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3326      	adds	r3, #38	@ 0x26
 8003384:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003386:	2b03      	cmp	r3, #3
 8003388:	f040 8190 	bne.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	799b      	ldrb	r3, [r3, #6]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d115      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	333d      	adds	r3, #61	@ 0x3d
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2d8      	uxtb	r0, r3
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	333d      	adds	r3, #61	@ 0x3d
 80033bc:	4602      	mov	r2, r0
 80033be:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	799b      	ldrb	r3, [r3, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	f040 8171 	bne.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3334      	adds	r3, #52	@ 0x34
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8165 	beq.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	3334      	adds	r3, #52	@ 0x34
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	440b      	add	r3, r1
 8003408:	1e59      	subs	r1, r3, #1
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4403      	add	r3, r0
 8003418:	3328      	adds	r3, #40	@ 0x28
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003420:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 813f 	beq.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	333d      	adds	r3, #61	@ 0x3d
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2d8      	uxtb	r0, r3
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	333d      	adds	r3, #61	@ 0x3d
 8003456:	4602      	mov	r2, r0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e127      	b.n	80036ac <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	334d      	adds	r3, #77	@ 0x4d
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d120      	bne.n	80034b4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334d      	adds	r3, #77	@ 0x4d
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	331b      	adds	r3, #27
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	f040 8107 	bne.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334c      	adds	r3, #76	@ 0x4c
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e0fb      	b.n	80036ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	@ 0x4d
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d13a      	bne.n	8003540 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	334d      	adds	r3, #77	@ 0x4d
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334c      	adds	r3, #76	@ 0x4c
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	331b      	adds	r3, #27
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 80d1 	bne.w	80036ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	331b      	adds	r3, #27
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	0151      	lsls	r1, r2, #5
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	440a      	add	r2, r1
 8003534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353c:	6053      	str	r3, [r2, #4]
 800353e:	e0b5      	b.n	80036ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	334d      	adds	r3, #77	@ 0x4d
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d114      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334d      	adds	r3, #77	@ 0x4d
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	@ 0x4c
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e095      	b.n	80036ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334d      	adds	r3, #77	@ 0x4d
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d114      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334d      	adds	r3, #77	@ 0x4d
 80035a6:	2202      	movs	r2, #2
 80035a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	@ 0x4c
 80035ba:	2205      	movs	r2, #5
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e075      	b.n	80036ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	334d      	adds	r3, #77	@ 0x4d
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b07      	cmp	r3, #7
 80035d4:	d00a      	beq.n	80035ec <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	@ 0x4d
 80035e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d170      	bne.n	80036ce <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3344      	adds	r3, #68	@ 0x44
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4403      	add	r3, r0
 8003620:	3344      	adds	r3, #68	@ 0x44
 8003622:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3344      	adds	r3, #68	@ 0x44
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d914      	bls.n	8003664 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3344      	adds	r3, #68	@ 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	334c      	adds	r3, #76	@ 0x4c
 800365e:	2204      	movs	r2, #4
 8003660:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003662:	e022      	b.n	80036aa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334c      	adds	r3, #76	@ 0x4c
 8003674:	2202      	movs	r2, #2
 8003676:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800368e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003696:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	334c      	adds	r3, #76	@ 0x4c
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f008 ffd8 	bl	800c678 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80036ce:	bf00      	nop
  }
}
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b08a      	sub	sp, #40	@ 0x28
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	0c5b      	lsrs	r3, r3, #17
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800370a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d004      	beq.n	800371c <HCD_RXQLVL_IRQHandler+0x46>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b05      	cmp	r3, #5
 8003716:	f000 80b6 	beq.w	8003886 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800371a:	e0b7      	b.n	800388c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80b3 	beq.w	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	332c      	adds	r3, #44	@ 0x2c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a7 	beq.w	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3338      	adds	r3, #56	@ 0x38
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	18d1      	adds	r1, r2, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4403      	add	r3, r0
 8003760:	3334      	adds	r3, #52	@ 0x34
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4299      	cmp	r1, r3
 8003766:	f200 8083 	bhi.w	8003870 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	332c      	adds	r3, #44	@ 0x2c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	b292      	uxth	r2, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f002 fa61 	bl	8005c4c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	332c      	adds	r3, #44	@ 0x2c
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	18d1      	adds	r1, r2, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	332c      	adds	r3, #44	@ 0x2c
 80037b0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3338      	adds	r3, #56	@ 0x38
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	18d1      	adds	r1, r2, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	3338      	adds	r3, #56	@ 0x38
 80037d8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	0cdb      	lsrs	r3, r3, #19
 80037ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3328      	adds	r3, #40	@ 0x28
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4293      	cmp	r3, r2
 8003808:	d13f      	bne.n	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d03c      	beq.n	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003826:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800382e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	333c      	adds	r3, #60	@ 0x3c
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f083 0301 	eor.w	r3, r3, #1
 8003858:	b2d8      	uxtb	r0, r3
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	333c      	adds	r3, #60	@ 0x3c
 800386a:	4602      	mov	r2, r0
 800386c:	701a      	strb	r2, [r3, #0]
      break;
 800386e:	e00c      	b.n	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	334c      	adds	r3, #76	@ 0x4c
 8003880:	2204      	movs	r2, #4
 8003882:	701a      	strb	r2, [r3, #0]
      break;
 8003884:	e001      	b.n	800388a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800388a:	bf00      	nop
  }
}
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	@ 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d10b      	bne.n	80038e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d102      	bne.n	80038dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f008 feb2 	bl	800c640 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d132      	bne.n	8003954 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 0308 	orr.w	r3, r3, #8
 80038f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d126      	bne.n	800394e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7a5b      	ldrb	r3, [r3, #9]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d113      	bne.n	8003930 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800390e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003912:	d106      	bne.n	8003922 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2102      	movs	r1, #2
 800391a:	4618      	mov	r0, r3
 800391c:	f002 fb26 	bl	8005f6c <USB_InitFSLSPClkSel>
 8003920:	e011      	b.n	8003946 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fb1f 	bl	8005f6c <USB_InitFSLSPClkSel>
 800392e:	e00a      	b.n	8003946 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	79db      	ldrb	r3, [r3, #7]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800393e:	461a      	mov	r2, r3
 8003940:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003944:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f008 fea8 	bl	800c69c <HAL_HCD_PortEnabled_Callback>
 800394c:	e002      	b.n	8003954 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f008 feb2 	bl	800c6b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d103      	bne.n	8003966 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f043 0320 	orr.w	r3, r3, #32
 8003964:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6013      	str	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e12b      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd f904 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	@ 0x24
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039e0:	f001 fa20 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 80039e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4a81      	ldr	r2, [pc, #516]	@ (8003bf0 <HAL_I2C_Init+0x274>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d807      	bhi.n	8003a00 <HAL_I2C_Init+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a80      	ldr	r2, [pc, #512]	@ (8003bf4 <HAL_I2C_Init+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e006      	b.n	8003a0e <HAL_I2C_Init+0x92>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a7d      	ldr	r2, [pc, #500]	@ (8003bf8 <HAL_I2C_Init+0x27c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0e7      	b.n	8003be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a78      	ldr	r2, [pc, #480]	@ (8003bfc <HAL_I2C_Init+0x280>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	0c9b      	lsrs	r3, r3, #18
 8003a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf0 <HAL_I2C_Init+0x274>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d802      	bhi.n	8003a50 <HAL_I2C_Init+0xd4>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	e009      	b.n	8003a64 <HAL_I2C_Init+0xe8>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	4a69      	ldr	r2, [pc, #420]	@ (8003c00 <HAL_I2C_Init+0x284>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	3301      	adds	r3, #1
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	495c      	ldr	r1, [pc, #368]	@ (8003bf0 <HAL_I2C_Init+0x274>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d819      	bhi.n	8003ab8 <HAL_I2C_Init+0x13c>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e59      	subs	r1, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a98:	400b      	ands	r3, r1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_I2C_Init+0x138>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e59      	subs	r1, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	e051      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	e04f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <HAL_I2C_Init+0x168>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1e58      	subs	r0, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e012      	b.n	8003b0a <HAL_I2C_Init+0x18e>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	1e58      	subs	r0, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	0099      	lsls	r1, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Init+0x196>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e022      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_I2C_Init+0x1bc>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e58      	subs	r0, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	440b      	add	r3, r1
 8003b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Init+0x1dc>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e58      	subs	r0, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	0099      	lsls	r1, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	6809      	ldr	r1, [r1, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6911      	ldr	r1, [r2, #16]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	4311      	orrs	r1, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	000186a0 	.word	0x000186a0
 8003bf4:	001e847f 	.word	0x001e847f
 8003bf8:	003d08ff 	.word	0x003d08ff
 8003bfc:	431bde83 	.word	0x431bde83
 8003c00:	10624dd3 	.word	0x10624dd3

08003c04 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e128      	b.n	8003e68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a90      	ldr	r2, [pc, #576]	@ (8003e70 <HAL_I2S_Init+0x26c>)
 8003c2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd f805 	bl	8000c40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c4c:	f023 030f 	bic.w	r3, r3, #15
 8003c50:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2202      	movs	r2, #2
 8003c58:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d060      	beq.n	8003d24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c6a:	2310      	movs	r3, #16
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e001      	b.n	8003c74 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d802      	bhi.n	8003c82 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c82:	2001      	movs	r0, #1
 8003c84:	f001 f9f6 	bl	8005074 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c88:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c92:	d125      	bne.n	8003ce0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	3305      	adds	r3, #5
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e01f      	b.n	8003cfe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	3305      	adds	r3, #5
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e00e      	b.n	8003cfe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	3305      	adds	r3, #5
 8003cfc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4a5c      	ldr	r2, [pc, #368]	@ (8003e74 <HAL_I2S_Init+0x270>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d24:	2302      	movs	r3, #2
 8003d26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d902      	bls.n	8003d38 <HAL_I2S_Init+0x134>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2bff      	cmp	r3, #255	@ 0xff
 8003d36:	d907      	bls.n	8003d48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	f043 0210 	orr.w	r2, r3, #16
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e08f      	b.n	8003e68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	ea42 0103 	orr.w	r1, r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d66:	f023 030f 	bic.w	r3, r3, #15
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6851      	ldr	r1, [r2, #4]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68d2      	ldr	r2, [r2, #12]
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6992      	ldr	r2, [r2, #24]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d161      	bne.n	8003e58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a38      	ldr	r2, [pc, #224]	@ (8003e78 <HAL_I2S_Init+0x274>)
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a37      	ldr	r2, [pc, #220]	@ (8003e7c <HAL_I2S_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_I2S_Init+0x1a4>
 8003da4:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <HAL_I2S_Init+0x27c>)
 8003da6:	e001      	b.n	8003dac <HAL_I2S_Init+0x1a8>
 8003da8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	4932      	ldr	r1, [pc, #200]	@ (8003e7c <HAL_I2S_Init+0x278>)
 8003db4:	428a      	cmp	r2, r1
 8003db6:	d101      	bne.n	8003dbc <HAL_I2S_Init+0x1b8>
 8003db8:	4a31      	ldr	r2, [pc, #196]	@ (8003e80 <HAL_I2S_Init+0x27c>)
 8003dba:	e001      	b.n	8003dc0 <HAL_I2S_Init+0x1bc>
 8003dbc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003dc0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dc4:	f023 030f 	bic.w	r3, r3, #15
 8003dc8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2b      	ldr	r2, [pc, #172]	@ (8003e7c <HAL_I2S_Init+0x278>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_I2S_Init+0x1d4>
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <HAL_I2S_Init+0x27c>)
 8003dd6:	e001      	b.n	8003ddc <HAL_I2S_Init+0x1d8>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ddc:	2202      	movs	r2, #2
 8003dde:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a25      	ldr	r2, [pc, #148]	@ (8003e7c <HAL_I2S_Init+0x278>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_I2S_Init+0x1ea>
 8003dea:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <HAL_I2S_Init+0x27c>)
 8003dec:	e001      	b.n	8003df2 <HAL_I2S_Init+0x1ee>
 8003dee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfe:	d003      	beq.n	8003e08 <HAL_I2S_Init+0x204>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	e001      	b.n	8003e14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <HAL_I2S_Init+0x278>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2S_Init+0x24c>
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <HAL_I2S_Init+0x27c>)
 8003e4e:	e001      	b.n	8003e54 <HAL_I2S_Init+0x250>
 8003e50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e54:	897a      	ldrh	r2, [r7, #10]
 8003e56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	08003f7b 	.word	0x08003f7b
 8003e74:	cccccccd 	.word	0xcccccccd
 8003e78:	08004091 	.word	0x08004091
 8003e7c:	40003800 	.word	0x40003800
 8003e80:	40003400 	.word	0x40003400

08003e84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10e      	bne.n	8003f14 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff ffb8 	bl	8003e84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	b292      	uxth	r2, r2
 8003f30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	1c9a      	adds	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10e      	bne.n	8003f72 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff93 	bl	8003e98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d13a      	bne.n	800400c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d109      	bne.n	8003fb4 <I2S_IRQHandler+0x3a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d102      	bne.n	8003fb4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ffb4 	bl	8003f1c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b40      	cmp	r3, #64	@ 0x40
 8003fbc:	d126      	bne.n	800400c <I2S_IRQHandler+0x92>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d11f      	bne.n	800400c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff50 	bl	8003eac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b03      	cmp	r3, #3
 8004016:	d136      	bne.n	8004086 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d109      	bne.n	8004036 <I2S_IRQHandler+0xbc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b80      	cmp	r3, #128	@ 0x80
 800402e:	d102      	bne.n	8004036 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff45 	bl	8003ec0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d122      	bne.n	8004086 <I2S_IRQHandler+0x10c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d11b      	bne.n	8004086 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800405c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff13 	bl	8003eac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a92      	ldr	r2, [pc, #584]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040aa:	4b92      	ldr	r3, [pc, #584]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ac:	e001      	b.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80040ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a8b      	ldr	r2, [pc, #556]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040c8:	4b8a      	ldr	r3, [pc, #552]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ca:	e001      	b.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040dc:	d004      	beq.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 8099 	bne.w	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f925 	bl	800434c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9c8 	bl	80044ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b40      	cmp	r3, #64	@ 0x40
 8004124:	d13a      	bne.n	800419c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d035      	beq.n	800419c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6e      	ldr	r2, [pc, #440]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800413a:	4b6e      	ldr	r3, [pc, #440]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e001      	b.n	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4969      	ldr	r1, [pc, #420]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800414e:	4b69      	ldr	r3, [pc, #420]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004156:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800415a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800416a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f043 0202 	orr.w	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fe88 	bl	8003eac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	f040 80c3 	bne.w	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80bd 	beq.w	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a49      	ldr	r2, [pc, #292]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041ce:	4b49      	ldr	r3, [pc, #292]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041d0:	e001      	b.n	80041d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4944      	ldr	r1, [pc, #272]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041de:	428b      	cmp	r3, r1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041e2:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e4:	e001      	b.n	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fe4a 	bl	8003eac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004218:	e089      	b.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d107      	bne.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8be 	bl	80043b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d107      	bne.n	800424e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f8fd 	bl	8004448 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b40      	cmp	r3, #64	@ 0x40
 8004256:	d12f      	bne.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02a      	beq.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004270:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800427e:	e001      	b.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4919      	ldr	r1, [pc, #100]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800428c:	428b      	cmp	r3, r1
 800428e:	d101      	bne.n	8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004290:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004292:	e001      	b.n	8004298 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004298:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800429c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0202 	orr.w	r2, r3, #2
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fdfa 	bl	8003eac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d136      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d031      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042d6:	4b07      	ldr	r3, [pc, #28]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d8:	e001      	b.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4902      	ldr	r1, [pc, #8]	@ (80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042e6:	428b      	cmp	r3, r1
 80042e8:	d106      	bne.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042ea:	4b02      	ldr	r3, [pc, #8]	@ (80042f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ec:	e006      	b.n	80042fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042ee:	bf00      	nop
 80042f0:	40003800 	.word	0x40003800
 80042f4:	40003400 	.word	0x40003400
 80042f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004300:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004310:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fdc0 	bl	8003eac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	e000      	b.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800432e:	bf00      	nop
}
 8004330:	bf00      	nop
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	1c99      	adds	r1, r3, #2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6251      	str	r1, [r2, #36]	@ 0x24
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d113      	bne.n	80043a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800438c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ffc9 	bl	8004338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	1c99      	adds	r1, r3, #2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80043c2:	8819      	ldrh	r1, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004440 <I2SEx_TxISR_I2SExt+0x90>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <I2SEx_TxISR_I2SExt+0x22>
 80043ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <I2SEx_TxISR_I2SExt+0x94>)
 80043d0:	e001      	b.n	80043d6 <I2SEx_TxISR_I2SExt+0x26>
 80043d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d6:	460a      	mov	r2, r1
 80043d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d121      	bne.n	8004436 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a12      	ldr	r2, [pc, #72]	@ (8004440 <I2SEx_TxISR_I2SExt+0x90>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d101      	bne.n	8004400 <I2SEx_TxISR_I2SExt+0x50>
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <I2SEx_TxISR_I2SExt+0x94>)
 80043fe:	e001      	b.n	8004404 <I2SEx_TxISR_I2SExt+0x54>
 8004400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	490d      	ldr	r1, [pc, #52]	@ (8004440 <I2SEx_TxISR_I2SExt+0x90>)
 800440c:	428b      	cmp	r3, r1
 800440e:	d101      	bne.n	8004414 <I2SEx_TxISR_I2SExt+0x64>
 8004410:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <I2SEx_TxISR_I2SExt+0x94>)
 8004412:	e001      	b.n	8004418 <I2SEx_TxISR_I2SExt+0x68>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004418:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800441c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff ff81 	bl	8004338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40003800 	.word	0x40003800
 8004444:	40003400 	.word	0x40003400

08004448 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68d8      	ldr	r0, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	1c99      	adds	r1, r3, #2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004460:	b282      	uxth	r2, r0
 8004462:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d113      	bne.n	80044a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800448a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ff4a 	bl	8004338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a20      	ldr	r2, [pc, #128]	@ (800453c <I2SEx_RxISR_I2SExt+0x90>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <I2SEx_RxISR_I2SExt+0x16>
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <I2SEx_RxISR_I2SExt+0x94>)
 80044c0:	e001      	b.n	80044c6 <I2SEx_RxISR_I2SExt+0x1a>
 80044c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044c6:	68d8      	ldr	r0, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	1c99      	adds	r1, r3, #2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044d2:	b282      	uxth	r2, r0
 80044d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d121      	bne.n	8004532 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a12      	ldr	r2, [pc, #72]	@ (800453c <I2SEx_RxISR_I2SExt+0x90>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <I2SEx_RxISR_I2SExt+0x50>
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <I2SEx_RxISR_I2SExt+0x94>)
 80044fa:	e001      	b.n	8004500 <I2SEx_RxISR_I2SExt+0x54>
 80044fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	490d      	ldr	r1, [pc, #52]	@ (800453c <I2SEx_RxISR_I2SExt+0x90>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d101      	bne.n	8004510 <I2SEx_RxISR_I2SExt+0x64>
 800450c:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <I2SEx_RxISR_I2SExt+0x94>)
 800450e:	e001      	b.n	8004514 <I2SEx_RxISR_I2SExt+0x68>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004514:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004518:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff03 	bl	8004338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40003800 	.word	0x40003800
 8004540:	40003400 	.word	0x40003400

08004544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e267      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d075      	beq.n	800464e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004562:	4b88      	ldr	r3, [pc, #544]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00c      	beq.n	8004588 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b85      	ldr	r3, [pc, #532]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004576:	2b08      	cmp	r3, #8
 8004578:	d112      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b82      	ldr	r3, [pc, #520]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004586:	d10b      	bne.n	80045a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	4b7e      	ldr	r3, [pc, #504]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <HAL_RCC_OscConfig+0x108>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d157      	bne.n	800464c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e242      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a8:	d106      	bne.n	80045b8 <HAL_RCC_OscConfig+0x74>
 80045aa:	4b76      	ldr	r3, [pc, #472]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a75      	ldr	r2, [pc, #468]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e01d      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x98>
 80045c2:	4b70      	ldr	r3, [pc, #448]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_RCC_OscConfig+0xb0>
 80045dc:	4b69      	ldr	r3, [pc, #420]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a68      	ldr	r2, [pc, #416]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b66      	ldr	r3, [pc, #408]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a65      	ldr	r2, [pc, #404]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fc fd90 	bl	8001120 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004604:	f7fc fd8c 	bl	8001120 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	@ 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e207      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b5b      	ldr	r3, [pc, #364]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0xc0>
 8004622:	e014      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fc fd7c 	bl	8001120 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800462c:	f7fc fd78 	bl	8001120 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	@ 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1f3      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0xe8>
 800464a:	e000      	b.n	800464e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800465a:	4b4a      	ldr	r3, [pc, #296]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800466e:	2b08      	cmp	r3, #8
 8004670:	d11c      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b44      	ldr	r3, [pc, #272]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d116      	bne.n	80046ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467e:	4b41      	ldr	r3, [pc, #260]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e1c7      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4937      	ldr	r1, [pc, #220]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	e03a      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d020      	beq.n	80046f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b4:	4b34      	ldr	r3, [pc, #208]	@ (8004788 <HAL_RCC_OscConfig+0x244>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fc fd31 	bl	8001120 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fc fd2d 	bl	8001120 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1a8      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b28      	ldr	r3, [pc, #160]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4925      	ldr	r1, [pc, #148]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
 80046f4:	e015      	b.n	8004722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b24      	ldr	r3, [pc, #144]	@ (8004788 <HAL_RCC_OscConfig+0x244>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fc fd10 	bl	8001120 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004704:	f7fc fd0c 	bl	8001120 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e187      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004716:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d036      	beq.n	800479c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_RCC_OscConfig+0x248>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fc fcf0 	bl	8001120 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004744:	f7fc fcec 	bl	8001120 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e167      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_RCC_OscConfig+0x240>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x200>
 8004762:	e01b      	b.n	800479c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004764:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_RCC_OscConfig+0x248>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fc fcd9 	bl	8001120 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004770:	e00e      	b.n	8004790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004772:	f7fc fcd5 	bl	8001120 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d907      	bls.n	8004790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e150      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	42470000 	.word	0x42470000
 800478c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ea      	bne.n	8004772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8097 	beq.w	80048d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b81      	ldr	r3, [pc, #516]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	4b7d      	ldr	r3, [pc, #500]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	4a7c      	ldr	r2, [pc, #496]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ca:	4b7a      	ldr	r3, [pc, #488]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b77      	ldr	r3, [pc, #476]	@ (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d118      	bne.n	8004818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e6:	4b74      	ldr	r3, [pc, #464]	@ (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	@ (80049b8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f2:	f7fc fc95 	bl	8001120 <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fc fc91 	bl	8001120 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e10c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCC_OscConfig+0x474>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x2ea>
 8004820:	4b64      	ldr	r3, [pc, #400]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	4a63      	ldr	r2, [pc, #396]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	@ 0x70
 800482c:	e01c      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b05      	cmp	r3, #5
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0x30c>
 8004836:	4b5f      	ldr	r3, [pc, #380]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	4a5e      	ldr	r2, [pc, #376]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	@ 0x70
 8004842:	4b5c      	ldr	r3, [pc, #368]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	4a5b      	ldr	r2, [pc, #364]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6713      	str	r3, [r2, #112]	@ 0x70
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x324>
 8004850:	4b58      	ldr	r3, [pc, #352]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004854:	4a57      	ldr	r2, [pc, #348]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	@ 0x70
 800485c:	4b55      	ldr	r3, [pc, #340]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a54      	ldr	r2, [pc, #336]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0304 	bic.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d015      	beq.n	800489c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fc fc56 	bl	8001120 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e00a      	b.n	800488e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004878:	f7fc fc52 	bl	8001120 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e0cb      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	4b49      	ldr	r3, [pc, #292]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0ee      	beq.n	8004878 <HAL_RCC_OscConfig+0x334>
 800489a:	e014      	b.n	80048c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fc fc40 	bl	8001120 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fc fc3c 	bl	8001120 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0b5      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ba:	4b3e      	ldr	r3, [pc, #248]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ee      	bne.n	80048a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b39      	ldr	r3, [pc, #228]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	4a38      	ldr	r2, [pc, #224]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a1 	beq.w	8004a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e2:	4b34      	ldr	r3, [pc, #208]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d05c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d141      	bne.n	800497a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	@ (80049bc <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fc fc10 	bl	8001120 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fc fc0c 	bl	8001120 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e087      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b27      	ldr	r3, [pc, #156]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	491b      	ldr	r1, [pc, #108]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x478>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fc fbe5 	bl	8001120 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fc fbe1 	bl	8001120 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e05c      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x416>
 8004978:	e054      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <HAL_RCC_OscConfig+0x478>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fbce 	bl	8001120 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fc fbca 	bl	8001120 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e045      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <HAL_RCC_OscConfig+0x470>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x444>
 80049a6:	e03d      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e038      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a30 <HAL_RCC_OscConfig+0x4ec>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d028      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d121      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d11a      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0cc      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b68      	ldr	r3, [pc, #416]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d90c      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b65      	ldr	r3, [pc, #404]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d044      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e06f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e067      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4934      	ldr	r1, [pc, #208]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fc fafc 	bl	8001120 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fc faf8 	bl	8001120 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e04f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b25      	ldr	r3, [pc, #148]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20c      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b22      	ldr	r3, [pc, #136]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc f942 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	0800cf4c 	.word	0x0800cf4c
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000004 	.word	0x20000004

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b094      	sub	sp, #80	@ 0x50
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b79      	ldr	r3, [pc, #484]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80e1 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e0db      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b73      	ldr	r3, [pc, #460]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c38:	e0db      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b73      	ldr	r3, [pc, #460]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c3e:	e0d8      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b6f      	ldr	r3, [pc, #444]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d063      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b6a      	ldr	r3, [pc, #424]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c72:	4622      	mov	r2, r4
 8004c74:	462b      	mov	r3, r5
 8004c76:	f04f 0000 	mov.w	r0, #0
 8004c7a:	f04f 0100 	mov.w	r1, #0
 8004c7e:	0159      	lsls	r1, r3, #5
 8004c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c84:	0150      	lsls	r0, r2, #5
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	1a51      	subs	r1, r2, r1
 8004c8e:	6139      	str	r1, [r7, #16]
 8004c90:	4629      	mov	r1, r5
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	018b      	lsls	r3, r1, #6
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cae:	4651      	mov	r1, sl
 8004cb0:	018a      	lsls	r2, r1, #6
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb8:	4659      	mov	r1, fp
 8004cba:	eb63 0901 	sbc.w	r9, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb18 0303 	adds.w	r3, r8, r3
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	462b      	mov	r3, r5
 8004ce0:	eb49 0303 	adc.w	r3, r9, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	024b      	lsls	r3, r1, #9
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	024a      	lsls	r2, r1, #9
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d10:	f7fb fa5e 	bl	80001d0 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1c:	e058      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b38      	ldr	r3, [pc, #224]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	2200      	movs	r2, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	4611      	mov	r1, r2
 8004d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	f04f 0000 	mov.w	r0, #0
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	0159      	lsls	r1, r3, #5
 8004d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4a:	0150      	lsls	r0, r2, #5
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4641      	mov	r1, r8
 8004d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d56:	4649      	mov	r1, r9
 8004d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d70:	ebb2 040a 	subs.w	r4, r2, sl
 8004d74:	eb63 050b 	sbc.w	r5, r3, fp
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	00eb      	lsls	r3, r5, #3
 8004d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d86:	00e2      	lsls	r2, r4, #3
 8004d88:	4614      	mov	r4, r2
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	464b      	mov	r3, r9
 8004d94:	eb45 0303 	adc.w	r3, r5, r3
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	61fa      	str	r2, [r7, #28]
 8004dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc4:	f7fb fa04 	bl	80001d0 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004de0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3750      	adds	r7, #80	@ 0x50
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	007a1200 	.word	0x007a1200

08004e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000000 	.word	0x20000000

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4903      	ldr	r1, [pc, #12]	@ (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40023800 	.word	0x40023800
 8004e48:	0800cf5c 	.word	0x0800cf5c

08004e4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	220f      	movs	r2, #15
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e80:	4b09      	ldr	r3, [pc, #36]	@ (8004ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e8e:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <HAL_RCC_GetClockConfig+0x60>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	601a      	str	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40023c00 	.word	0x40023c00

08004eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d035      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ed8:	4b62      	ldr	r3, [pc, #392]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ede:	f7fc f91f 	bl	8001120 <HAL_GetTick>
 8004ee2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ee6:	f7fc f91b 	bl	8001120 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0b0      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	019a      	lsls	r2, r3, #6
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	071b      	lsls	r3, r3, #28
 8004f10:	4955      	ldr	r1, [pc, #340]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f18:	4b52      	ldr	r3, [pc, #328]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f1e:	f7fc f8ff 	bl	8001120 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f26:	f7fc f8fb 	bl	8001120 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e090      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f38:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8083 	beq.w	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	4b44      	ldr	r3, [pc, #272]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	4a43      	ldr	r2, [pc, #268]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f62:	4b41      	ldr	r3, [pc, #260]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3e      	ldr	r2, [pc, #248]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc f8d1 	bl	8001120 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f82:	f7fc f8cd 	bl	8001120 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e062      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f94:	4b35      	ldr	r3, [pc, #212]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa0:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d02f      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d028      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc8:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fce:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fd4:	4a24      	ldr	r2, [pc, #144]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fda:	4b23      	ldr	r3, [pc, #140]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d114      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fc f89b 	bl	8001120 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	e00a      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fc f897 	bl	8001120 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e02a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	4b18      	ldr	r3, [pc, #96]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ee      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800501c:	d10d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800501e:	4b12      	ldr	r3, [pc, #72]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800502e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005032:	490d      	ldr	r1, [pc, #52]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
 8005038:	e005      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800503a:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005040:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005044:	6093      	str	r3, [r2, #8]
 8005046:	4b08      	ldr	r3, [pc, #32]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005048:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	4905      	ldr	r1, [pc, #20]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	4313      	orrs	r3, r2
 8005056:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	42470068 	.word	0x42470068
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	42470e40 	.word	0x42470e40

08005074 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d13f      	bne.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050a8:	d12f      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050ac:	617b      	str	r3, [r7, #20]
          break;
 80050ae:	e02f      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050bc:	d108      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050c6:	4a19      	ldr	r2, [pc, #100]	@ (800512c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e007      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050d0:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80050e0:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050fa:	0f1b      	lsrs	r3, r3, #28
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	617b      	str	r3, [r7, #20]
          break;
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
          break;
 800510e:	bf00      	nop
        }
      }
      break;
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005112:	bf00      	nop
    }
  }
  return frequency;
 8005114:	697b      	ldr	r3, [r7, #20]
}
 8005116:	4618      	mov	r0, r3
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00bb8000 	.word	0x00bb8000
 800512c:	007a1200 	.word	0x007a1200
 8005130:	00f42400 	.word	0x00f42400

08005134 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e01c      	b.n	8005180 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	795b      	ldrb	r3, [r3, #5]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fb fdf2 	bl	8000d40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0204 	orr.w	r2, r2, #4
 8005170:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800519e:	2302      	movs	r3, #2
 80051a0:	e044      	b.n	800522c <HAL_RNG_GenerateRandomNumber+0xa4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	795b      	ldrb	r3, [r3, #5]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d133      	bne.n	800521a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fb ffb2 	bl	8001120 <HAL_GetTick>
 80051bc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80051be:	e018      	b.n	80051f2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80051c0:	f7fb ffae 	bl	8001120 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d911      	bls.n	80051f2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00a      	beq.n	80051f2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01c      	b.n	800522c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d1df      	bne.n	80051c0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	715a      	strb	r2, [r3, #5]
 8005218:	e004      	b.n	8005224 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2204      	movs	r2, #4
 800521e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	711a      	strb	r2, [r3, #4]

  return status;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07b      	b.n	800533e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d108      	bne.n	8005260 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005256:	d009      	beq.n	800526c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	61da      	str	r2, [r3, #28]
 800525e:	e005      	b.n	800526c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fd7c 	bl	8000d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f0:	ea42 0103 	orr.w	r1, r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f003 0104 	and.w	r1, r3, #4
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	f003 0210 	and.w	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800532c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e041      	b.n	80053dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fb fd51 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f000 f9b5 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e04e      	b.n	800549a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a23      	ldr	r2, [pc, #140]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d01d      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	@ (80054ac <HAL_TIM_Base_Start_IT+0xc8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	@ (80054b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	@ (80054b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	@ (80054b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a19      	ldr	r2, [pc, #100]	@ (80054bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d111      	bne.n	8005488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b06      	cmp	r3, #6
 8005474:	d010      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005486:	e007      	b.n	8005498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40010400 	.word	0x40010400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40001800 	.word	0x40001800

080054c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0202 	mvn.w	r2, #2
 80054f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8d2 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8c4 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8d5 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0204 	mvn.w	r2, #4
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f8ac 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f89e 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8af 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d020      	beq.n	80055c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01b      	beq.n	80055c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0208 	mvn.w	r2, #8
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f886 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f878 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f889 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d020      	beq.n	800560c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01b      	beq.n	800560c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2208      	movs	r2, #8
 80055e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f860 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f852 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f863 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0201 	mvn.w	r2, #1
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb fa6e 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f982 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f834 	bl	80056e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00c      	beq.n	800569c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f954 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a46      	ldr	r2, [pc, #280]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a43      	ldr	r2, [pc, #268]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a42      	ldr	r2, [pc, #264]	@ (8005828 <TIM_Base_SetConfig+0x134>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a41      	ldr	r2, [pc, #260]	@ (800582c <TIM_Base_SetConfig+0x138>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a35      	ldr	r2, [pc, #212]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005754:	d027      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d023      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a31      	ldr	r2, [pc, #196]	@ (8005828 <TIM_Base_SetConfig+0x134>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a30      	ldr	r2, [pc, #192]	@ (800582c <TIM_Base_SetConfig+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d017      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2e      	ldr	r2, [pc, #184]	@ (8005834 <TIM_Base_SetConfig+0x140>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <TIM_Base_SetConfig+0x144>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <TIM_Base_SetConfig+0x148>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <TIM_Base_SetConfig+0x14c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <TIM_Base_SetConfig+0x150>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a29      	ldr	r2, [pc, #164]	@ (8005848 <TIM_Base_SetConfig+0x154>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a10      	ldr	r2, [pc, #64]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d105      	bne.n	8005812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]
  }
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800
 8005840:	40001800 	.word	0x40001800
 8005844:	40001c00 	.word	0x40001c00
 8005848:	40002000 	.word	0x40002000

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e05a      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800596c:	b084      	sub	sp, #16
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	f107 001c 	add.w	r0, r7, #28
 800597a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800597e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005982:	2b01      	cmp	r3, #1
 8005984:	d123      	bne.n	80059ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800599a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d105      	bne.n	80059c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9dc 	bl	8005d80 <USB_CoreReset>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
 80059cc:	e01b      	b.n	8005a06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9d0 	bl	8005d80 <USB_CoreReset>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80059f8:	e005      	b.n	8005a06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a06:	7fbb      	ldrb	r3, [r7, #30]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10b      	bne.n	8005a24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f043 0206 	orr.w	r2, r3, #6
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr

08005a34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d115      	bne.n	8005ac6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005aa6:	200a      	movs	r0, #10
 8005aa8:	f7fb fb46 	bl	8001138 <HAL_Delay>
      ms += 10U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	330a      	adds	r3, #10
 8005ab0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f956 	bl	8005d64 <USB_GetMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d01e      	beq.n	8005afc <USB_SetCurrentMode+0x84>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ac2:	d9f0      	bls.n	8005aa6 <USB_SetCurrentMode+0x2e>
 8005ac4:	e01a      	b.n	8005afc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d115      	bne.n	8005af8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ad8:	200a      	movs	r0, #10
 8005ada:	f7fb fb2d 	bl	8001138 <HAL_Delay>
      ms += 10U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	330a      	adds	r3, #10
 8005ae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f93d 	bl	8005d64 <USB_GetMode>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <USB_SetCurrentMode+0x84>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005af4:	d9f0      	bls.n	8005ad8 <USB_SetCurrentMode+0x60>
 8005af6:	e001      	b.n	8005afc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e005      	b.n	8005b08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b00:	d101      	bne.n	8005b06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b2a:	d901      	bls.n	8005b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e01b      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	daf2      	bge.n	8005b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	019b      	lsls	r3, r3, #6
 8005b40:	f043 0220 	orr.w	r2, r3, #32
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b54:	d901      	bls.n	8005b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d0f0      	beq.n	8005b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b8c:	d901      	bls.n	8005b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e018      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	daf2      	bge.n	8005b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bb0:	d901      	bls.n	8005bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e006      	b.n	8005bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0310 	and.w	r3, r3, #16
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d0f0      	beq.n	8005ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	@ 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	460b      	mov	r3, r1
 8005be0:	71fb      	strb	r3, [r7, #7]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d123      	bne.n	8005c3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bf6:	88bb      	ldrh	r3, [r7, #4]
 8005bf8:	3303      	adds	r3, #3
 8005bfa:	089b      	lsrs	r3, r3, #2
 8005bfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e018      	b.n	8005c36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	031a      	lsls	r2, r3, #12
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c10:	461a      	mov	r2, r3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3301      	adds	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3e2      	bcc.n	8005c04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3724      	adds	r7, #36	@ 0x24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b08b      	sub	sp, #44	@ 0x2c
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	e014      	b.n	8005ca2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	3301      	adds	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	3301      	adds	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	3301      	adds	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3e6      	bcc.n	8005c78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005caa:	8bfb      	ldrh	r3, [r7, #30]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01e      	beq.n	8005cee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	701a      	strb	r2, [r3, #0]
      i++;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	3301      	adds	r3, #1
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005ce2:	8bfb      	ldrh	r3, [r7, #30]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ce8:	8bfb      	ldrh	r3, [r7, #30]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ea      	bne.n	8005cc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	372c      	adds	r7, #44	@ 0x2c
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d56:	68bb      	ldr	r3, [r7, #8]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d98:	d901      	bls.n	8005d9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e01b      	b.n	8005dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	daf2      	bge.n	8005d8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dc2:	d901      	bls.n	8005dc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e006      	b.n	8005dd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d0f0      	beq.n	8005db6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de4:	b084      	sub	sp, #16
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e04:	461a      	mov	r2, r3
 8005e06:	2300      	movs	r3, #0
 8005e08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d119      	bne.n	8005e6e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10a      	bne.n	8005e58 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e50:	f043 0304 	orr.w	r3, r3, #4
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	e014      	b.n	8005e82 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e66:	f023 0304 	bic.w	r3, r3, #4
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e009      	b.n	8005e82 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e82:	2110      	movs	r1, #16
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fe43 	bl	8005b10 <USB_FlushTxFifo>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fe6d 	bl	8005b74 <USB_FlushRxFifo>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e015      	b.n	8005ed6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005eda:	461a      	mov	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d3e3      	bcc.n	8005eaa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <USB_HostInit+0x170>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10b      	bne.n	8005f10 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005efe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <USB_HostInit+0x174>)
 8005f04:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a14      	ldr	r2, [pc, #80]	@ (8005f5c <USB_HostInit+0x178>)
 8005f0a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005f0e:	e009      	b.n	8005f24 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2280      	movs	r2, #128	@ 0x80
 8005f14:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a11      	ldr	r2, [pc, #68]	@ (8005f60 <USB_HostInit+0x17c>)
 8005f1a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a11      	ldr	r2, [pc, #68]	@ (8005f64 <USB_HostInit+0x180>)
 8005f20:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f043 0210 	orr.w	r2, r3, #16
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f68 <USB_HostInit+0x184>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f50:	b004      	add	sp, #16
 8005f52:	4770      	bx	lr
 8005f54:	40040000 	.word	0x40040000
 8005f58:	01000200 	.word	0x01000200
 8005f5c:	00e00300 	.word	0x00e00300
 8005f60:	00600080 	.word	0x00600080
 8005f64:	004000e0 	.word	0x004000e0
 8005f68:	a3200008 	.word	0xa3200008

08005f6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	f003 0303 	and.w	r3, r3, #3
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fba:	6053      	str	r3, [r2, #4]
 8005fbc:	e00c      	b.n	8005fd8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d107      	bne.n	8005fd4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	e001      	b.n	8005fd8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006006:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006014:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006016:	2064      	movs	r0, #100	@ 0x64
 8006018:	f7fb f88e 	bl	8001138 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006028:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800602a:	200a      	movs	r0, #10
 800602c:	f7fb f884 	bl	8001138 <HAL_Delay>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	460b      	mov	r3, r1
 8006044:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800605e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <USB_DriveVbus+0x44>
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d106      	bne.n	800607e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006078:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800607c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006088:	d109      	bne.n	800609e <USB_DriveVbus+0x64>
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800609c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	0c5b      	lsrs	r3, r3, #17
 80060ca:	f003 0303 	and.w	r3, r3, #3
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	b29b      	uxth	r3, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4603      	mov	r3, r0
 800610c:	70fb      	strb	r3, [r7, #3]
 800610e:	460b      	mov	r3, r1
 8006110:	70bb      	strb	r3, [r7, #2]
 8006112:	4613      	mov	r3, r2
 8006114:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612a:	461a      	mov	r2, r3
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006132:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006136:	2b03      	cmp	r3, #3
 8006138:	d87c      	bhi.n	8006234 <USB_HC_Init+0x138>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <USB_HC_Init+0x44>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006151 	.word	0x08006151
 8006144:	080061f7 	.word	0x080061f7
 8006148:	08006151 	.word	0x08006151
 800614c:	080061b9 	.word	0x080061b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615c:	461a      	mov	r2, r3
 800615e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006162:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006164:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006168:	2b00      	cmp	r3, #0
 800616a:	da10      	bge.n	800618e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800618c:	e055      	b.n	800623a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a6f      	ldr	r2, [pc, #444]	@ (8006350 <USB_HC_Init+0x254>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d151      	bne.n	800623a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061b4:	60d3      	str	r3, [r2, #12]
      break;
 80061b6:	e040      	b.n	800623a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c4:	461a      	mov	r2, r3
 80061c6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80061ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da34      	bge.n	800623e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	78fa      	ldrb	r2, [r7, #3]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061f4:	e023      	b.n	800623e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006202:	461a      	mov	r2, r3
 8006204:	f240 2325 	movw	r3, #549	@ 0x225
 8006208:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800620a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800620e:	2b00      	cmp	r3, #0
 8006210:	da17      	bge.n	8006242 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	440a      	add	r2, r1
 8006228:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800622c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006230:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006232:	e006      	b.n	8006242 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	77fb      	strb	r3, [r7, #31]
      break;
 8006238:	e004      	b.n	8006244 <USB_HC_Init+0x148>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <USB_HC_Init+0x148>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <USB_HC_Init+0x148>
      break;
 8006242:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	440a      	add	r2, r1
 800626c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006270:	f043 0302 	orr.w	r3, r3, #2
 8006274:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	2101      	movs	r1, #1
 8006286:	fa01 f303 	lsl.w	r3, r1, r3
 800628a:	6939      	ldr	r1, [r7, #16]
 800628c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006290:	4313      	orrs	r3, r2
 8006292:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da03      	bge.n	80062b0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e001      	b.n	80062b4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fef9 	bl	80060ac <USB_GetHostSpeed>
 80062ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d106      	bne.n	80062d2 <USB_HC_Init+0x1d6>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d003      	beq.n	80062d2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	e001      	b.n	80062d6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062d6:	787b      	ldrb	r3, [r7, #1]
 80062d8:	059b      	lsls	r3, r3, #22
 80062da:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062de:	78bb      	ldrb	r3, [r7, #2]
 80062e0:	02db      	lsls	r3, r3, #11
 80062e2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062ec:	049b      	lsls	r3, r3, #18
 80062ee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80062f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80062f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062fa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	431a      	orrs	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	440a      	add	r2, r1
 800630c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006314:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006316:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800631a:	2b03      	cmp	r3, #3
 800631c:	d003      	beq.n	8006326 <USB_HC_Init+0x22a>
 800631e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10f      	bne.n	8006346 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	440a      	add	r2, r1
 800633c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006340:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006344:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006346:	7ffb      	ldrb	r3, [r7, #31]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40040000 	.word	0x40040000

08006354 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08c      	sub	sp, #48	@ 0x30
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800636c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006370:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a5d      	ldr	r2, [pc, #372]	@ (80064ec <USB_HC_StartXfer+0x198>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d12f      	bne.n	80063da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d11c      	bne.n	80063ba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	7c9b      	ldrb	r3, [r3, #18]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <USB_HC_StartXfer+0x3c>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	7c9b      	ldrb	r3, [r3, #18]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d124      	bne.n	80063da <USB_HC_StartXfer+0x86>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	799b      	ldrb	r3, [r3, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d120      	bne.n	80063da <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60d3      	str	r3, [r2, #12]
 80063b8:	e00f      	b.n	80063da <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <USB_HC_StartXfer+0x86>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	795b      	ldrb	r3, [r3, #5]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d107      	bne.n	80063da <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	4619      	mov	r1, r3
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fb6b 	bl	8006aac <USB_DoPing>
        return HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e232      	b.n	8006840 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	799b      	ldrb	r3, [r3, #6]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d158      	bne.n	8006494 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80063e2:	2301      	movs	r3, #1
 80063e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	8a92      	ldrh	r2, [r2, #20]
 80063f4:	fb03 f202 	mul.w	r2, r3, r2
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61da      	str	r2, [r3, #28]
 80063fc:	e07c      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	7c9b      	ldrb	r3, [r3, #18]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d130      	bne.n	8006468 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	2bbc      	cmp	r3, #188	@ 0xbc
 800640c:	d918      	bls.n	8006440 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	8a9b      	ldrh	r3, [r3, #20]
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d003      	beq.n	8006430 <USB_HC_StartXfer+0xdc>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d103      	bne.n	8006438 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2202      	movs	r2, #2
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e05f      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2201      	movs	r2, #1
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	e05b      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d007      	beq.n	8006460 <USB_HC_StartXfer+0x10c>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d003      	beq.n	8006460 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2204      	movs	r2, #4
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	e04b      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2203      	movs	r2, #3
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	e047      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10d      	bne.n	800648a <USB_HC_StartXfer+0x136>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	8a92      	ldrh	r2, [r2, #20]
 8006476:	4293      	cmp	r3, r2
 8006478:	d907      	bls.n	800648a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800647a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	8a92      	ldrh	r2, [r2, #20]
 8006480:	fb03 f202 	mul.w	r2, r3, r2
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	61da      	str	r2, [r3, #28]
 8006488:	e036      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	61da      	str	r2, [r3, #28]
 8006492:	e031      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d018      	beq.n	80064ce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	8a92      	ldrh	r2, [r2, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	3b01      	subs	r3, #1
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	8a92      	ldrh	r2, [r2, #20]
 80064ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80064b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80064b4:	8b7b      	ldrh	r3, [r7, #26]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90b      	bls.n	80064d2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80064ba:	8b7b      	ldrh	r3, [r7, #26]
 80064bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	8a92      	ldrh	r2, [r2, #20]
 80064c4:	fb03 f202 	mul.w	r2, r3, r2
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61da      	str	r2, [r3, #28]
 80064cc:	e001      	b.n	80064d2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80064ce:	2301      	movs	r3, #1
 80064d0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	78db      	ldrb	r3, [r3, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	8a92      	ldrh	r2, [r2, #20]
 80064e0:	fb03 f202 	mul.w	r2, r3, r2
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	61da      	str	r2, [r3, #28]
 80064e8:	e006      	b.n	80064f8 <USB_HC_StartXfer+0x1a4>
 80064ea:	bf00      	nop
 80064ec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006500:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006502:	04d9      	lsls	r1, r3, #19
 8006504:	4ba3      	ldr	r3, [pc, #652]	@ (8006794 <USB_HC_StartXfer+0x440>)
 8006506:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006508:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	7d9b      	ldrb	r3, [r3, #22]
 800650e:	075b      	lsls	r3, r3, #29
 8006510:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006514:	69f9      	ldr	r1, [r7, #28]
 8006516:	0148      	lsls	r0, r1, #5
 8006518:	6a39      	ldr	r1, [r7, #32]
 800651a:	4401      	add	r1, r0
 800651c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006520:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006522:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653a:	460a      	mov	r2, r1
 800653c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	440a      	add	r2, r1
 800656c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006570:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006574:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	7e7b      	ldrb	r3, [r7, #25]
 8006586:	075b      	lsls	r3, r3, #29
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	0148      	lsls	r0, r1, #5
 800658c:	6a39      	ldr	r1, [r7, #32]
 800658e:	4401      	add	r1, r0
 8006590:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006594:	4313      	orrs	r3, r2
 8006596:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	799b      	ldrb	r3, [r3, #6]
 800659c:	2b01      	cmp	r3, #1
 800659e:	f040 80c3 	bne.w	8006728 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	7c5b      	ldrb	r3, [r3, #17]
 80065a6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065ac:	4313      	orrs	r3, r2
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	6a3a      	ldr	r2, [r7, #32]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80065ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065be:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80065de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	79db      	ldrb	r3, [r3, #7]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d123      	bne.n	8006630 <USB_HC_StartXfer+0x2dc>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	78db      	ldrb	r3, [r3, #3]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11f      	bne.n	8006630 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	440a      	add	r2, r1
 8006606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800660a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	6a3a      	ldr	r2, [r7, #32]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800662a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	7c9b      	ldrb	r3, [r3, #18]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d003      	beq.n	8006640 <USB_HC_StartXfer+0x2ec>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	7c9b      	ldrb	r3, [r3, #18]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d117      	bne.n	8006670 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006644:	2b01      	cmp	r3, #1
 8006646:	d113      	bne.n	8006670 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d10f      	bne.n	8006670 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	440a      	add	r2, r1
 8006666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800666a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	7c9b      	ldrb	r3, [r3, #18]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d162      	bne.n	800673e <USB_HC_StartXfer+0x3ea>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d15e      	bne.n	800673e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	3b01      	subs	r3, #1
 8006686:	2b03      	cmp	r3, #3
 8006688:	d858      	bhi.n	800673c <USB_HC_StartXfer+0x3e8>
 800668a:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <USB_HC_StartXfer+0x33c>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066a1 	.word	0x080066a1
 8006694:	080066c3 	.word	0x080066c3
 8006698:	080066e5 	.word	0x080066e5
 800669c:	08006707 	.word	0x08006707
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066be:	6053      	str	r3, [r2, #4]
          break;
 80066c0:	e03d      	b.n	800673e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066dc:	f043 030e 	orr.w	r3, r3, #14
 80066e0:	6053      	str	r3, [r2, #4]
          break;
 80066e2:	e02c      	b.n	800673e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006702:	6053      	str	r3, [r2, #4]
          break;
 8006704:	e01b      	b.n	800673e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006724:	6053      	str	r3, [r2, #4]
          break;
 8006726:	e00a      	b.n	800673e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6053      	str	r3, [r2, #4]
 800673a:	e000      	b.n	800673e <USB_HC_StartXfer+0x3ea>
          break;
 800673c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006754:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e003      	b.n	8006770 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800676e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006776:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006784:	461a      	mov	r2, r3
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	e055      	b.n	8006840 <USB_HC_StartXfer+0x4ec>
 8006794:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	78db      	ldrb	r3, [r3, #3]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d14e      	bne.n	800683e <USB_HC_StartXfer+0x4ea>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d04a      	beq.n	800683e <USB_HC_StartXfer+0x4ea>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	79db      	ldrb	r3, [r3, #7]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d146      	bne.n	800683e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	7c9b      	ldrb	r3, [r3, #18]
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d831      	bhi.n	800681c <USB_HC_StartXfer+0x4c8>
 80067b8:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <USB_HC_StartXfer+0x46c>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067f5 	.word	0x080067f5
 80067c8:	080067d1 	.word	0x080067d1
 80067cc:	080067f5 	.word	0x080067f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	3303      	adds	r3, #3
 80067d6:	089b      	lsrs	r3, r3, #2
 80067d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80067da:	8afa      	ldrh	r2, [r7, #22]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d91c      	bls.n	8006820 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f043 0220 	orr.w	r2, r3, #32
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80067f2:	e015      	b.n	8006820 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	3303      	adds	r3, #3
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80067fe:	8afa      	ldrh	r2, [r7, #22]
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	b29b      	uxth	r3, r3
 800680a:	429a      	cmp	r2, r3
 800680c:	d90a      	bls.n	8006824 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	619a      	str	r2, [r3, #24]
        }
        break;
 800681a:	e003      	b.n	8006824 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800681c:	bf00      	nop
 800681e:	e002      	b.n	8006826 <USB_HC_StartXfer+0x4d2>
        break;
 8006820:	bf00      	nop
 8006822:	e000      	b.n	8006826 <USB_HC_StartXfer+0x4d2>
        break;
 8006824:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6999      	ldr	r1, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	785a      	ldrb	r2, [r3, #1]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	b29b      	uxth	r3, r3
 8006834:	2000      	movs	r0, #0
 8006836:	9000      	str	r0, [sp, #0]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff f9c9 	bl	8005bd0 <USB_WritePacket>
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	@ 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	b29b      	uxth	r3, r3
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800686a:	b480      	push	{r7}
 800686c:	b089      	sub	sp, #36	@ 0x24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0c9b      	lsrs	r3, r3, #18
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	0fdb      	lsrs	r3, r3, #31
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	0fdb      	lsrs	r3, r3, #31
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d10d      	bne.n	80068ec <USB_HC_Halt+0x82>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <USB_HC_Halt+0x82>
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d002      	beq.n	80068e8 <USB_HC_Halt+0x7e>
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d101      	bne.n	80068ec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e0d8      	b.n	8006a9e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <USB_HC_Halt+0x8e>
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d173      	bne.n	80069e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	440a      	add	r2, r1
 800690e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006912:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006916:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d14a      	bne.n	80069ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006928:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d133      	bne.n	8006998 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800694e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800696a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800696e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	3301      	adds	r3, #1
 8006974:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800697c:	d82e      	bhi.n	80069dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006994:	d0ec      	beq.n	8006970 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006996:	e081      	b.n	8006a9c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069b8:	e070      	b.n	8006a9c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069da:	e05f      	b.n	8006a9c <USB_HC_Halt+0x232>
            break;
 80069dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069de:	e05d      	b.n	8006a9c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d133      	bne.n	8006a78 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a4e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a5c:	d81d      	bhi.n	8006a9a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a74:	d0ec      	beq.n	8006a50 <USB_HC_Halt+0x1e6>
 8006a76:	e011      	b.n	8006a9c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e000      	b.n	8006a9c <USB_HC_Halt+0x232>
          break;
 8006a9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	@ 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
	...

08006aac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	04da      	lsls	r2, r3, #19
 8006ac8:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <USB_DoPing+0x74>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006adc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006af4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006afc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	1ff80000 	.word	0x1ff80000

08006b24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fe ff8c 	bl	8005a56 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b3e:	2110      	movs	r1, #16
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7fe ffe5 	bl	8005b10 <USB_FlushTxFifo>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff f80f 	bl	8005b74 <USB_FlushRxFifo>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b60:	2300      	movs	r3, #0
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	e01f      	b.n	8006ba6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b8c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b0f      	cmp	r3, #15
 8006baa:	d9dc      	bls.n	8006b66 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	e034      	b.n	8006c1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bc8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006bd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bd8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be6:	461a      	mov	r2, r3
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bf8:	d80c      	bhi.n	8006c14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c10:	d0ec      	beq.n	8006bec <USB_StopHost+0xc8>
 8006c12:	e000      	b.n	8006c16 <USB_StopHost+0xf2>
        break;
 8006c14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d9c7      	bls.n	8006bb2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fe fefb 	bl	8005a34 <USB_EnableGlobalInt>

  return ret;
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b089      	sub	sp, #36	@ 0x24
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c50:	2301      	movs	r3, #1
 8006c52:	2202      	movs	r2, #2
 8006c54:	2102      	movs	r1, #2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fcd1 	bl	80075fe <USBH_FindInterface>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2bff      	cmp	r3, #255	@ 0xff
 8006c64:	d002      	beq.n	8006c6c <USBH_CDC_InterfaceInit+0x24>
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d901      	bls.n	8006c70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e13d      	b.n	8006eec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fca6 	bl	80075c6 <USBH_SelectInterface>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e131      	b.n	8006eec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c8e:	2050      	movs	r0, #80	@ 0x50
 8006c90:	f005 ff16 	bl	800cac0 <malloc>
 8006c94:	4603      	mov	r3, r0
 8006c96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e11f      	b.n	8006eec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006cac:	2250      	movs	r2, #80	@ 0x50
 8006cae:	2100      	movs	r1, #0
 8006cb0:	68b8      	ldr	r0, [r7, #8]
 8006cb2:	f005 ffc3 	bl	800cc3c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	211a      	movs	r1, #26
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da15      	bge.n	8006cfa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	211a      	movs	r1, #26
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	211a      	movs	r1, #26
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	785b      	ldrb	r3, [r3, #1]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 fa18 	bl	8009136 <USBH_AllocPipe>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7819      	ldrb	r1, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	7858      	ldrb	r0, [r3, #1]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	8952      	ldrh	r2, [r2, #10]
 8006d26:	9202      	str	r2, [sp, #8]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	9201      	str	r2, [sp, #4]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4623      	mov	r3, r4
 8006d30:	4602      	mov	r2, r0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f002 f9d0 	bl	80090d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f005 fe37 	bl	800c9b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d46:	2300      	movs	r3, #0
 8006d48:	2200      	movs	r2, #0
 8006d4a:	210a      	movs	r1, #10
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc56 	bl	80075fe <USBH_FindInterface>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2bff      	cmp	r3, #255	@ 0xff
 8006d5a:	d002      	beq.n	8006d62 <USBH_CDC_InterfaceInit+0x11a>
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d901      	bls.n	8006d66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0c2      	b.n	8006eec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	211a      	movs	r1, #26
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	da16      	bge.n	8006dac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	211a      	movs	r1, #26
 8006d84:	fb01 f303 	mul.w	r3, r1, r3
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	211a      	movs	r1, #26
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006da4:	881a      	ldrh	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	835a      	strh	r2, [r3, #26]
 8006daa:	e015      	b.n	8006dd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	211a      	movs	r1, #26
 8006db2:	fb01 f303 	mul.w	r3, r1, r3
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	211a      	movs	r1, #26
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	211a      	movs	r1, #26
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b25b      	sxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da16      	bge.n	8006e1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	211a      	movs	r1, #26
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	211a      	movs	r1, #26
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006e16:	881a      	ldrh	r2, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	835a      	strh	r2, [r3, #26]
 8006e1c:	e015      	b.n	8006e4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	211a      	movs	r1, #26
 8006e24:	fb01 f303 	mul.w	r3, r1, r3
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	211a      	movs	r1, #26
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006e44:	881a      	ldrh	r2, [r3, #0]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	7b9b      	ldrb	r3, [r3, #14]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 f970 	bl	8009136 <USBH_AllocPipe>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	7bdb      	ldrb	r3, [r3, #15]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f002 f966 	bl	8009136 <USBH_AllocPipe>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7b59      	ldrb	r1, [r3, #13]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	7b98      	ldrb	r0, [r3, #14]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	8b12      	ldrh	r2, [r2, #24]
 8006e8a:	9202      	str	r2, [sp, #8]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4623      	mov	r3, r4
 8006e94:	4602      	mov	r2, r0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 f91e 	bl	80090d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	7b19      	ldrb	r1, [r3, #12]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	7bd8      	ldrb	r0, [r3, #15]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	8b52      	ldrh	r2, [r2, #26]
 8006eb4:	9202      	str	r2, [sp, #8]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	9201      	str	r2, [sp, #4]
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 f909 	bl	80090d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	7b5b      	ldrb	r3, [r3, #13]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f005 fd6c 	bl	800c9b4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	7b1b      	ldrb	r3, [r3, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f005 fd65 	bl	800c9b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd90      	pop	{r4, r7, pc}

08006ef4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00e      	beq.n	8006f2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f002 f8fe 	bl	8009116 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f002 f929 	bl	8009178 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	7b1b      	ldrb	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	7b1b      	ldrb	r3, [r3, #12]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f002 f8eb 	bl	8009116 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	7b1b      	ldrb	r3, [r3, #12]
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 f916 	bl	8009178 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	7b5b      	ldrb	r3, [r3, #13]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00e      	beq.n	8006f78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	7b5b      	ldrb	r3, [r3, #13]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f002 f8d8 	bl	8009116 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	7b5b      	ldrb	r3, [r3, #13]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f002 f903 	bl	8009178 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f005 fd9f 	bl	800cad0 <free>
    phost->pActiveClass->pData = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f98:	2200      	movs	r2, #0
 8006f9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3340      	adds	r3, #64	@ 0x40
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8b1 	bl	8007126 <GetLineCoding>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fd4:	2102      	movs	r1, #2
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006fda:	7afb      	ldrb	r3, [r7, #11]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007004:	2b04      	cmp	r3, #4
 8007006:	d877      	bhi.n	80070f8 <USBH_CDC_Process+0x114>
 8007008:	a201      	add	r2, pc, #4	@ (adr r2, 8007010 <USBH_CDC_Process+0x2c>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007025 	.word	0x08007025
 8007014:	0800702b 	.word	0x0800702b
 8007018:	0800705b 	.word	0x0800705b
 800701c:	080070cf 	.word	0x080070cf
 8007020:	080070dd 	.word	0x080070dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
      break;
 8007028:	e06d      	b.n	8007106 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f897 	bl	8007164 <SetLineCoding>
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007048:	e058      	b.n	80070fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d055      	beq.n	80070fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2204      	movs	r2, #4
 8007054:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007058:	e050      	b.n	80070fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3340      	adds	r3, #64	@ 0x40
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f860 	bl	8007126 <GetLineCoding>
 8007066:	4603      	mov	r3, r0
 8007068:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d126      	bne.n	80070be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007082:	791b      	ldrb	r3, [r3, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d13b      	bne.n	8007100 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007092:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007094:	429a      	cmp	r2, r3
 8007096:	d133      	bne.n	8007100 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d12b      	bne.n	8007100 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d124      	bne.n	8007100 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f982 	bl	80073c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070bc:	e020      	b.n	8007100 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d01d      	beq.n	8007100 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2204      	movs	r2, #4
 80070c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80070cc:	e018      	b.n	8007100 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f867 	bl	80071a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f8f6 	bl	80072c6 <CDC_ProcessReception>
      break;
 80070da:	e014      	b.n	8007106 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 f984 	bl	80083ec <USBH_ClrFeature>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80070f6:	e005      	b.n	8007104 <USBH_CDC_Process+0x120>

    default:
      break;
 80070f8:	bf00      	nop
 80070fa:	e004      	b.n	8007106 <USBH_CDC_Process+0x122>
      break;
 80070fc:	bf00      	nop
 80070fe:	e002      	b.n	8007106 <USBH_CDC_Process+0x122>
      break;
 8007100:	bf00      	nop
 8007102:	e000      	b.n	8007106 <USBH_CDC_Process+0x122>
      break;
 8007104:	bf00      	nop

  }

  return status;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b082      	sub	sp, #8
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22a1      	movs	r2, #161	@ 0xa1
 8007134:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2221      	movs	r2, #33	@ 0x21
 800713a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2207      	movs	r2, #7
 800714c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2207      	movs	r2, #7
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fc7e 	bl	8008a56 <USBH_CtlReq>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2221      	movs	r2, #33	@ 0x21
 8007172:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2207      	movs	r2, #7
 800718a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2207      	movs	r2, #7
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fc5f 	bl	8008a56 <USBH_CtlReq>
 8007198:	4603      	mov	r3, r0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af02      	add	r7, sp, #8
 80071a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d002      	beq.n	80071c8 <CDC_ProcessTransmission+0x26>
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d023      	beq.n	800720e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80071c6:	e07a      	b.n	80072be <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	8b12      	ldrh	r2, [r2, #24]
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d90b      	bls.n	80071ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	69d9      	ldr	r1, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8b1a      	ldrh	r2, [r3, #24]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	7b5b      	ldrb	r3, [r3, #13]
 80071e0:	2001      	movs	r0, #1
 80071e2:	9000      	str	r0, [sp, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 ff34 	bl	8009052 <USBH_BulkSendData>
 80071ea:	e00b      	b.n	8007204 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	7b5b      	ldrb	r3, [r3, #13]
 80071fa:	2001      	movs	r0, #1
 80071fc:	9000      	str	r0, [sp, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 ff27 	bl	8009052 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800720c:	e057      	b.n	80072be <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	7b5b      	ldrb	r3, [r3, #13]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f005 fba3 	bl	800c960 <USBH_LL_GetURBState>
 800721a:	4603      	mov	r3, r0
 800721c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d136      	bne.n	8007292 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	8b12      	ldrh	r2, [r2, #24]
 800722c:	4293      	cmp	r3, r2
 800722e:	d90e      	bls.n	800724e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	8b12      	ldrh	r2, [r2, #24]
 8007238:	1a9a      	subs	r2, r3, r2
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	8b12      	ldrh	r2, [r2, #24]
 8007246:	441a      	add	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	61da      	str	r2, [r3, #28]
 800724c:	e002      	b.n	8007254 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8007264:	e006      	b.n	8007274 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f892 	bl	8007398 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2204      	movs	r2, #4
 8007278:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	f002 fa24 	bl	80096d8 <osMessageQueuePut>
      break;
 8007290:	e014      	b.n	80072bc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d111      	bne.n	80072bc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2204      	movs	r2, #4
 80072a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80072b4:	2300      	movs	r3, #0
 80072b6:	2200      	movs	r2, #0
 80072b8:	f002 fa0e 	bl	80096d8 <osMessageQueuePut>
      break;
 80072bc:	bf00      	nop
  }
}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072d8:	2300      	movs	r3, #0
 80072da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d002      	beq.n	80072ec <CDC_ProcessReception+0x26>
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d00e      	beq.n	8007308 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072ea:	e051      	b.n	8007390 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	6a19      	ldr	r1, [r3, #32]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	8b5a      	ldrh	r2, [r3, #26]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	7b1b      	ldrb	r3, [r3, #12]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fecf 	bl	800909c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2204      	movs	r2, #4
 8007302:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007306:	e043      	b.n	8007390 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	7b1b      	ldrb	r3, [r3, #12]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f005 fb26 	bl	800c960 <USBH_LL_GetURBState>
 8007314:	4603      	mov	r3, r0
 8007316:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007318:	7cfb      	ldrb	r3, [r7, #19]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d137      	bne.n	800738e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	7b1b      	ldrb	r3, [r3, #12]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f005 fa89 	bl	800c83c <USBH_LL_GetLastXferSize>
 800732a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	429a      	cmp	r2, r3
 8007334:	d016      	beq.n	8007364 <CDC_ProcessReception+0x9e>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	8b5b      	ldrh	r3, [r3, #26]
 800733a:	461a      	mov	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4293      	cmp	r3, r2
 8007340:	d110      	bne.n	8007364 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a1a      	ldr	r2, [r3, #32]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	441a      	add	r2, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2203      	movs	r2, #3
 800735e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8007362:	e006      	b.n	8007372 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f81d 	bl	80073ac <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2204      	movs	r2, #4
 8007376:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	f002 f9a5 	bl	80096d8 <osMessageQueuePut>
      break;
 800738e:	bf00      	nop
  }
}
 8007390:	bf00      	nop
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073e8:	2302      	movs	r3, #2
 80073ea:	e044      	b.n	8007476 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	79fa      	ldrb	r2, [r7, #7]
 80073f0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f841 	bl	800748c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007438:	2200      	movs	r2, #0
 800743a:	2104      	movs	r1, #4
 800743c:	2010      	movs	r0, #16
 800743e:	f002 f8d7 	bl	80095f0 <osMessageQueueNew>
 8007442:	4602      	mov	r2, r0
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <USBH_Init+0xac>)
 800744c:	4a0d      	ldr	r2, [pc, #52]	@ (8007484 <USBH_Init+0xb0>)
 800744e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <USBH_Init+0xac>)
 8007452:	2280      	movs	r2, #128	@ 0x80
 8007454:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007456:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <USBH_Init+0xac>)
 8007458:	2218      	movs	r2, #24
 800745a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800745c:	4a08      	ldr	r2, [pc, #32]	@ (8007480 <USBH_Init+0xac>)
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	4809      	ldr	r0, [pc, #36]	@ (8007488 <USBH_Init+0xb4>)
 8007462:	f001 ff59 	bl	8009318 <osThreadNew>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f005 f930 	bl	800c6d4 <USBH_LL_Init>

  return USBH_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200007a0 	.word	0x200007a0
 8007484:	0800ce7c 	.word	0x0800ce7c
 8007488:	0800813d 	.word	0x0800813d

0800748c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e009      	b.n	80074b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	33e0      	adds	r3, #224	@ 0xe0
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b0f      	cmp	r3, #15
 80074b6:	d9f2      	bls.n	800749e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e009      	b.n	80074d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d8:	d3f1      	bcc.n	80074be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2240      	movs	r2, #64	@ 0x40
 80074fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	331c      	adds	r3, #28
 800752a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f005 fb83 	bl	800cc3c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800753c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f005 fb7a 	bl	800cc3c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800754e:	2212      	movs	r2, #18
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f005 fb72 	bl	800cc3c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800755e:	223e      	movs	r2, #62	@ 0x3e
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f005 fb6a 	bl	800cc3c <memset>

  return USBH_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d016      	beq.n	80075b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10e      	bne.n	80075ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007596:	1c59      	adds	r1, r3, #1
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	33de      	adds	r3, #222	@ 0xde
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	e004      	b.n	80075b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075ae:	2302      	movs	r3, #2
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e001      	b.n	80075b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075b4:	2302      	movs	r3, #2
 80075b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d204      	bcs.n	80075ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80075ea:	e001      	b.n	80075f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075ec:	2302      	movs	r3, #2
 80075ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075fe:	b480      	push	{r7}
 8007600:	b087      	sub	sp, #28
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	461a      	mov	r2, r3
 800760c:	4603      	mov	r3, r0
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	460b      	mov	r3, r1
 8007612:	70bb      	strb	r3, [r7, #2]
 8007614:	4613      	mov	r3, r2
 8007616:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007626:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007628:	e025      	b.n	8007676 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	221a      	movs	r2, #26
 800762e:	fb02 f303 	mul.w	r3, r2, r3
 8007632:	3308      	adds	r3, #8
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	3302      	adds	r3, #2
 800763a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	795b      	ldrb	r3, [r3, #5]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	429a      	cmp	r2, r3
 8007644:	d002      	beq.n	800764c <USBH_FindInterface+0x4e>
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2bff      	cmp	r3, #255	@ 0xff
 800764a:	d111      	bne.n	8007670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007650:	78ba      	ldrb	r2, [r7, #2]
 8007652:	429a      	cmp	r2, r3
 8007654:	d002      	beq.n	800765c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007656:	78bb      	ldrb	r3, [r7, #2]
 8007658:	2bff      	cmp	r3, #255	@ 0xff
 800765a:	d109      	bne.n	8007670 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007660:	787a      	ldrb	r2, [r7, #1]
 8007662:	429a      	cmp	r2, r3
 8007664:	d002      	beq.n	800766c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007666:	787b      	ldrb	r3, [r7, #1]
 8007668:	2bff      	cmp	r3, #255	@ 0xff
 800766a:	d101      	bne.n	8007670 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	e006      	b.n	800767e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	3301      	adds	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d9d6      	bls.n	800762a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800767c:	23ff      	movs	r3, #255	@ 0xff
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f005 f85a 	bl	800c74c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007698:	2101      	movs	r1, #1
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f005 f973 	bl	800c986 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076b4:	2302      	movs	r3, #2
 80076b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d102      	bne.n	80076ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2203      	movs	r2, #3
 80076cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b0b      	cmp	r3, #11
 80076d6:	f200 8244 	bhi.w	8007b62 <USBH_Process+0x4b6>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <USBH_Process+0x34>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007711 	.word	0x08007711
 80076e4:	0800775f 	.word	0x0800775f
 80076e8:	080077e3 	.word	0x080077e3
 80076ec:	08007ae1 	.word	0x08007ae1
 80076f0:	08007b63 	.word	0x08007b63
 80076f4:	0800789f 	.word	0x0800789f
 80076f8:	08007a6b 	.word	0x08007a6b
 80076fc:	080078f1 	.word	0x080078f1
 8007700:	0800792d 	.word	0x0800792d
 8007704:	08007965 	.word	0x08007965
 8007708:	080079c3 	.word	0x080079c3
 800770c:	08007ac9 	.word	0x08007ac9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 8224 	beq.w	8007b66 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007724:	20c8      	movs	r0, #200	@ 0xc8
 8007726:	f005 f978 	bl	800ca1a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f005 f86b 	bl	800c806 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	f001 ffbe 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800775c:	e203      	b.n	8007b66 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007764:	2b01      	cmp	r3, #1
 8007766:	d107      	bne.n	8007778 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e025      	b.n	80077c4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800777e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007782:	d914      	bls.n	80077ae <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800778a:	3301      	adds	r3, #1
 800778c:	b2da      	uxtb	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800779a:	2b03      	cmp	r3, #3
 800779c:	d903      	bls.n	80077a6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	220d      	movs	r2, #13
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e00e      	b.n	80077c4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	e00a      	b.n	80077c4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80077b4:	f103 020a 	add.w	r2, r3, #10
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80077be:	200a      	movs	r0, #10
 80077c0:	f005 f92b 	bl	800ca1a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077d8:	2300      	movs	r3, #0
 80077da:	2200      	movs	r2, #0
 80077dc:	f001 ff7c 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 80077e0:	e1c8      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80077f2:	2104      	movs	r1, #4
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077f8:	2064      	movs	r0, #100	@ 0x64
 80077fa:	f005 f90e 	bl	800ca1a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f004 ffda 	bl	800c7b8 <USBH_LL_GetSpeed>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2205      	movs	r2, #5
 8007812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fc8d 	bl	8009136 <USBH_AllocPipe>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007824:	2180      	movs	r1, #128	@ 0x80
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fc85 	bl	8009136 <USBH_AllocPipe>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7919      	ldrb	r1, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4603      	mov	r3, r0
 8007852:	2280      	movs	r2, #128	@ 0x80
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fc3f 	bl	80090d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7959      	ldrb	r1, [r3, #5]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800786e:	9202      	str	r2, [sp, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	9201      	str	r2, [sp, #4]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	4603      	mov	r3, r0
 8007878:	2200      	movs	r2, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fc2c 	bl	80090d8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	f001 ff1e 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 800789c:	e16a      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f96e 	bl	8007b80 <USBH_HandleEnum>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 815c 	bne.w	8007b6a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d103      	bne.n	80078cc <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2208      	movs	r2, #8
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e002      	b.n	80078d2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2207      	movs	r2, #7
 80078d0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2205      	movs	r2, #5
 80078d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	f001 fef5 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80078ee:	e13c      	b.n	8007b6a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8139 	beq.w	8007b6e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007902:	2101      	movs	r1, #1
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2208      	movs	r2, #8
 800790c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2205      	movs	r2, #5
 8007912:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007922:	2300      	movs	r3, #0
 8007924:	2200      	movs	r2, #0
 8007926:	f001 fed7 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800792a:	e120      	b.n	8007b6e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007932:	4619      	mov	r1, r3
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd12 	bl	800835e <USBH_SetCfg>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2209      	movs	r2, #9
 8007944:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800795a:	2300      	movs	r3, #0
 800795c:	2200      	movs	r2, #0
 800795e:	f001 febb 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 8007962:	e107      	b.n	8007b74 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007972:	2101      	movs	r1, #1
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fd15 	bl	80083a4 <USBH_SetFeature>
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220a      	movs	r2, #10
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e00a      	b.n	80079a4 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b03      	cmp	r3, #3
 8007994:	d106      	bne.n	80079a4 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	220a      	movs	r2, #10
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e002      	b.n	80079a4 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220a      	movs	r2, #10
 80079a2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079b8:	2300      	movs	r3, #0
 80079ba:	2200      	movs	r2, #0
 80079bc:	f001 fe8c 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 80079c0:	e0d8      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d03f      	beq.n	8007a4c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	e016      	b.n	8007a08 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079da:	7bfa      	ldrb	r2, [r7, #15]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32de      	adds	r2, #222	@ 0xde
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	791a      	ldrb	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d108      	bne.n	8007a02 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32de      	adds	r2, #222	@ 0xde
 80079f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007a00:	e005      	b.n	8007a0e <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	3301      	adds	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0e5      	beq.n	80079da <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d016      	beq.n	8007a46 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a36:	2103      	movs	r1, #3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
 8007a3c:	e006      	b.n	8007a4c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220d      	movs	r2, #13
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e002      	b.n	8007a4c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	220d      	movs	r2, #13
 8007a4a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2205      	movs	r2, #5
 8007a50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a60:	2300      	movs	r3, #0
 8007a62:	2200      	movs	r2, #0
 8007a64:	f001 fe38 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 8007a68:	e084      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d017      	beq.n	8007aa4 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	220b      	movs	r2, #11
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	e00a      	b.n	8007aaa <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d106      	bne.n	8007aaa <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	220d      	movs	r2, #13
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	220d      	movs	r2, #13
 8007aa8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2205      	movs	r2, #5
 8007aae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f001 fe09 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 8007ac6:	e055      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04f      	beq.n	8007b72 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      }
      break;
 8007ade:	e048      	b.n	8007b72 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff fccf 	bl	800748c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b1c:	2105      	movs	r1, #5
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d107      	bne.n	8007b3e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fda7 	bl	800768a <USBH_Start>
 8007b3c:	e002      	b.n	8007b44 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f004 fe04 	bl	800c74c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f001 fdbc 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      break;
 8007b60:	e008      	b.n	8007b74 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b62:	bf00      	nop
 8007b64:	e006      	b.n	8007b74 <USBH_Process+0x4c8>
      break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <USBH_Process+0x4c8>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <USBH_Process+0x4c8>
    break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <USBH_Process+0x4c8>
      break;
 8007b72:	bf00      	nop
  }
  return USBH_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	f200 8204 	bhi.w	8007fa2 <USBH_HandleEnum+0x422>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <USBH_HandleEnum+0x20>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007c7b 	.word	0x08007c7b
 8007ba8:	08007ce5 	.word	0x08007ce5
 8007bac:	08007d6f 	.word	0x08007d6f
 8007bb0:	08007dd9 	.word	0x08007dd9
 8007bb4:	08007e49 	.word	0x08007e49
 8007bb8:	08007ee5 	.word	0x08007ee5
 8007bbc:	08007f63 	.word	0x08007f63
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007bc0:	2108      	movs	r1, #8
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fae8 	bl	8008198 <USBH_Get_DevDesc>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d12e      	bne.n	8007c30 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7919      	ldrb	r1, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bf6:	9202      	str	r2, [sp, #8]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	9201      	str	r2, [sp, #4]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2280      	movs	r2, #128	@ 0x80
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 fa68 	bl	80090d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7959      	ldrb	r1, [r3, #5]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c1c:	9202      	str	r2, [sp, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	9201      	str	r2, [sp, #4]
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4603      	mov	r3, r0
 8007c26:	2200      	movs	r2, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fa55 	bl	80090d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c2e:	e1ba      	b.n	8007fa6 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	f040 81b7 	bne.w	8007fa6 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c3e:	3301      	adds	r3, #1
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d903      	bls.n	8007c5a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	220d      	movs	r2, #13
 8007c56:	701a      	strb	r2, [r3, #0]
      break;
 8007c58:	e1a5      	b.n	8007fa6 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	795b      	ldrb	r3, [r3, #5]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fa89 	bl	8009178 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fa83 	bl	8009178 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e195      	b.n	8007fa6 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c7a:	2112      	movs	r1, #18
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fa8b 	bl	8008198 <USBH_Get_DevDesc>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d103      	bne.n	8007c94 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c92:	e18a      	b.n	8007faa <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	f040 8187 	bne.w	8007faa <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d903      	bls.n	8007cbe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e175      	b.n	8007faa <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	795b      	ldrb	r3, [r3, #5]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 fa57 	bl	8009178 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fa51 	bl	8009178 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
      break;
 8007ce2:	e162      	b.n	8007faa <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb15 	bl	8008316 <USBH_SetAddress>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d130      	bne.n	8007d58 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007cf6:	2002      	movs	r0, #2
 8007cf8:	f004 fe8f 	bl	800ca1a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2203      	movs	r2, #3
 8007d08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7919      	ldrb	r1, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d1e:	9202      	str	r2, [sp, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	9201      	str	r2, [sp, #4]
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4603      	mov	r3, r0
 8007d28:	2280      	movs	r2, #128	@ 0x80
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f9d4 	bl	80090d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	7959      	ldrb	r1, [r3, #5]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d44:	9202      	str	r2, [sp, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	9201      	str	r2, [sp, #4]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2200      	movs	r2, #0
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 f9c1 	bl	80090d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d56:	e12a      	b.n	8007fae <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	f040 8127 	bne.w	8007fae <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	220d      	movs	r2, #13
 8007d64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	705a      	strb	r2, [r3, #1]
      break;
 8007d6c:	e11f      	b.n	8007fae <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d6e:	2109      	movs	r1, #9
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fa3d 	bl	80081f0 <USBH_Get_CfgDesc>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2204      	movs	r2, #4
 8007d84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d86:	e114      	b.n	8007fb2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	f040 8111 	bne.w	8007fb2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007d96:	3301      	adds	r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d903      	bls.n	8007db2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	220d      	movs	r2, #13
 8007dae:	701a      	strb	r2, [r3, #0]
      break;
 8007db0:	e0ff      	b.n	8007fb2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f9dd 	bl	8009178 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	791b      	ldrb	r3, [r3, #4]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f9d7 	bl	8009178 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
      break;
 8007dd6:	e0ec      	b.n	8007fb2 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fa05 	bl	80081f0 <USBH_Get_CfgDesc>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2205      	movs	r2, #5
 8007df4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007df6:	e0de      	b.n	8007fb6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	f040 80db 	bne.w	8007fb6 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e06:	3301      	adds	r3, #1
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d903      	bls.n	8007e22 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	220d      	movs	r2, #13
 8007e1e:	701a      	strb	r2, [r3, #0]
      break;
 8007e20:	e0c9      	b.n	8007fb6 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	795b      	ldrb	r3, [r3, #5]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f9a5 	bl	8009178 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	791b      	ldrb	r3, [r3, #4]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f99f 	bl	8009178 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e0b6      	b.n	8007fb6 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d036      	beq.n	8007ec0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e5e:	23ff      	movs	r3, #255	@ 0xff
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9ef 	bl	8008244 <USBH_Get_StringDesc>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d111      	bne.n	8007e94 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2206      	movs	r2, #6
 8007e74:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2205      	movs	r2, #5
 8007e7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f001 fc23 	bl	80096d8 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e92:	e092      	b.n	8007fba <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	f040 808f 	bne.w	8007fba <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f001 fc0d 	bl	80096d8 <osMessageQueuePut>
      break;
 8007ebe:	e07c      	b.n	8007fba <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2206      	movs	r2, #6
 8007ec4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2205      	movs	r2, #5
 8007eca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007eda:	2300      	movs	r3, #0
 8007edc:	2200      	movs	r2, #0
 8007ede:	f001 fbfb 	bl	80096d8 <osMessageQueuePut>
      break;
 8007ee2:	e06a      	b.n	8007fba <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d027      	beq.n	8007f3e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007efa:	23ff      	movs	r3, #255	@ 0xff
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f9a1 	bl	8008244 <USBH_Get_StringDesc>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2207      	movs	r2, #7
 8007f10:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007f12:	e054      	b.n	8007fbe <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d151      	bne.n	8007fbe <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2205      	movs	r2, #5
 8007f24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f34:	2300      	movs	r3, #0
 8007f36:	2200      	movs	r2, #0
 8007f38:	f001 fbce 	bl	80096d8 <osMessageQueuePut>
      break;
 8007f3c:	e03f      	b.n	8007fbe <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2207      	movs	r2, #7
 8007f42:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2205      	movs	r2, #5
 8007f48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f001 fbbc 	bl	80096d8 <osMessageQueuePut>
      break;
 8007f60:	e02d      	b.n	8007fbe <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f78:	23ff      	movs	r3, #255	@ 0xff
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f962 	bl	8008244 <USBH_Get_StringDesc>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f8e:	e018      	b.n	8007fc2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d115      	bne.n	8007fc2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9a:	e012      	b.n	8007fc2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa0:	e00f      	b.n	8007fc2 <USBH_HandleEnum+0x442>

    default:
      break;
 8007fa2:	bf00      	nop
 8007fa4:	e00e      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fa6:	bf00      	nop
 8007fa8:	e00c      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007faa:	bf00      	nop
 8007fac:	e00a      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fae:	bf00      	nop
 8007fb0:	e008      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e006      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e004      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e002      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e000      	b.n	8007fc4 <USBH_HandleEnum+0x444>
      break;
 8007fc2:	bf00      	nop
  }
  return Status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f804 	bl	8008012 <USBH_HandleSof>
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b0b      	cmp	r3, #11
 8008022:	d10a      	bne.n	800803a <USBH_HandleSof+0x28>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
  }
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008066:	2300      	movs	r3, #0
 8008068:	2200      	movs	r2, #0
 800806a:	f001 fb35 	bl	80096d8 <osMessageQueuePut>
#endif
#endif

  return;
 800806e:	bf00      	nop
}
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008086:	bf00      	nop
}
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80080c6:	2300      	movs	r3, #0
 80080c8:	2200      	movs	r2, #0
 80080ca:	f001 fb05 	bl	80096d8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f004 fb42 	bl	800c782 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	791b      	ldrb	r3, [r3, #4]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f837 	bl	8009178 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	795b      	ldrb	r3, [r3, #5]
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 f831 	bl	8009178 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	f001 fad3 	bl	80096d8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008150:	f04f 33ff 	mov.w	r3, #4294967295
 8008154:	2200      	movs	r2, #0
 8008156:	f001 fb1f 	bl	8009798 <osMessageQueueGet>
 800815a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff faa2 	bl	80076ac <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008168:	e7ec      	b.n	8008144 <USBH_Process_OS+0x8>

0800816a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008186:	2300      	movs	r3, #0
 8008188:	2200      	movs	r2, #0
 800818a:	f001 faa5 	bl	80096d8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af02      	add	r7, sp, #8
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80081a4:	887b      	ldrh	r3, [r7, #2]
 80081a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081aa:	d901      	bls.n	80081b0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e01b      	b.n	80081e8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80081b6:	887b      	ldrh	r3, [r7, #2]
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4613      	mov	r3, r2
 80081bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081c0:	2100      	movs	r1, #0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f872 	bl	80082ac <USBH_GetDescriptor>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80081d8:	887a      	ldrh	r2, [r7, #2]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f929 	bl	8008434 <USBH_ParseDevDesc>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	331c      	adds	r3, #28
 8008200:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008202:	887b      	ldrh	r3, [r7, #2]
 8008204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008208:	d901      	bls.n	800820e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800820a:	2303      	movs	r3, #3
 800820c:	e016      	b.n	800823c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800820e:	887b      	ldrh	r3, [r7, #2]
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008218:	2100      	movs	r1, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f846 	bl	80082ac <USBH_GetDescriptor>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d107      	bne.n	800823a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	461a      	mov	r2, r3
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f9af 	bl	8008594 <USBH_ParseCfgDesc>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	461a      	mov	r2, r3
 8008250:	460b      	mov	r3, r1
 8008252:	72fb      	strb	r3, [r7, #11]
 8008254:	4613      	mov	r3, r2
 8008256:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008258:	893b      	ldrh	r3, [r7, #8]
 800825a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800825e:	d802      	bhi.n	8008266 <USBH_Get_StringDesc+0x22>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008266:	2303      	movs	r3, #3
 8008268:	e01c      	b.n	80082a4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800826a:	7afb      	ldrb	r3, [r7, #11]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008272:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800827a:	893b      	ldrh	r3, [r7, #8]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	460b      	mov	r3, r1
 8008280:	2100      	movs	r1, #0
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f812 	bl	80082ac <USBH_GetDescriptor>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008298:	893a      	ldrh	r2, [r7, #8]
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fb8d 	bl	80089bc <USBH_ParseStringDesc>
  }

  return status;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607b      	str	r3, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	72fb      	strb	r3, [r7, #11]
 80082ba:	4613      	mov	r3, r2
 80082bc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	789b      	ldrb	r3, [r3, #2]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d11c      	bne.n	8008300 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2206      	movs	r2, #6
 80082d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	893a      	ldrh	r2, [r7, #8]
 80082dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80082de:	893b      	ldrh	r3, [r7, #8]
 80082e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80082e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e8:	d104      	bne.n	80082f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f240 4209 	movw	r2, #1033	@ 0x409
 80082f0:	829a      	strh	r2, [r3, #20]
 80082f2:	e002      	b.n	80082fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8b3a      	ldrh	r2, [r7, #24]
 80082fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008300:	8b3b      	ldrh	r3, [r7, #24]
 8008302:	461a      	mov	r2, r3
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fba5 	bl	8008a56 <USBH_CtlReq>
 800830c:	4603      	mov	r3, r0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	789b      	ldrb	r3, [r3, #2]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d10f      	bne.n	800834a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2205      	movs	r2, #5
 8008334:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fb81 	bl	8008a56 <USBH_CtlReq>
 8008354:	4603      	mov	r3, r0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	789b      	ldrb	r3, [r3, #2]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d10e      	bne.n	8008390 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2209      	movs	r2, #9
 800837c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	887a      	ldrh	r2, [r7, #2]
 8008382:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008390:	2200      	movs	r2, #0
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fb5e 	bl	8008a56 <USBH_CtlReq>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	789b      	ldrb	r3, [r3, #2]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d10f      	bne.n	80083d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2203      	movs	r2, #3
 80083c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80083d8:	2200      	movs	r2, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb3a 	bl	8008a56 <USBH_CtlReq>
 80083e2:	4603      	mov	r3, r0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	789b      	ldrb	r3, [r3, #2]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d10f      	bne.n	8008420 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008420:	2200      	movs	r2, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fb16 	bl	8008a56 <USBH_CtlReq>
 800842a:	4603      	mov	r3, r0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008448:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008454:	2302      	movs	r3, #2
 8008456:	e094      	b.n	8008582 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	785a      	ldrb	r2, [r3, #1]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	3302      	adds	r3, #2
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3303      	adds	r3, #3
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	b29b      	uxth	r3, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	b29a      	uxth	r2, r3
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	791a      	ldrb	r2, [r3, #4]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	795a      	ldrb	r2, [r3, #5]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	799a      	ldrb	r2, [r3, #6]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	79da      	ldrb	r2, [r3, #7]
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d11b      	bne.n	80084ee <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	79db      	ldrb	r3, [r3, #7]
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	dc0f      	bgt.n	80084de <USBH_ParseDevDesc+0xaa>
 80084be:	2b08      	cmp	r3, #8
 80084c0:	db0f      	blt.n	80084e2 <USBH_ParseDevDesc+0xae>
 80084c2:	3b08      	subs	r3, #8
 80084c4:	4a32      	ldr	r2, [pc, #200]	@ (8008590 <USBH_ParseDevDesc+0x15c>)
 80084c6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bf14      	ite	ne
 80084d2:	2301      	movne	r3, #1
 80084d4:	2300      	moveq	r3, #0
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <USBH_ParseDevDesc+0xb6>
 80084dc:	e001      	b.n	80084e2 <USBH_ParseDevDesc+0xae>
 80084de:	2b40      	cmp	r3, #64	@ 0x40
 80084e0:	d003      	beq.n	80084ea <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2208      	movs	r2, #8
 80084e6:	71da      	strb	r2, [r3, #7]
        break;
 80084e8:	e000      	b.n	80084ec <USBH_ParseDevDesc+0xb8>
        break;
 80084ea:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80084ec:	e00e      	b.n	800850c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d107      	bne.n	8008508 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	79db      	ldrb	r3, [r3, #7]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d005      	beq.n	800850c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2208      	movs	r2, #8
 8008504:	71da      	strb	r2, [r3, #7]
 8008506:	e001      	b.n	800850c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008508:	2303      	movs	r3, #3
 800850a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800850c:	88fb      	ldrh	r3, [r7, #6]
 800850e:	2b08      	cmp	r3, #8
 8008510:	d936      	bls.n	8008580 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3308      	adds	r3, #8
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	3309      	adds	r3, #9
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	b29b      	uxth	r3, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	b29a      	uxth	r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	330a      	adds	r3, #10
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	330b      	adds	r3, #11
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	b29b      	uxth	r3, r3
 800853e:	4313      	orrs	r3, r2
 8008540:	b29a      	uxth	r2, r3
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	330c      	adds	r3, #12
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	330d      	adds	r3, #13
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	b29b      	uxth	r3, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	b29a      	uxth	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	7b9a      	ldrb	r2, [r3, #14]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7bda      	ldrb	r2, [r3, #15]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	7c1a      	ldrb	r2, [r3, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	7c5a      	ldrb	r2, [r3, #17]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
}
 8008582:	4618      	mov	r0, r3
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	01000101 	.word	0x01000101

08008594 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	@ 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80085a8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80085c2:	2302      	movs	r3, #2
 80085c4:	e0da      	b.n	800877c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b09      	cmp	r3, #9
 80085d0:	d002      	beq.n	80085d8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	2209      	movs	r2, #9
 80085d6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008602:	bf28      	it	cs
 8008604:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008608:	b29a      	uxth	r2, r3
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	791a      	ldrb	r2, [r3, #4]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	795a      	ldrb	r2, [r3, #5]
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	799a      	ldrb	r2, [r3, #6]
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	79da      	ldrb	r2, [r3, #7]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	7a1a      	ldrb	r2, [r3, #8]
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	2b09      	cmp	r3, #9
 800863a:	f240 809d 	bls.w	8008778 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800863e:	2309      	movs	r3, #9
 8008640:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008646:	e081      	b.n	800874c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008648:	f107 0316 	add.w	r3, r7, #22
 800864c:	4619      	mov	r1, r3
 800864e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008650:	f000 f9e7 	bl	8008a22 <USBH_GetNextDesc>
 8008654:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b04      	cmp	r3, #4
 800865c:	d176      	bne.n	800874c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b09      	cmp	r3, #9
 8008664:	d002      	beq.n	800866c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	2209      	movs	r2, #9
 800866a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800866c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008670:	221a      	movs	r2, #26
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	3308      	adds	r3, #8
 8008678:	6a3a      	ldr	r2, [r7, #32]
 800867a:	4413      	add	r3, r2
 800867c:	3302      	adds	r3, #2
 800867e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008682:	69f8      	ldr	r0, [r7, #28]
 8008684:	f000 f87e 	bl	8008784 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008692:	e043      	b.n	800871c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008694:	f107 0316 	add.w	r3, r7, #22
 8008698:	4619      	mov	r1, r3
 800869a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800869c:	f000 f9c1 	bl	8008a22 <USBH_GetNextDesc>
 80086a0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d138      	bne.n	800871c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	795b      	ldrb	r3, [r3, #5]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d113      	bne.n	80086da <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d003      	beq.n	80086c2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	799b      	ldrb	r3, [r3, #6]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d10b      	bne.n	80086da <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	79db      	ldrb	r3, [r3, #7]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <USBH_ParseCfgDesc+0x14e>
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b09      	cmp	r3, #9
 80086d0:	d007      	beq.n	80086e2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	2209      	movs	r2, #9
 80086d6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086d8:	e003      	b.n	80086e2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	2207      	movs	r2, #7
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	e000      	b.n	80086e4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80086e2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80086e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80086ec:	3201      	adds	r2, #1
 80086ee:	00d2      	lsls	r2, r2, #3
 80086f0:	211a      	movs	r1, #26
 80086f2:	fb01 f303 	mul.w	r3, r1, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	3308      	adds	r3, #8
 80086fa:	6a3a      	ldr	r2, [r7, #32]
 80086fc:	4413      	add	r3, r2
 80086fe:	3304      	adds	r3, #4
 8008700:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 f870 	bl	80087ec <USBH_ParseEPDesc>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008712:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008716:	3301      	adds	r3, #1
 8008718:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	791b      	ldrb	r3, [r3, #4]
 8008720:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008724:	429a      	cmp	r2, r3
 8008726:	d204      	bcs.n	8008732 <USBH_ParseCfgDesc+0x19e>
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	885a      	ldrh	r2, [r3, #2]
 800872c:	8afb      	ldrh	r3, [r7, #22]
 800872e:	429a      	cmp	r2, r3
 8008730:	d8b0      	bhi.n	8008694 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800873a:	429a      	cmp	r2, r3
 800873c:	d201      	bcs.n	8008742 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800873e:	2303      	movs	r3, #3
 8008740:	e01c      	b.n	800877c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008746:	3301      	adds	r3, #1
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800874c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008750:	2b01      	cmp	r3, #1
 8008752:	d805      	bhi.n	8008760 <USBH_ParseCfgDesc+0x1cc>
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	885a      	ldrh	r2, [r3, #2]
 8008758:	8afb      	ldrh	r3, [r7, #22]
 800875a:	429a      	cmp	r2, r3
 800875c:	f63f af74 	bhi.w	8008648 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	2b02      	cmp	r3, #2
 8008766:	bf28      	it	cs
 8008768:	2302      	movcs	r3, #2
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008770:	429a      	cmp	r2, r3
 8008772:	d201      	bcs.n	8008778 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008774:	2303      	movs	r3, #3
 8008776:	e001      	b.n	800877c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008778:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800877c:	4618      	mov	r0, r3
 800877e:	3730      	adds	r7, #48	@ 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	785a      	ldrb	r2, [r3, #1]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	789a      	ldrb	r2, [r3, #2]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	78da      	ldrb	r2, [r3, #3]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	3304      	adds	r3, #4
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	bf28      	it	cs
 80087b8:	2302      	movcs	r3, #2
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	795a      	ldrb	r2, [r3, #5]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	799a      	ldrb	r2, [r3, #6]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	79da      	ldrb	r2, [r3, #7]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	7a1a      	ldrb	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	721a      	strb	r2, [r3, #8]
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	785a      	ldrb	r2, [r3, #1]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	789a      	ldrb	r2, [r3, #2]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	78da      	ldrb	r2, [r3, #3]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3304      	adds	r3, #4
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3305      	adds	r3, #5
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	b29b      	uxth	r3, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	799a      	ldrb	r2, [r3, #6]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	889b      	ldrh	r3, [r3, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800884a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800884e:	d804      	bhi.n	800885a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008858:	d901      	bls.n	800885e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800885a:	2303      	movs	r3, #3
 800885c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008864:	2b00      	cmp	r3, #0
 8008866:	d136      	bne.n	80088d6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	78db      	ldrb	r3, [r3, #3]
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d108      	bne.n	8008886 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	889b      	ldrh	r3, [r3, #4]
 8008878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887c:	f240 8097 	bls.w	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008880:	2303      	movs	r3, #3
 8008882:	75fb      	strb	r3, [r7, #23]
 8008884:	e093      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	78db      	ldrb	r3, [r3, #3]
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d107      	bne.n	80088a2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	889b      	ldrh	r3, [r3, #4]
 8008896:	2b40      	cmp	r3, #64	@ 0x40
 8008898:	f240 8089 	bls.w	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800889c:	2303      	movs	r3, #3
 800889e:	75fb      	strb	r3, [r7, #23]
 80088a0:	e085      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d005      	beq.n	80088ba <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	78db      	ldrb	r3, [r3, #3]
 80088b2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d10a      	bne.n	80088d0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	799b      	ldrb	r3, [r3, #6]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <USBH_ParseEPDesc+0xde>
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	799b      	ldrb	r3, [r3, #6]
 80088c6:	2b10      	cmp	r3, #16
 80088c8:	d970      	bls.n	80089ac <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80088ca:	2303      	movs	r3, #3
 80088cc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088ce:	e06d      	b.n	80089ac <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80088d0:	2303      	movs	r3, #3
 80088d2:	75fb      	strb	r3, [r7, #23]
 80088d4:	e06b      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d13c      	bne.n	800895a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	78db      	ldrb	r3, [r3, #3]
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d005      	beq.n	80088f8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	78db      	ldrb	r3, [r3, #3]
 80088f0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	889b      	ldrh	r3, [r3, #4]
 80088fc:	2b40      	cmp	r3, #64	@ 0x40
 80088fe:	d956      	bls.n	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008900:	2303      	movs	r3, #3
 8008902:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008904:	e053      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	78db      	ldrb	r3, [r3, #3]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b01      	cmp	r3, #1
 8008910:	d10e      	bne.n	8008930 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	799b      	ldrb	r3, [r3, #6]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800891e:	2b10      	cmp	r3, #16
 8008920:	d803      	bhi.n	800892a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008926:	2b40      	cmp	r3, #64	@ 0x40
 8008928:	d941      	bls.n	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800892a:	2303      	movs	r3, #3
 800892c:	75fb      	strb	r3, [r7, #23]
 800892e:	e03e      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	78db      	ldrb	r3, [r3, #3]
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	2b03      	cmp	r3, #3
 800893a:	d10b      	bne.n	8008954 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	799b      	ldrb	r3, [r3, #6]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <USBH_ParseEPDesc+0x162>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	889b      	ldrh	r3, [r3, #4]
 8008948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894c:	d32f      	bcc.n	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800894e:	2303      	movs	r3, #3
 8008950:	75fb      	strb	r3, [r7, #23]
 8008952:	e02c      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008954:	2303      	movs	r3, #3
 8008956:	75fb      	strb	r3, [r7, #23]
 8008958:	e029      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008960:	2b02      	cmp	r3, #2
 8008962:	d120      	bne.n	80089a6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	78db      	ldrb	r3, [r3, #3]
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	889b      	ldrh	r3, [r3, #4]
 8008974:	2b08      	cmp	r3, #8
 8008976:	d01a      	beq.n	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008978:	2303      	movs	r3, #3
 800897a:	75fb      	strb	r3, [r7, #23]
 800897c:	e017      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	78db      	ldrb	r3, [r3, #3]
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b03      	cmp	r3, #3
 8008988:	d10a      	bne.n	80089a0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	799b      	ldrb	r3, [r3, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <USBH_ParseEPDesc+0x1ae>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	2b08      	cmp	r3, #8
 8008998:	d909      	bls.n	80089ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800899a:	2303      	movs	r3, #3
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	e006      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80089a0:	2303      	movs	r3, #3
 80089a2:	75fb      	strb	r3, [r7, #23]
 80089a4:	e003      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80089a6:	2303      	movs	r3, #3
 80089a8:	75fb      	strb	r3, [r7, #23]
 80089aa:	e000      	b.n	80089ae <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089ac:	bf00      	nop
  }

  return status;
 80089ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3301      	adds	r3, #1
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d120      	bne.n	8008a16 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	1e9a      	subs	r2, r3, #2
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	4293      	cmp	r3, r2
 80089de:	bf28      	it	cs
 80089e0:	4613      	movcs	r3, r2
 80089e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3302      	adds	r3, #2
 80089e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80089ea:	2300      	movs	r3, #0
 80089ec:	82fb      	strh	r3, [r7, #22]
 80089ee:	e00b      	b.n	8008a08 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80089f0:	8afb      	ldrh	r3, [r7, #22]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	781a      	ldrb	r2, [r3, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	3301      	adds	r3, #1
 8008a00:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008a02:	8afb      	ldrh	r3, [r7, #22]
 8008a04:	3302      	adds	r3, #2
 8008a06:	82fb      	strh	r3, [r7, #22]
 8008a08:	8afa      	ldrh	r2, [r7, #22]
 8008a0a:	8abb      	ldrh	r3, [r7, #20]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d3ef      	bcc.n	80089f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
  }
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	4413      	add	r3, r2
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4413      	add	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	4613      	mov	r3, r2
 8008a62:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	789b      	ldrb	r3, [r3, #2]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d002      	beq.n	8008a76 <USBH_CtlReq+0x20>
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d01d      	beq.n	8008ab0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008a74:	e043      	b.n	8008afe <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2201      	movs	r2, #1
 8008a86:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2203      	movs	r2, #3
 8008a96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f000 fe15 	bl	80096d8 <osMessageQueuePut>
      break;
 8008aae:	e026      	b.n	8008afe <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f829 	bl	8008b08 <USBH_HandleControl>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <USBH_CtlReq+0x70>
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d106      	bne.n	8008ad4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	761a      	strb	r2, [r3, #24]
 8008ad2:	e005      	b.n	8008ae0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d102      	bne.n	8008ae0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	f000 fdee 	bl	80096d8 <osMessageQueuePut>
      break;
 8008afc:	bf00      	nop
  }
  return status;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	7e1b      	ldrb	r3, [r3, #24]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	2b0a      	cmp	r3, #10
 8008b20:	f200 8229 	bhi.w	8008f76 <USBH_HandleControl+0x46e>
 8008b24:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <USBH_HandleControl+0x24>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b59 	.word	0x08008b59
 8008b30:	08008b73 	.word	0x08008b73
 8008b34:	08008c15 	.word	0x08008c15
 8008b38:	08008c3b 	.word	0x08008c3b
 8008b3c:	08008cc7 	.word	0x08008cc7
 8008b40:	08008cf1 	.word	0x08008cf1
 8008b44:	08008db3 	.word	0x08008db3
 8008b48:	08008dd5 	.word	0x08008dd5
 8008b4c:	08008e67 	.word	0x08008e67
 8008b50:	08008e8d 	.word	0x08008e8d
 8008b54:	08008f1f 	.word	0x08008f1f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f103 0110 	add.w	r1, r3, #16
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	795b      	ldrb	r3, [r3, #5]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa17 	bl	8008f98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	761a      	strb	r2, [r3, #24]
      break;
 8008b70:	e20c      	b.n	8008f8c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	795b      	ldrb	r3, [r3, #5]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f003 fef1 	bl	800c960 <USBH_LL_GetURBState>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d12c      	bne.n	8008be2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7c1b      	ldrb	r3, [r3, #16]
 8008b8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b90:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8adb      	ldrh	r3, [r3, #22]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00a      	beq.n	8008bb0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008b9a:	7b7b      	ldrb	r3, [r7, #13]
 8008b9c:	2b80      	cmp	r3, #128	@ 0x80
 8008b9e:	d103      	bne.n	8008ba8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	761a      	strb	r2, [r3, #24]
 8008ba6:	e00d      	b.n	8008bc4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2205      	movs	r2, #5
 8008bac:	761a      	strb	r2, [r3, #24]
 8008bae:	e009      	b.n	8008bc4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008bb0:	7b7b      	ldrb	r3, [r7, #13]
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d103      	bne.n	8008bbe <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2209      	movs	r2, #9
 8008bba:	761a      	strb	r2, [r3, #24]
 8008bbc:	e002      	b.n	8008bc4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f000 fd7c 	bl	80096d8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008be0:	e1cb      	b.n	8008f7a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d003      	beq.n	8008bf0 <USBH_HandleControl+0xe8>
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	f040 81c5 	bne.w	8008f7a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	220b      	movs	r2, #11
 8008bf4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2203      	movs	r2, #3
 8008bfa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f000 fd63 	bl	80096d8 <osMessageQueuePut>
      break;
 8008c12:	e1b2      	b.n	8008f7a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6899      	ldr	r1, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	899a      	ldrh	r2, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	791b      	ldrb	r3, [r3, #4]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f9f2 	bl	8009016 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2204      	movs	r2, #4
 8008c36:	761a      	strb	r2, [r3, #24]
      break;
 8008c38:	e1a8      	b.n	8008f8c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	791b      	ldrb	r3, [r3, #4]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f003 fe8d 	bl	800c960 <USBH_LL_GetURBState>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d110      	bne.n	8008c72 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2209      	movs	r2, #9
 8008c54:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f000 fd33 	bl	80096d8 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b05      	cmp	r3, #5
 8008c76:	d110      	bne.n	8008c9a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	f000 fd20 	bl	80096d8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c98:	e171      	b.n	8008f7e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	f040 816e 	bne.w	8008f7e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	220b      	movs	r2, #11
 8008ca6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2203      	movs	r2, #3
 8008cac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f000 fd0a 	bl	80096d8 <osMessageQueuePut>
      break;
 8008cc4:	e15b      	b.n	8008f7e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6899      	ldr	r1, [r3, #8]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	899a      	ldrh	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	795b      	ldrb	r3, [r3, #5]
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	9000      	str	r0, [sp, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f978 	bl	8008fcc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2206      	movs	r2, #6
 8008cec:	761a      	strb	r2, [r3, #24]
      break;
 8008cee:	e14d      	b.n	8008f8c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	795b      	ldrb	r3, [r3, #5]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 fe32 	bl	800c960 <USBH_LL_GetURBState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d111      	bne.n	8008d2a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2207      	movs	r2, #7
 8008d0a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2203      	movs	r2, #3
 8008d10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d20:	2300      	movs	r3, #0
 8008d22:	2200      	movs	r2, #0
 8008d24:	f000 fcd8 	bl	80096d8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d28:	e12b      	b.n	8008f82 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	d113      	bne.n	8008d58 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	220c      	movs	r2, #12
 8008d34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d36:	2303      	movs	r3, #3
 8008d38:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2200      	movs	r2, #0
 8008d52:	f000 fcc1 	bl	80096d8 <osMessageQueuePut>
      break;
 8008d56:	e114      	b.n	8008f82 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d111      	bne.n	8008d82 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2205      	movs	r2, #5
 8008d62:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2203      	movs	r2, #3
 8008d68:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f000 fcac 	bl	80096d8 <osMessageQueuePut>
      break;
 8008d80:	e0ff      	b.n	8008f82 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	f040 80fc 	bne.w	8008f82 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	220b      	movs	r2, #11
 8008d8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008d90:	2302      	movs	r3, #2
 8008d92:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2203      	movs	r2, #3
 8008d98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008da8:	2300      	movs	r3, #0
 8008daa:	2200      	movs	r2, #0
 8008dac:	f000 fc94 	bl	80096d8 <osMessageQueuePut>
      break;
 8008db0:	e0e7      	b.n	8008f82 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	791b      	ldrb	r3, [r3, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f92b 	bl	8009016 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2208      	movs	r2, #8
 8008dd0:	761a      	strb	r2, [r3, #24]

      break;
 8008dd2:	e0db      	b.n	8008f8c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	791b      	ldrb	r3, [r3, #4]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f003 fdc0 	bl	800c960 <USBH_LL_GetURBState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d113      	bne.n	8008e12 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	220d      	movs	r2, #13
 8008dee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2203      	movs	r2, #3
 8008df8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f000 fc64 	bl	80096d8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e10:	e0b9      	b.n	8008f86 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d111      	bne.n	8008e3c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220b      	movs	r2, #11
 8008e1c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2203      	movs	r2, #3
 8008e22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	f000 fc4f 	bl	80096d8 <osMessageQueuePut>
      break;
 8008e3a:	e0a4      	b.n	8008f86 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	f040 80a1 	bne.w	8008f86 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008e44:	2303      	movs	r3, #3
 8008e46:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f000 fc3a 	bl	80096d8 <osMessageQueuePut>
      break;
 8008e64:	e08f      	b.n	8008f86 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	795b      	ldrb	r3, [r3, #5]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	9200      	str	r2, [sp, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f8aa 	bl	8008fcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	220a      	movs	r2, #10
 8008e88:	761a      	strb	r2, [r3, #24]
      break;
 8008e8a:	e07f      	b.n	8008f8c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	795b      	ldrb	r3, [r3, #5]
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f003 fd64 	bl	800c960 <USBH_LL_GetURBState>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d113      	bne.n	8008eca <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	220d      	movs	r2, #13
 8008eaa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f000 fc08 	bl	80096d8 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ec8:	e05f      	b.n	8008f8a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eca:	7bbb      	ldrb	r3, [r7, #14]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d111      	bne.n	8008ef4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2209      	movs	r2, #9
 8008ed4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2203      	movs	r2, #3
 8008eda:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008eea:	2300      	movs	r3, #0
 8008eec:	2200      	movs	r2, #0
 8008eee:	f000 fbf3 	bl	80096d8 <osMessageQueuePut>
      break;
 8008ef2:	e04a      	b.n	8008f8a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d147      	bne.n	8008f8a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	220b      	movs	r2, #11
 8008efe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2203      	movs	r2, #3
 8008f04:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008f14:	2300      	movs	r3, #0
 8008f16:	2200      	movs	r2, #0
 8008f18:	f000 fbde 	bl	80096d8 <osMessageQueuePut>
      break;
 8008f1c:	e035      	b.n	8008f8a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	7e5b      	ldrb	r3, [r3, #25]
 8008f22:	3301      	adds	r3, #1
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	765a      	strb	r2, [r3, #25]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	7e5b      	ldrb	r3, [r3, #25]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d806      	bhi.n	8008f40 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f3e:	e025      	b.n	8008f8c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f46:	2106      	movs	r1, #6
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	795b      	ldrb	r3, [r3, #5]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f90d 	bl	8009178 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	791b      	ldrb	r3, [r3, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f907 	bl	8009178 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f70:	2302      	movs	r3, #2
 8008f72:	73fb      	strb	r3, [r7, #15]
      break;
 8008f74:	e00a      	b.n	8008f8c <USBH_HandleControl+0x484>

    default:
      break;
 8008f76:	bf00      	nop
 8008f78:	e008      	b.n	8008f8c <USBH_HandleControl+0x484>
      break;
 8008f7a:	bf00      	nop
 8008f7c:	e006      	b.n	8008f8c <USBH_HandleControl+0x484>
      break;
 8008f7e:	bf00      	nop
 8008f80:	e004      	b.n	8008f8c <USBH_HandleControl+0x484>
      break;
 8008f82:	bf00      	nop
 8008f84:	e002      	b.n	8008f8c <USBH_HandleControl+0x484>
      break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <USBH_HandleControl+0x484>
      break;
 8008f8a:	bf00      	nop
  }

  return status;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop

08008f98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af04      	add	r7, sp, #16
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fa6:	79f9      	ldrb	r1, [r7, #7]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	2308      	movs	r3, #8
 8008fae:	9302      	str	r3, [sp, #8]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f003 fc9e 	bl	800c8fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af04      	add	r7, sp, #16
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	460b      	mov	r3, r1
 8008fdc:	80fb      	strh	r3, [r7, #6]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ff0:	7979      	ldrb	r1, [r7, #5]
 8008ff2:	7e3b      	ldrb	r3, [r7, #24]
 8008ff4:	9303      	str	r3, [sp, #12]
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	2301      	movs	r3, #1
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	2200      	movs	r2, #0
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f003 fc79 	bl	800c8fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b088      	sub	sp, #32
 800901a:	af04      	add	r7, sp, #16
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4611      	mov	r1, r2
 8009022:	461a      	mov	r2, r3
 8009024:	460b      	mov	r3, r1
 8009026:	80fb      	strh	r3, [r7, #6]
 8009028:	4613      	mov	r3, r2
 800902a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800902c:	7979      	ldrb	r1, [r7, #5]
 800902e:	2300      	movs	r3, #0
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	9302      	str	r3, [sp, #8]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	2301      	movs	r3, #1
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	2300      	movs	r3, #0
 8009040:	2201      	movs	r2, #1
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f003 fc5b 	bl	800c8fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009048:	2300      	movs	r3, #0

}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af04      	add	r7, sp, #16
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	4611      	mov	r1, r2
 800905e:	461a      	mov	r2, r3
 8009060:	460b      	mov	r3, r1
 8009062:	80fb      	strh	r3, [r7, #6]
 8009064:	4613      	mov	r3, r2
 8009066:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009076:	7979      	ldrb	r1, [r7, #5]
 8009078:	7e3b      	ldrb	r3, [r7, #24]
 800907a:	9303      	str	r3, [sp, #12]
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	9302      	str	r3, [sp, #8]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	2301      	movs	r3, #1
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2302      	movs	r3, #2
 800908a:	2200      	movs	r2, #0
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f003 fc36 	bl	800c8fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af04      	add	r7, sp, #16
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	460b      	mov	r3, r1
 80090ac:	80fb      	strh	r3, [r7, #6]
 80090ae:	4613      	mov	r3, r2
 80090b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090b2:	7979      	ldrb	r1, [r7, #5]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	2301      	movs	r3, #1
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2302      	movs	r3, #2
 80090c6:	2201      	movs	r2, #1
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f003 fc18 	bl	800c8fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af04      	add	r7, sp, #16
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	4608      	mov	r0, r1
 80090e2:	4611      	mov	r1, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	70fb      	strb	r3, [r7, #3]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70bb      	strb	r3, [r7, #2]
 80090ee:	4613      	mov	r3, r2
 80090f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090f2:	7878      	ldrb	r0, [r7, #1]
 80090f4:	78ba      	ldrb	r2, [r7, #2]
 80090f6:	78f9      	ldrb	r1, [r7, #3]
 80090f8:	8b3b      	ldrh	r3, [r7, #24]
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	7d3b      	ldrb	r3, [r7, #20]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	7c3b      	ldrb	r3, [r7, #16]
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	4603      	mov	r3, r0
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f003 fbab 	bl	800c862 <USBH_LL_OpenPipe>

  return USBH_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f003 fbca 	bl	800c8c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f836 	bl	80091b4 <USBH_GetFreePipe>
 8009148:	4603      	mov	r3, r0
 800914a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009152:	4293      	cmp	r3, r2
 8009154:	d00a      	beq.n	800916c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009156:	78fa      	ldrb	r2, [r7, #3]
 8009158:	89fb      	ldrh	r3, [r7, #14]
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	33e0      	adds	r3, #224	@ 0xe0
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800916c:	89fb      	ldrh	r3, [r7, #14]
 800916e:	b2db      	uxtb	r3, r3
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d80d      	bhi.n	80091a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	33e0      	adds	r3, #224	@ 0xe0
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	33e0      	adds	r3, #224	@ 0xe0
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	440b      	add	r3, r1
 80091a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e00f      	b.n	80091e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	33e0      	adds	r3, #224	@ 0xe0
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	e007      	b.n	80091f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	3301      	adds	r3, #1
 80091e4:	73fb      	strb	r3, [r7, #15]
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b0f      	cmp	r3, #15
 80091ea:	d9ec      	bls.n	80091c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <__NVIC_SetPriority>:
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920c:	2b00      	cmp	r3, #0
 800920e:	db0a      	blt.n	8009226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	b2da      	uxtb	r2, r3
 8009214:	490c      	ldr	r1, [pc, #48]	@ (8009248 <__NVIC_SetPriority+0x4c>)
 8009216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921a:	0112      	lsls	r2, r2, #4
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	440b      	add	r3, r1
 8009220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009224:	e00a      	b.n	800923c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4908      	ldr	r1, [pc, #32]	@ (800924c <__NVIC_SetPriority+0x50>)
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	3b04      	subs	r3, #4
 8009234:	0112      	lsls	r2, r2, #4
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	440b      	add	r3, r1
 800923a:	761a      	strb	r2, [r3, #24]
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	e000e100 	.word	0xe000e100
 800924c:	e000ed00 	.word	0xe000ed00

08009250 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009254:	4b05      	ldr	r3, [pc, #20]	@ (800926c <SysTick_Handler+0x1c>)
 8009256:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009258:	f001 fff4 	bl	800b244 <xTaskGetSchedulerState>
 800925c:	4603      	mov	r3, r0
 800925e:	2b01      	cmp	r3, #1
 8009260:	d001      	beq.n	8009266 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009262:	f002 fea9 	bl	800bfb8 <xPortSysTickHandler>
  }
}
 8009266:	bf00      	nop
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	e000e010 	.word	0xe000e010

08009270 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009274:	2100      	movs	r1, #0
 8009276:	f06f 0004 	mvn.w	r0, #4
 800927a:	f7ff ffbf 	bl	80091fc <__NVIC_SetPriority>
#endif
}
 800927e:	bf00      	nop
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800928a:	f3ef 8305 	mrs	r3, IPSR
 800928e:	603b      	str	r3, [r7, #0]
  return(result);
 8009290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009296:	f06f 0305 	mvn.w	r3, #5
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	e00c      	b.n	80092b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800929e:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <osKernelInitialize+0x44>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092a6:	4b08      	ldr	r3, [pc, #32]	@ (80092c8 <osKernelInitialize+0x44>)
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	607b      	str	r3, [r7, #4]
 80092b0:	e002      	b.n	80092b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80092b2:	f04f 33ff 	mov.w	r3, #4294967295
 80092b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092b8:	687b      	ldr	r3, [r7, #4]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	200007c4 	.word	0x200007c4

080092cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d2:	f3ef 8305 	mrs	r3, IPSR
 80092d6:	603b      	str	r3, [r7, #0]
  return(result);
 80092d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80092de:	f06f 0305 	mvn.w	r3, #5
 80092e2:	607b      	str	r3, [r7, #4]
 80092e4:	e010      	b.n	8009308 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009314 <osKernelStart+0x48>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d109      	bne.n	8009302 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092ee:	f7ff ffbf 	bl	8009270 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092f2:	4b08      	ldr	r3, [pc, #32]	@ (8009314 <osKernelStart+0x48>)
 80092f4:	2202      	movs	r2, #2
 80092f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092f8:	f001 fb40 	bl	800a97c <vTaskStartScheduler>
      stat = osOK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	e002      	b.n	8009308 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009302:	f04f 33ff 	mov.w	r3, #4294967295
 8009306:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009308:	687b      	ldr	r3, [r7, #4]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200007c4 	.word	0x200007c4

08009318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	@ 0x38
 800931c:	af04      	add	r7, sp, #16
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009328:	f3ef 8305 	mrs	r3, IPSR
 800932c:	617b      	str	r3, [r7, #20]
  return(result);
 800932e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009330:	2b00      	cmp	r3, #0
 8009332:	d17e      	bne.n	8009432 <osThreadNew+0x11a>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d07b      	beq.n	8009432 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800933a:	2380      	movs	r3, #128	@ 0x80
 800933c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800933e:	2318      	movs	r3, #24
 8009340:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d045      	beq.n	80093de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <osThreadNew+0x48>
        name = attr->name;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <osThreadNew+0x6e>
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	2b38      	cmp	r3, #56	@ 0x38
 8009378:	d805      	bhi.n	8009386 <osThreadNew+0x6e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <osThreadNew+0x72>
        return (NULL);
 8009386:	2300      	movs	r3, #0
 8009388:	e054      	b.n	8009434 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	089b      	lsrs	r3, r3, #2
 8009398:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00e      	beq.n	80093c0 <osThreadNew+0xa8>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	2ba7      	cmp	r3, #167	@ 0xa7
 80093a8:	d90a      	bls.n	80093c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d006      	beq.n	80093c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <osThreadNew+0xa8>
        mem = 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	61bb      	str	r3, [r7, #24]
 80093be:	e010      	b.n	80093e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10c      	bne.n	80093e2 <osThreadNew+0xca>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <osThreadNew+0xca>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <osThreadNew+0xca>
          mem = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	e001      	b.n	80093e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d110      	bne.n	800940a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093f0:	9202      	str	r2, [sp, #8]
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	6a3a      	ldr	r2, [r7, #32]
 80093fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f001 f8c8 	bl	800a594 <xTaskCreateStatic>
 8009404:	4603      	mov	r3, r0
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	e013      	b.n	8009432 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d110      	bne.n	8009432 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	b29a      	uxth	r2, r3
 8009414:	f107 0310 	add.w	r3, r7, #16
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f001 f916 	bl	800a654 <xTaskCreate>
 8009428:	4603      	mov	r3, r0
 800942a:	2b01      	cmp	r3, #1
 800942c:	d001      	beq.n	8009432 <osThreadNew+0x11a>
            hTask = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009432:	693b      	ldr	r3, [r7, #16]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3728      	adds	r7, #40	@ 0x28
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009444:	f3ef 8305 	mrs	r3, IPSR
 8009448:	60bb      	str	r3, [r7, #8]
  return(result);
 800944a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <osDelay+0x1c>
    stat = osErrorISR;
 8009450:	f06f 0305 	mvn.w	r3, #5
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e007      	b.n	8009468 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 fa54 	bl	800a910 <vTaskDelay>
    }
  }

  return (stat);
 8009468:	68fb      	ldr	r3, [r7, #12]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f002 fbbc 	bl	800bbf8 <pvTimerGetTimerID>
 8009480:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	6852      	ldr	r2, [r2, #4]
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
  }
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b08c      	sub	sp, #48	@ 0x30
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	460b      	mov	r3, r1
 80094aa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b0:	f3ef 8305 	mrs	r3, IPSR
 80094b4:	613b      	str	r3, [r7, #16]
  return(result);
 80094b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d163      	bne.n	8009584 <osTimerNew+0xe8>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d060      	beq.n	8009584 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80094c2:	2008      	movs	r0, #8
 80094c4:	f002 fe0a 	bl	800c0dc <pvPortMalloc>
 80094c8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d059      	beq.n	8009584 <osTimerNew+0xe8>
      callb->func = func;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d102      	bne.n	80094e8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	e001      	b.n	80094ec <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80094e8:	2301      	movs	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295
 80094f0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01c      	beq.n	8009536 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <osTimerNew+0x6e>
          name = attr->name;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d006      	beq.n	8009520 <osTimerNew+0x84>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b2b      	cmp	r3, #43	@ 0x2b
 8009518:	d902      	bls.n	8009520 <osTimerNew+0x84>
          mem = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	e00c      	b.n	800953a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d108      	bne.n	800953a <osTimerNew+0x9e>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <osTimerNew+0x9e>
            mem = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	e001      	b.n	800953a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d10c      	bne.n	800955a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	4b12      	ldr	r3, [pc, #72]	@ (8009590 <osTimerNew+0xf4>)
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	2101      	movs	r1, #1
 8009550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009552:	f001 ffc4 	bl	800b4de <xTimerCreateStatic>
 8009556:	6238      	str	r0, [r7, #32]
 8009558:	e00b      	b.n	8009572 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009560:	4b0b      	ldr	r3, [pc, #44]	@ (8009590 <osTimerNew+0xf4>)
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	2101      	movs	r1, #1
 800956a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800956c:	f001 ff96 	bl	800b49c <xTimerCreate>
 8009570:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <osTimerNew+0xe8>
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <osTimerNew+0xe8>
        vPortFree (callb);
 800957e:	6978      	ldr	r0, [r7, #20]
 8009580:	f002 fe7a 	bl	800c278 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009584:	6a3b      	ldr	r3, [r7, #32]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3728      	adds	r7, #40	@ 0x28
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	08009473 	.word	0x08009473

08009594 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095a2:	f3ef 8305 	mrs	r3, IPSR
 80095a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80095a8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <osTimerStart+0x22>
    stat = osErrorISR;
 80095ae:	f06f 0305 	mvn.w	r3, #5
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	e017      	b.n	80095e6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80095bc:	f06f 0303 	mvn.w	r3, #3
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e010      	b.n	80095e6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	2104      	movs	r1, #4
 80095ce:	6938      	ldr	r0, [r7, #16]
 80095d0:	f002 f802 	bl	800b5d8 <xTimerGenericCommand>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d102      	bne.n	80095e0 <osTimerStart+0x4c>
      stat = osOK;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e002      	b.n	80095e6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80095e0:	f06f 0302 	mvn.w	r3, #2
 80095e4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80095e6:	697b      	ldr	r3, [r7, #20]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	@ 0x28
 80095f4:	af02      	add	r7, sp, #8
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009600:	f3ef 8305 	mrs	r3, IPSR
 8009604:	613b      	str	r3, [r7, #16]
  return(result);
 8009606:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009608:	2b00      	cmp	r3, #0
 800960a:	d15f      	bne.n	80096cc <osMessageQueueNew+0xdc>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d05c      	beq.n	80096cc <osMessageQueueNew+0xdc>
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d059      	beq.n	80096cc <osMessageQueueNew+0xdc>
    mem = -1;
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d029      	beq.n	8009678 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d012      	beq.n	8009652 <osMessageQueueNew+0x62>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b4f      	cmp	r3, #79	@ 0x4f
 8009632:	d90e      	bls.n	8009652 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695a      	ldr	r2, [r3, #20]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	429a      	cmp	r2, r3
 800964a:	d302      	bcc.n	8009652 <osMessageQueueNew+0x62>
        mem = 1;
 800964c:	2301      	movs	r3, #1
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	e014      	b.n	800967c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d110      	bne.n	800967c <osMessageQueueNew+0x8c>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10c      	bne.n	800967c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009666:	2b00      	cmp	r3, #0
 8009668:	d108      	bne.n	800967c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d104      	bne.n	800967c <osMessageQueueNew+0x8c>
          mem = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	e001      	b.n	800967c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d10b      	bne.n	800969a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691a      	ldr	r2, [r3, #16]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	2100      	movs	r1, #0
 800968c:	9100      	str	r1, [sp, #0]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 fa31 	bl	8009af8 <xQueueGenericCreateStatic>
 8009696:	61f8      	str	r0, [r7, #28]
 8009698:	e008      	b.n	80096ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d105      	bne.n	80096ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80096a0:	2200      	movs	r2, #0
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 faa4 	bl	8009bf2 <xQueueGenericCreate>
 80096aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00c      	beq.n	80096cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	e001      	b.n	80096c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80096c4:	6979      	ldr	r1, [r7, #20]
 80096c6:	69f8      	ldr	r0, [r7, #28]
 80096c8:	f000 ff06 	bl	800a4d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80096cc:	69fb      	ldr	r3, [r7, #28]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f0:	f3ef 8305 	mrs	r3, IPSR
 80096f4:	617b      	str	r3, [r7, #20]
  return(result);
 80096f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d028      	beq.n	800974e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <osMessageQueuePut+0x36>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <osMessageQueuePut+0x36>
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800970e:	f06f 0303 	mvn.w	r3, #3
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	e038      	b.n	8009788 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800971a:	f107 0210 	add.w	r2, r7, #16
 800971e:	2300      	movs	r3, #0
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	69b8      	ldr	r0, [r7, #24]
 8009724:	f000 fbc6 	bl	8009eb4 <xQueueGenericSendFromISR>
 8009728:	4603      	mov	r3, r0
 800972a:	2b01      	cmp	r3, #1
 800972c:	d003      	beq.n	8009736 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800972e:	f06f 0302 	mvn.w	r3, #2
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	e028      	b.n	8009788 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d025      	beq.n	8009788 <osMessageQueuePut+0xb0>
 800973c:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <osMessageQueuePut+0xbc>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	e01c      	b.n	8009788 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <osMessageQueuePut+0x82>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800975a:	f06f 0303 	mvn.w	r3, #3
 800975e:	61fb      	str	r3, [r7, #28]
 8009760:	e012      	b.n	8009788 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009762:	2300      	movs	r3, #0
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	69b8      	ldr	r0, [r7, #24]
 800976a:	f000 faa1 	bl	8009cb0 <xQueueGenericSend>
 800976e:	4603      	mov	r3, r0
 8009770:	2b01      	cmp	r3, #1
 8009772:	d009      	beq.n	8009788 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800977a:	f06f 0301 	mvn.w	r3, #1
 800977e:	61fb      	str	r3, [r7, #28]
 8009780:	e002      	b.n	8009788 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009782:	f06f 0302 	mvn.w	r3, #2
 8009786:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009788:	69fb      	ldr	r3, [r7, #28]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ae:	f3ef 8305 	mrs	r3, IPSR
 80097b2:	617b      	str	r3, [r7, #20]
  return(result);
 80097b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d028      	beq.n	800980c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <osMessageQueueGet+0x34>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <osMessageQueueGet+0x34>
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80097cc:	f06f 0303 	mvn.w	r3, #3
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	e037      	b.n	8009844 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80097d8:	f107 0310 	add.w	r3, r7, #16
 80097dc:	461a      	mov	r2, r3
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	69b8      	ldr	r0, [r7, #24]
 80097e2:	f000 fce7 	bl	800a1b4 <xQueueReceiveFromISR>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d003      	beq.n	80097f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80097ec:	f06f 0302 	mvn.w	r3, #2
 80097f0:	61fb      	str	r3, [r7, #28]
 80097f2:	e027      	b.n	8009844 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d024      	beq.n	8009844 <osMessageQueueGet+0xac>
 80097fa:	4b15      	ldr	r3, [pc, #84]	@ (8009850 <osMessageQueueGet+0xb8>)
 80097fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	e01b      	b.n	8009844 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <osMessageQueueGet+0x80>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d103      	bne.n	8009820 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009818:	f06f 0303 	mvn.w	r3, #3
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	e011      	b.n	8009844 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	69b8      	ldr	r0, [r7, #24]
 8009826:	f000 fbe3 	bl	8009ff0 <xQueueReceive>
 800982a:	4603      	mov	r3, r0
 800982c:	2b01      	cmp	r3, #1
 800982e:	d009      	beq.n	8009844 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009836:	f06f 0301 	mvn.w	r3, #1
 800983a:	61fb      	str	r3, [r7, #28]
 800983c:	e002      	b.n	8009844 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800983e:	f06f 0302 	mvn.w	r3, #2
 8009842:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009844:	69fb      	ldr	r3, [r7, #28]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	e000ed04 	.word	0xe000ed04

08009854 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a07      	ldr	r2, [pc, #28]	@ (8009880 <vApplicationGetIdleTaskMemory+0x2c>)
 8009864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4a06      	ldr	r2, [pc, #24]	@ (8009884 <vApplicationGetIdleTaskMemory+0x30>)
 800986a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2280      	movs	r2, #128	@ 0x80
 8009870:	601a      	str	r2, [r3, #0]
}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	200007c8 	.word	0x200007c8
 8009884:	20000870 	.word	0x20000870

08009888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4a07      	ldr	r2, [pc, #28]	@ (80098b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4a06      	ldr	r2, [pc, #24]	@ (80098b8 <vApplicationGetTimerTaskMemory+0x30>)
 800989e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098a6:	601a      	str	r2, [r3, #0]
}
 80098a8:	bf00      	nop
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20000a70 	.word	0x20000a70
 80098b8:	20000b18 	.word	0x20000b18

080098bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f103 0208 	add.w	r2, r3, #8
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f04f 32ff 	mov.w	r2, #4294967295
 80098d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f103 0208 	add.w	r2, r3, #8
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f103 0208 	add.w	r2, r3, #8
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009916:	b480      	push	{r7}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	601a      	str	r2, [r3, #0]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009974:	d103      	bne.n	800997e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e00c      	b.n	8009998 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3308      	adds	r3, #8
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	e002      	b.n	800998c <vListInsert+0x2e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	429a      	cmp	r2, r3
 8009996:	d2f6      	bcs.n	8009986 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6892      	ldr	r2, [r2, #8]
 80099e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6852      	ldr	r2, [r2, #4]
 80099f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d103      	bne.n	8009a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	1e5a      	subs	r2, r3, #1
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10b      	bne.n	8009a50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	e7fd      	b.n	8009a4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a50:	f002 fa22 	bl	800be98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5c:	68f9      	ldr	r1, [r7, #12]
 8009a5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a60:	fb01 f303 	mul.w	r3, r1, r3
 8009a64:	441a      	add	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	3b01      	subs	r3, #1
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	22ff      	movs	r2, #255	@ 0xff
 8009a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	22ff      	movs	r2, #255	@ 0xff
 8009a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d114      	bne.n	8009ad0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01a      	beq.n	8009ae4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3310      	adds	r3, #16
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 fa00 	bl	800aeb8 <xTaskRemoveFromEventList>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d012      	beq.n	8009ae4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009abe:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <xQueueGenericReset+0xd0>)
 8009ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	e009      	b.n	8009ae4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3310      	adds	r3, #16
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff fef1 	bl	80098bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3324      	adds	r3, #36	@ 0x24
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff feec 	bl	80098bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ae4:	f002 fa0a 	bl	800befc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ae8:	2301      	movs	r3, #1
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	e000ed04 	.word	0xe000ed04

08009af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	@ 0x38
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10b      	bne.n	8009b24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
 8009b22:	e7fd      	b.n	8009b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <xQueueGenericCreateStatic+0x56>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <xQueueGenericCreateStatic+0x5a>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <xQueueGenericCreateStatic+0x5c>
 8009b52:	2300      	movs	r3, #0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	623b      	str	r3, [r7, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <xQueueGenericCreateStatic+0x84>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <xQueueGenericCreateStatic+0x88>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e000      	b.n	8009b82 <xQueueGenericCreateStatic+0x8a>
 8009b80:	2300      	movs	r3, #0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10b      	bne.n	8009b9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	61fb      	str	r3, [r7, #28]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b9e:	2350      	movs	r3, #80	@ 0x50
 8009ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b50      	cmp	r3, #80	@ 0x50
 8009ba6:	d00b      	beq.n	8009bc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	61bb      	str	r3, [r7, #24]
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	e7fd      	b.n	8009bbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00d      	beq.n	8009be8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f840 	bl	8009c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3730      	adds	r7, #48	@ 0x30
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b08a      	sub	sp, #40	@ 0x28
 8009bf6:	af02      	add	r7, sp, #8
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	613b      	str	r3, [r7, #16]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	3350      	adds	r3, #80	@ 0x50
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fa55 	bl	800c0dc <pvPortMalloc>
 8009c32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	3350      	adds	r3, #80	@ 0x50
 8009c42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c4c:	79fa      	ldrb	r2, [r7, #7]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	4613      	mov	r3, r2
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f805 	bl	8009c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3720      	adds	r7, #32
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c96:	2101      	movs	r1, #1
 8009c98:	69b8      	ldr	r0, [r7, #24]
 8009c9a:	f7ff fec3 	bl	8009a24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08e      	sub	sp, #56	@ 0x38
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <xQueueGenericSend+0x34>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d103      	bne.n	8009cf2 <xQueueGenericSend+0x42>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueGenericSend+0x46>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <xQueueGenericSend+0x48>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10b      	bne.n	8009d14 <xQueueGenericSend+0x64>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d103      	bne.n	8009d22 <xQueueGenericSend+0x72>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <xQueueGenericSend+0x76>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericSend+0x78>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <xQueueGenericSend+0x94>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d44:	f001 fa7e 	bl	800b244 <xTaskGetSchedulerState>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <xQueueGenericSend+0xa4>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <xQueueGenericSend+0xa8>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <xQueueGenericSend+0xaa>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10b      	bne.n	8009d76 <xQueueGenericSend+0xc6>
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	61fb      	str	r3, [r7, #28]
}
 8009d70:	bf00      	nop
 8009d72:	bf00      	nop
 8009d74:	e7fd      	b.n	8009d72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d76:	f002 f88f 	bl	800be98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d302      	bcc.n	8009d8c <xQueueGenericSend+0xdc>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d129      	bne.n	8009de0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d92:	f000 fa91 	bl	800a2b8 <prvCopyDataToQueue>
 8009d96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d010      	beq.n	8009dc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	3324      	adds	r3, #36	@ 0x24
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 f887 	bl	800aeb8 <xTaskRemoveFromEventList>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d013      	beq.n	8009dd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009db0:	4b3f      	ldr	r3, [pc, #252]	@ (8009eb0 <xQueueGenericSend+0x200>)
 8009db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	e00a      	b.n	8009dd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d007      	beq.n	8009dd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dc8:	4b39      	ldr	r3, [pc, #228]	@ (8009eb0 <xQueueGenericSend+0x200>)
 8009dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009dd8:	f002 f890 	bl	800befc <vPortExitCritical>
				return pdPASS;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e063      	b.n	8009ea8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d103      	bne.n	8009dee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009de6:	f002 f889 	bl	800befc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	e05c      	b.n	8009ea8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009df4:	f107 0314 	add.w	r3, r7, #20
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 f8c1 	bl	800af80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e02:	f002 f87b 	bl	800befc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e06:	f000 fe29 	bl	800aa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e0a:	f002 f845 	bl	800be98 <vPortEnterCritical>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1a:	d103      	bne.n	8009e24 <xQueueGenericSend+0x174>
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e2a:	b25b      	sxtb	r3, r3
 8009e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e30:	d103      	bne.n	8009e3a <xQueueGenericSend+0x18a>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e3a:	f002 f85f 	bl	800befc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e3e:	1d3a      	adds	r2, r7, #4
 8009e40:	f107 0314 	add.w	r3, r7, #20
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 f8b0 	bl	800afac <xTaskCheckForTimeOut>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d124      	bne.n	8009e9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e54:	f000 fb28 	bl	800a4a8 <prvIsQueueFull>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d018      	beq.n	8009e90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	3310      	adds	r3, #16
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 ffd4 	bl	800ae14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e6e:	f000 fab3 	bl	800a3d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e72:	f000 fe01 	bl	800aa78 <xTaskResumeAll>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f47f af7c 	bne.w	8009d76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb0 <xQueueGenericSend+0x200>)
 8009e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	e772      	b.n	8009d76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e92:	f000 faa1 	bl	800a3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e96:	f000 fdef 	bl	800aa78 <xTaskResumeAll>
 8009e9a:	e76c      	b.n	8009d76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e9e:	f000 fa9b 	bl	800a3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ea2:	f000 fde9 	bl	800aa78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3738      	adds	r7, #56	@ 0x38
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	e000ed04 	.word	0xe000ed04

08009eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b090      	sub	sp, #64	@ 0x40
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed0:	f383 8811 	msr	BASEPRI, r3
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	e7fd      	b.n	8009ee0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <xQueueGenericSendFromISR+0x3e>
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <xQueueGenericSendFromISR+0x42>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e000      	b.n	8009ef8 <xQueueGenericSendFromISR+0x44>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10b      	bne.n	8009f14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f0e:	bf00      	nop
 8009f10:	bf00      	nop
 8009f12:	e7fd      	b.n	8009f10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d103      	bne.n	8009f22 <xQueueGenericSendFromISR+0x6e>
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <xQueueGenericSendFromISR+0x72>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <xQueueGenericSendFromISR+0x74>
 8009f26:	2300      	movs	r3, #0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10b      	bne.n	8009f44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f44:	f002 f888 	bl	800c058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f48:	f3ef 8211 	mrs	r2, BASEPRI
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	61fa      	str	r2, [r7, #28]
 8009f5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d302      	bcc.n	8009f76 <xQueueGenericSendFromISR+0xc2>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d12f      	bne.n	8009fd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f8c:	f000 f994 	bl	800a2b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f98:	d112      	bne.n	8009fc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d016      	beq.n	8009fd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa4:	3324      	adds	r3, #36	@ 0x24
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 ff86 	bl	800aeb8 <xTaskRemoveFromEventList>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00e      	beq.n	8009fd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00b      	beq.n	8009fd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e007      	b.n	8009fd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	b25a      	sxtb	r2, r3
 8009fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009fd4:	e001      	b.n	8009fda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fe4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3740      	adds	r7, #64	@ 0x40
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08c      	sub	sp, #48	@ 0x30
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <xQueueReceive+0x32>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	623b      	str	r3, [r7, #32]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <xQueueReceive+0x40>
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <xQueueReceive+0x44>
 800a030:	2301      	movs	r3, #1
 800a032:	e000      	b.n	800a036 <xQueueReceive+0x46>
 800a034:	2300      	movs	r3, #0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <xQueueReceive+0x62>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	61fb      	str	r3, [r7, #28]
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	e7fd      	b.n	800a04e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a052:	f001 f8f7 	bl	800b244 <xTaskGetSchedulerState>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d102      	bne.n	800a062 <xQueueReceive+0x72>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <xQueueReceive+0x76>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <xQueueReceive+0x78>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10b      	bne.n	800a084 <xQueueReceive+0x94>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	61bb      	str	r3, [r7, #24]
}
 800a07e:	bf00      	nop
 800a080:	bf00      	nop
 800a082:	e7fd      	b.n	800a080 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a084:	f001 ff08 	bl	800be98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01f      	beq.n	800a0d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a098:	f000 f978 	bl	800a38c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	1e5a      	subs	r2, r3, #1
 800a0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00f      	beq.n	800a0cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ae:	3310      	adds	r3, #16
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 ff01 	bl	800aeb8 <xTaskRemoveFromEventList>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0bc:	4b3c      	ldr	r3, [pc, #240]	@ (800a1b0 <xQueueReceive+0x1c0>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0cc:	f001 ff16 	bl	800befc <vPortExitCritical>
				return pdPASS;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e069      	b.n	800a1a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0da:	f001 ff0f 	bl	800befc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e062      	b.n	800a1a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d106      	bne.n	800a0f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0e8:	f107 0310 	add.w	r3, r7, #16
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 ff47 	bl	800af80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0f6:	f001 ff01 	bl	800befc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0fa:	f000 fcaf 	bl	800aa5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0fe:	f001 fecb 	bl	800be98 <vPortEnterCritical>
 800a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10e:	d103      	bne.n	800a118 <xQueueReceive+0x128>
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a11a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a124:	d103      	bne.n	800a12e <xQueueReceive+0x13e>
 800a126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a12e:	f001 fee5 	bl	800befc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a132:	1d3a      	adds	r2, r7, #4
 800a134:	f107 0310 	add.w	r3, r7, #16
 800a138:	4611      	mov	r1, r2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 ff36 	bl	800afac <xTaskCheckForTimeOut>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d123      	bne.n	800a18e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a148:	f000 f998 	bl	800a47c <prvIsQueueEmpty>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d017      	beq.n	800a182 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	3324      	adds	r3, #36	@ 0x24
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fe5a 	bl	800ae14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a162:	f000 f939 	bl	800a3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a166:	f000 fc87 	bl	800aa78 <xTaskResumeAll>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d189      	bne.n	800a084 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a170:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b0 <xQueueReceive+0x1c0>)
 800a172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	e780      	b.n	800a084 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a184:	f000 f928 	bl	800a3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a188:	f000 fc76 	bl	800aa78 <xTaskResumeAll>
 800a18c:	e77a      	b.n	800a084 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a18e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a190:	f000 f922 	bl	800a3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a194:	f000 fc70 	bl	800aa78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a19a:	f000 f96f 	bl	800a47c <prvIsQueueEmpty>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f43f af6f 	beq.w	800a084 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3730      	adds	r7, #48	@ 0x30
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08e      	sub	sp, #56	@ 0x38
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10b      	bne.n	800a1e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	623b      	str	r3, [r7, #32]
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <xQueueReceiveFromISR+0x3c>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <xQueueReceiveFromISR+0x40>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e000      	b.n	800a1f6 <xQueueReceiveFromISR+0x42>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	61fb      	str	r3, [r7, #28]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a212:	f001 ff21 	bl	800c058 <vPortValidateInterruptPriority>
	__asm volatile
 800a216:	f3ef 8211 	mrs	r2, BASEPRI
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	61ba      	str	r2, [r7, #24]
 800a22c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a22e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a230:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a236:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d02f      	beq.n	800a29e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a24c:	f000 f89e 	bl	800a38c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a252:	1e5a      	subs	r2, r3, #1
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a258:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a260:	d112      	bne.n	800a288 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d016      	beq.n	800a298 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	3310      	adds	r3, #16
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fe22 	bl	800aeb8 <xTaskRemoveFromEventList>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00e      	beq.n	800a298 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00b      	beq.n	800a298 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	e007      	b.n	800a298 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a28c:	3301      	adds	r3, #1
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	b25a      	sxtb	r2, r3
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a298:	2301      	movs	r3, #1
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a29c:	e001      	b.n	800a2a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f383 8811 	msr	BASEPRI, r3
}
 800a2ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3738      	adds	r7, #56	@ 0x38
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10d      	bne.n	800a2f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d14d      	bne.n	800a37a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 ffcc 	bl	800b280 <xTaskPriorityDisinherit>
 800a2e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	609a      	str	r2, [r3, #8]
 800a2f0:	e043      	b.n	800a37a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d119      	bne.n	800a32c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6858      	ldr	r0, [r3, #4]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a300:	461a      	mov	r2, r3
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	f002 fd34 	bl	800cd70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d32b      	bcc.n	800a37a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	e026      	b.n	800a37a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68d8      	ldr	r0, [r3, #12]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a334:	461a      	mov	r2, r3
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	f002 fd1a 	bl	800cd70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a344:	425b      	negs	r3, r3
 800a346:	441a      	add	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d207      	bcs.n	800a368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689a      	ldr	r2, [r3, #8]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a360:	425b      	negs	r3, r3
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d105      	bne.n	800a37a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	3b01      	subs	r3, #1
 800a378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a382:	697b      	ldr	r3, [r7, #20]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d018      	beq.n	800a3d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a6:	441a      	add	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d303      	bcc.n	800a3c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68d9      	ldr	r1, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6838      	ldr	r0, [r7, #0]
 800a3cc:	f002 fcd0 	bl	800cd70 <memcpy>
	}
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3e0:	f001 fd5a 	bl	800be98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3ec:	e011      	b.n	800a412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d012      	beq.n	800a41c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3324      	adds	r3, #36	@ 0x24
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fd5c 	bl	800aeb8 <xTaskRemoveFromEventList>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a406:	f000 fe35 	bl	800b074 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a416:	2b00      	cmp	r3, #0
 800a418:	dce9      	bgt.n	800a3ee <prvUnlockQueue+0x16>
 800a41a:	e000      	b.n	800a41e <prvUnlockQueue+0x46>
					break;
 800a41c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	22ff      	movs	r2, #255	@ 0xff
 800a422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a426:	f001 fd69 	bl	800befc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a42a:	f001 fd35 	bl	800be98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a436:	e011      	b.n	800a45c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d012      	beq.n	800a466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3310      	adds	r3, #16
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fd37 	bl	800aeb8 <xTaskRemoveFromEventList>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a450:	f000 fe10 	bl	800b074 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	3b01      	subs	r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a45c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a460:	2b00      	cmp	r3, #0
 800a462:	dce9      	bgt.n	800a438 <prvUnlockQueue+0x60>
 800a464:	e000      	b.n	800a468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	22ff      	movs	r2, #255	@ 0xff
 800a46c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a470:	f001 fd44 	bl	800befc <vPortExitCritical>
}
 800a474:	bf00      	nop
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a484:	f001 fd08 	bl	800be98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a490:	2301      	movs	r3, #1
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e001      	b.n	800a49a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a49a:	f001 fd2f 	bl	800befc <vPortExitCritical>

	return xReturn;
 800a49e:	68fb      	ldr	r3, [r7, #12]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4b0:	f001 fcf2 	bl	800be98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d102      	bne.n	800a4c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e001      	b.n	800a4ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4ca:	f001 fd17 	bl	800befc <vPortExitCritical>

	return xReturn;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	e014      	b.n	800a512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a528 <vQueueAddToRegistry+0x50>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10b      	bne.n	800a50c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4f4:	490c      	ldr	r1, [pc, #48]	@ (800a528 <vQueueAddToRegistry+0x50>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4fe:	4a0a      	ldr	r2, [pc, #40]	@ (800a528 <vQueueAddToRegistry+0x50>)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	00db      	lsls	r3, r3, #3
 800a504:	4413      	add	r3, r2
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a50a:	e006      	b.n	800a51a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b07      	cmp	r3, #7
 800a516:	d9e7      	bls.n	800a4e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	20000f18 	.word	0x20000f18

0800a52c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a53c:	f001 fcac 	bl	800be98 <vPortEnterCritical>
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a546:	b25b      	sxtb	r3, r3
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54c:	d103      	bne.n	800a556 <vQueueWaitForMessageRestricted+0x2a>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a55c:	b25b      	sxtb	r3, r3
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a562:	d103      	bne.n	800a56c <vQueueWaitForMessageRestricted+0x40>
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a56c:	f001 fcc6 	bl	800befc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	3324      	adds	r3, #36	@ 0x24
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	68b9      	ldr	r1, [r7, #8]
 800a580:	4618      	mov	r0, r3
 800a582:	f000 fc6d 	bl	800ae60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a586:	6978      	ldr	r0, [r7, #20]
 800a588:	f7ff ff26 	bl	800a3d8 <prvUnlockQueue>
	}
 800a58c:	bf00      	nop
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	@ 0x38
 800a598:	af04      	add	r7, sp, #16
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	623b      	str	r3, [r7, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10b      	bne.n	800a5de <xTaskCreateStatic+0x4a>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	61fb      	str	r3, [r7, #28]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5de:	23a8      	movs	r3, #168	@ 0xa8
 800a5e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2ba8      	cmp	r3, #168	@ 0xa8
 800a5e6:	d00b      	beq.n	800a600 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	61bb      	str	r3, [r7, #24]
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a600:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01e      	beq.n	800a646 <xTaskCreateStatic+0xb2>
 800a608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d01b      	beq.n	800a646 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a610:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a616:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a620:	2300      	movs	r3, #0
 800a622:	9303      	str	r3, [sp, #12]
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	9302      	str	r3, [sp, #8]
 800a628:	f107 0314 	add.w	r3, r7, #20
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 f851 	bl	800a6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a63e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a640:	f000 f8f6 	bl	800a830 <prvAddNewTaskToReadyList>
 800a644:	e001      	b.n	800a64a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a64a:	697b      	ldr	r3, [r7, #20]
	}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3728      	adds	r7, #40	@ 0x28
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08c      	sub	sp, #48	@ 0x30
 800a658:	af04      	add	r7, sp, #16
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	4613      	mov	r3, r2
 800a662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a664:	88fb      	ldrh	r3, [r7, #6]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fd37 	bl	800c0dc <pvPortMalloc>
 800a66e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00e      	beq.n	800a694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a676:	20a8      	movs	r0, #168	@ 0xa8
 800a678:	f001 fd30 	bl	800c0dc <pvPortMalloc>
 800a67c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	631a      	str	r2, [r3, #48]	@ 0x30
 800a68a:	e005      	b.n	800a698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a68c:	6978      	ldr	r0, [r7, #20]
 800a68e:	f001 fdf3 	bl	800c278 <vPortFree>
 800a692:	e001      	b.n	800a698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d017      	beq.n	800a6ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6a6:	88fa      	ldrh	r2, [r7, #6]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9303      	str	r3, [sp, #12]
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	9302      	str	r3, [sp, #8]
 800a6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b2:	9301      	str	r3, [sp, #4]
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68b9      	ldr	r1, [r7, #8]
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f80f 	bl	800a6e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6c2:	69f8      	ldr	r0, [r7, #28]
 800a6c4:	f000 f8b4 	bl	800a830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	61bb      	str	r3, [r7, #24]
 800a6cc:	e002      	b.n	800a6d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
	}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	21a5      	movs	r1, #165	@ 0xa5
 800a6fa:	f002 fa9f 	bl	800cc3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a708:	3b01      	subs	r3, #1
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	f023 0307 	bic.w	r3, r3, #7
 800a716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	617b      	str	r3, [r7, #20]
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop
 800a738:	e7fd      	b.n	800a736 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01f      	beq.n	800a780 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a740:	2300      	movs	r3, #0
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	e012      	b.n	800a76c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	4413      	add	r3, r2
 800a74c:	7819      	ldrb	r1, [r3, #0]
 800a74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	4413      	add	r3, r2
 800a754:	3334      	adds	r3, #52	@ 0x34
 800a756:	460a      	mov	r2, r1
 800a758:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d006      	beq.n	800a774 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	3301      	adds	r3, #1
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	2b0f      	cmp	r3, #15
 800a770:	d9e9      	bls.n	800a746 <prvInitialiseNewTask+0x66>
 800a772:	e000      	b.n	800a776 <prvInitialiseNewTask+0x96>
			{
				break;
 800a774:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a77e:	e003      	b.n	800a788 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	2200      	movs	r2, #0
 800a784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	2b37      	cmp	r3, #55	@ 0x37
 800a78c:	d901      	bls.n	800a792 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a78e:	2337      	movs	r3, #55	@ 0x37
 800a790:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a796:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a79c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff f8a7 	bl	80098fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff f8a2 	bl	80098fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	3354      	adds	r3, #84	@ 0x54
 800a7e2:	224c      	movs	r2, #76	@ 0x4c
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f002 fa28 	bl	800cc3c <memset>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	4a0d      	ldr	r2, [pc, #52]	@ (800a824 <prvInitialiseNewTask+0x144>)
 800a7f0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a828 <prvInitialiseNewTask+0x148>)
 800a7f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a82c <prvInitialiseNewTask+0x14c>)
 800a7fc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	69b8      	ldr	r0, [r7, #24]
 800a804:	f001 fa1a 	bl	800bc3c <pxPortInitialiseStack>
 800a808:	4602      	mov	r2, r0
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a818:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a81a:	bf00      	nop
 800a81c:	3720      	adds	r7, #32
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	2000597c 	.word	0x2000597c
 800a828:	200059e4 	.word	0x200059e4
 800a82c:	20005a4c 	.word	0x20005a4c

0800a830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a838:	f001 fb2e 	bl	800be98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a83c:	4b2d      	ldr	r3, [pc, #180]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	4a2c      	ldr	r2, [pc, #176]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a846:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a84e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a854:	4b27      	ldr	r3, [pc, #156]	@ (800a8f4 <prvAddNewTaskToReadyList+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d110      	bne.n	800a87e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a85c:	f000 fc2e 	bl	800b0bc <prvInitialiseTaskLists>
 800a860:	e00d      	b.n	800a87e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a862:	4b26      	ldr	r3, [pc, #152]	@ (800a8fc <prvAddNewTaskToReadyList+0xcc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d109      	bne.n	800a87e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a86a:	4b23      	ldr	r3, [pc, #140]	@ (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a874:	429a      	cmp	r2, r3
 800a876:	d802      	bhi.n	800a87e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a878:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a87e:	4b20      	ldr	r3, [pc, #128]	@ (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3301      	adds	r3, #1
 800a884:	4a1e      	ldr	r2, [pc, #120]	@ (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a886:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a888:	4b1d      	ldr	r3, [pc, #116]	@ (800a900 <prvAddNewTaskToReadyList+0xd0>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <prvAddNewTaskToReadyList+0xd4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d903      	bls.n	800a8a4 <prvAddNewTaskToReadyList+0x74>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	4a18      	ldr	r2, [pc, #96]	@ (800a904 <prvAddNewTaskToReadyList+0xd4>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4a15      	ldr	r2, [pc, #84]	@ (800a908 <prvAddNewTaskToReadyList+0xd8>)
 800a8b2:	441a      	add	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f7ff f82b 	bl	8009916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8c0:	f001 fb1c 	bl	800befc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a8fc <prvAddNewTaskToReadyList+0xcc>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00e      	beq.n	800a8ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <prvAddNewTaskToReadyList+0xc8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d207      	bcs.n	800a8ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <prvAddNewTaskToReadyList+0xdc>)
 800a8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000142c 	.word	0x2000142c
 800a8f8:	20000f58 	.word	0x20000f58
 800a8fc:	20001438 	.word	0x20001438
 800a900:	20001448 	.word	0x20001448
 800a904:	20001434 	.word	0x20001434
 800a908:	20000f5c 	.word	0x20000f5c
 800a90c:	e000ed04 	.word	0xe000ed04

0800a910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d018      	beq.n	800a954 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a922:	4b14      	ldr	r3, [pc, #80]	@ (800a974 <vTaskDelay+0x64>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <vTaskDelay+0x32>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	60bb      	str	r3, [r7, #8]
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	e7fd      	b.n	800a93e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a942:	f000 f88b 	bl	800aa5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a946:	2100      	movs	r1, #0
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fd09 	bl	800b360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a94e:	f000 f893 	bl	800aa78 <xTaskResumeAll>
 800a952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d107      	bne.n	800a96a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a95a:	4b07      	ldr	r3, [pc, #28]	@ (800a978 <vTaskDelay+0x68>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20001454 	.word	0x20001454
 800a978:	e000ed04 	.word	0xe000ed04

0800a97c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	@ 0x28
 800a980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a98a:	463a      	mov	r2, r7
 800a98c:	1d39      	adds	r1, r7, #4
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe ff5e 	bl	8009854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	9202      	str	r2, [sp, #8]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	460a      	mov	r2, r1
 800a9aa:	4924      	ldr	r1, [pc, #144]	@ (800aa3c <vTaskStartScheduler+0xc0>)
 800a9ac:	4824      	ldr	r0, [pc, #144]	@ (800aa40 <vTaskStartScheduler+0xc4>)
 800a9ae:	f7ff fdf1 	bl	800a594 <xTaskCreateStatic>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	4a23      	ldr	r2, [pc, #140]	@ (800aa44 <vTaskStartScheduler+0xc8>)
 800a9b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9b8:	4b22      	ldr	r3, [pc, #136]	@ (800aa44 <vTaskStartScheduler+0xc8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	e001      	b.n	800a9ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d102      	bne.n	800a9d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9d0:	f000 fd1a 	bl	800b408 <xTimerCreateTimerTask>
 800a9d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d11b      	bne.n	800aa14 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	613b      	str	r3, [r7, #16]
}
 800a9ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9f0:	4b15      	ldr	r3, [pc, #84]	@ (800aa48 <vTaskStartScheduler+0xcc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3354      	adds	r3, #84	@ 0x54
 800a9f6:	4a15      	ldr	r2, [pc, #84]	@ (800aa4c <vTaskStartScheduler+0xd0>)
 800a9f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9fa:	4b15      	ldr	r3, [pc, #84]	@ (800aa50 <vTaskStartScheduler+0xd4>)
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa02:	4b14      	ldr	r3, [pc, #80]	@ (800aa54 <vTaskStartScheduler+0xd8>)
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa08:	4b13      	ldr	r3, [pc, #76]	@ (800aa58 <vTaskStartScheduler+0xdc>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa0e:	f001 f99f 	bl	800bd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa12:	e00f      	b.n	800aa34 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10b      	bne.n	800aa34 <vTaskStartScheduler+0xb8>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60fb      	str	r3, [r7, #12]
}
 800aa2e:	bf00      	nop
 800aa30:	bf00      	nop
 800aa32:	e7fd      	b.n	800aa30 <vTaskStartScheduler+0xb4>
}
 800aa34:	bf00      	nop
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	0800ce88 	.word	0x0800ce88
 800aa40:	0800b08d 	.word	0x0800b08d
 800aa44:	20001450 	.word	0x20001450
 800aa48:	20000f58 	.word	0x20000f58
 800aa4c:	20000030 	.word	0x20000030
 800aa50:	2000144c 	.word	0x2000144c
 800aa54:	20001438 	.word	0x20001438
 800aa58:	20001430 	.word	0x20001430

0800aa5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa60:	4b04      	ldr	r3, [pc, #16]	@ (800aa74 <vTaskSuspendAll+0x18>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	4a03      	ldr	r2, [pc, #12]	@ (800aa74 <vTaskSuspendAll+0x18>)
 800aa68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa6a:	bf00      	nop
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	20001454 	.word	0x20001454

0800aa78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa86:	4b42      	ldr	r3, [pc, #264]	@ (800ab90 <xTaskResumeAll+0x118>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10b      	bne.n	800aaa6 <xTaskResumeAll+0x2e>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aaa6:	f001 f9f7 	bl	800be98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aaaa:	4b39      	ldr	r3, [pc, #228]	@ (800ab90 <xTaskResumeAll+0x118>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	4a37      	ldr	r2, [pc, #220]	@ (800ab90 <xTaskResumeAll+0x118>)
 800aab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab4:	4b36      	ldr	r3, [pc, #216]	@ (800ab90 <xTaskResumeAll+0x118>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d162      	bne.n	800ab82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aabc:	4b35      	ldr	r3, [pc, #212]	@ (800ab94 <xTaskResumeAll+0x11c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d05e      	beq.n	800ab82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aac4:	e02f      	b.n	800ab26 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac6:	4b34      	ldr	r3, [pc, #208]	@ (800ab98 <xTaskResumeAll+0x120>)
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3318      	adds	r3, #24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe ff7c 	bl	80099d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3304      	adds	r3, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe ff77 	bl	80099d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae6:	4b2d      	ldr	r3, [pc, #180]	@ (800ab9c <xTaskResumeAll+0x124>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d903      	bls.n	800aaf6 <xTaskResumeAll+0x7e>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf2:	4a2a      	ldr	r2, [pc, #168]	@ (800ab9c <xTaskResumeAll+0x124>)
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4a27      	ldr	r2, [pc, #156]	@ (800aba0 <xTaskResumeAll+0x128>)
 800ab04:	441a      	add	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f7fe ff02 	bl	8009916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab16:	4b23      	ldr	r3, [pc, #140]	@ (800aba4 <xTaskResumeAll+0x12c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d302      	bcc.n	800ab26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ab20:	4b21      	ldr	r3, [pc, #132]	@ (800aba8 <xTaskResumeAll+0x130>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab26:	4b1c      	ldr	r3, [pc, #112]	@ (800ab98 <xTaskResumeAll+0x120>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1cb      	bne.n	800aac6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab34:	f000 fb66 	bl	800b204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab38:	4b1c      	ldr	r3, [pc, #112]	@ (800abac <xTaskResumeAll+0x134>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d010      	beq.n	800ab66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab44:	f000 f846 	bl	800abd4 <xTaskIncrementTick>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ab4e:	4b16      	ldr	r3, [pc, #88]	@ (800aba8 <xTaskResumeAll+0x130>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1f1      	bne.n	800ab44 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ab60:	4b12      	ldr	r3, [pc, #72]	@ (800abac <xTaskResumeAll+0x134>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab66:	4b10      	ldr	r3, [pc, #64]	@ (800aba8 <xTaskResumeAll+0x130>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d009      	beq.n	800ab82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab72:	4b0f      	ldr	r3, [pc, #60]	@ (800abb0 <xTaskResumeAll+0x138>)
 800ab74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab82:	f001 f9bb 	bl	800befc <vPortExitCritical>

	return xAlreadyYielded;
 800ab86:	68bb      	ldr	r3, [r7, #8]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20001454 	.word	0x20001454
 800ab94:	2000142c 	.word	0x2000142c
 800ab98:	200013ec 	.word	0x200013ec
 800ab9c:	20001434 	.word	0x20001434
 800aba0:	20000f5c 	.word	0x20000f5c
 800aba4:	20000f58 	.word	0x20000f58
 800aba8:	20001440 	.word	0x20001440
 800abac:	2000143c 	.word	0x2000143c
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abba:	4b05      	ldr	r3, [pc, #20]	@ (800abd0 <xTaskGetTickCount+0x1c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abc0:	687b      	ldr	r3, [r7, #4]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	20001430 	.word	0x20001430

0800abd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abde:	4b4f      	ldr	r3, [pc, #316]	@ (800ad1c <xTaskIncrementTick+0x148>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f040 8090 	bne.w	800ad08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abe8:	4b4d      	ldr	r3, [pc, #308]	@ (800ad20 <xTaskIncrementTick+0x14c>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abf0:	4a4b      	ldr	r2, [pc, #300]	@ (800ad20 <xTaskIncrementTick+0x14c>)
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d121      	bne.n	800ac40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800abfc:	4b49      	ldr	r3, [pc, #292]	@ (800ad24 <xTaskIncrementTick+0x150>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00b      	beq.n	800ac1e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	603b      	str	r3, [r7, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <xTaskIncrementTick+0x46>
 800ac1e:	4b41      	ldr	r3, [pc, #260]	@ (800ad24 <xTaskIncrementTick+0x150>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	4b40      	ldr	r3, [pc, #256]	@ (800ad28 <xTaskIncrementTick+0x154>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a3e      	ldr	r2, [pc, #248]	@ (800ad24 <xTaskIncrementTick+0x150>)
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	4a3e      	ldr	r2, [pc, #248]	@ (800ad28 <xTaskIncrementTick+0x154>)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	4b3e      	ldr	r3, [pc, #248]	@ (800ad2c <xTaskIncrementTick+0x158>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3301      	adds	r3, #1
 800ac38:	4a3c      	ldr	r2, [pc, #240]	@ (800ad2c <xTaskIncrementTick+0x158>)
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	f000 fae2 	bl	800b204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac40:	4b3b      	ldr	r3, [pc, #236]	@ (800ad30 <xTaskIncrementTick+0x15c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d349      	bcc.n	800acde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac4a:	4b36      	ldr	r3, [pc, #216]	@ (800ad24 <xTaskIncrementTick+0x150>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d104      	bne.n	800ac5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac54:	4b36      	ldr	r3, [pc, #216]	@ (800ad30 <xTaskIncrementTick+0x15c>)
 800ac56:	f04f 32ff 	mov.w	r2, #4294967295
 800ac5a:	601a      	str	r2, [r3, #0]
					break;
 800ac5c:	e03f      	b.n	800acde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac5e:	4b31      	ldr	r3, [pc, #196]	@ (800ad24 <xTaskIncrementTick+0x150>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d203      	bcs.n	800ac7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac76:	4a2e      	ldr	r2, [pc, #184]	@ (800ad30 <xTaskIncrementTick+0x15c>)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac7c:	e02f      	b.n	800acde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	3304      	adds	r3, #4
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fea4 	bl	80099d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3318      	adds	r3, #24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe fe9b 	bl	80099d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac9e:	4b25      	ldr	r3, [pc, #148]	@ (800ad34 <xTaskIncrementTick+0x160>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d903      	bls.n	800acae <xTaskIncrementTick+0xda>
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acaa:	4a22      	ldr	r2, [pc, #136]	@ (800ad34 <xTaskIncrementTick+0x160>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb2:	4613      	mov	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4a1f      	ldr	r2, [pc, #124]	@ (800ad38 <xTaskIncrementTick+0x164>)
 800acbc:	441a      	add	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4619      	mov	r1, r3
 800acc4:	4610      	mov	r0, r2
 800acc6:	f7fe fe26 	bl	8009916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acce:	4b1b      	ldr	r3, [pc, #108]	@ (800ad3c <xTaskIncrementTick+0x168>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d3b8      	bcc.n	800ac4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acdc:	e7b5      	b.n	800ac4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acde:	4b17      	ldr	r3, [pc, #92]	@ (800ad3c <xTaskIncrementTick+0x168>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace4:	4914      	ldr	r1, [pc, #80]	@ (800ad38 <xTaskIncrementTick+0x164>)
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	440b      	add	r3, r1
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d901      	bls.n	800acfa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800acf6:	2301      	movs	r3, #1
 800acf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acfa:	4b11      	ldr	r3, [pc, #68]	@ (800ad40 <xTaskIncrementTick+0x16c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d007      	beq.n	800ad12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ad02:	2301      	movs	r3, #1
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	e004      	b.n	800ad12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad08:	4b0e      	ldr	r3, [pc, #56]	@ (800ad44 <xTaskIncrementTick+0x170>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	4a0d      	ldr	r2, [pc, #52]	@ (800ad44 <xTaskIncrementTick+0x170>)
 800ad10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad12:	697b      	ldr	r3, [r7, #20]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	20001454 	.word	0x20001454
 800ad20:	20001430 	.word	0x20001430
 800ad24:	200013e4 	.word	0x200013e4
 800ad28:	200013e8 	.word	0x200013e8
 800ad2c:	20001444 	.word	0x20001444
 800ad30:	2000144c 	.word	0x2000144c
 800ad34:	20001434 	.word	0x20001434
 800ad38:	20000f5c 	.word	0x20000f5c
 800ad3c:	20000f58 	.word	0x20000f58
 800ad40:	20001440 	.word	0x20001440
 800ad44:	2000143c 	.word	0x2000143c

0800ad48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad4e:	4b2b      	ldr	r3, [pc, #172]	@ (800adfc <vTaskSwitchContext+0xb4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad56:	4b2a      	ldr	r3, [pc, #168]	@ (800ae00 <vTaskSwitchContext+0xb8>)
 800ad58:	2201      	movs	r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad5c:	e047      	b.n	800adee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ad5e:	4b28      	ldr	r3, [pc, #160]	@ (800ae00 <vTaskSwitchContext+0xb8>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad64:	4b27      	ldr	r3, [pc, #156]	@ (800ae04 <vTaskSwitchContext+0xbc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e011      	b.n	800ad90 <vTaskSwitchContext+0x48>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10b      	bne.n	800ad8a <vTaskSwitchContext+0x42>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	607b      	str	r3, [r7, #4]
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
 800ad88:	e7fd      	b.n	800ad86 <vTaskSwitchContext+0x3e>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	491d      	ldr	r1, [pc, #116]	@ (800ae08 <vTaskSwitchContext+0xc0>)
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0e3      	beq.n	800ad6c <vTaskSwitchContext+0x24>
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <vTaskSwitchContext+0xc0>)
 800adb0:	4413      	add	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	3308      	adds	r3, #8
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d104      	bne.n	800add4 <vTaskSwitchContext+0x8c>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	605a      	str	r2, [r3, #4]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	4a0c      	ldr	r2, [pc, #48]	@ (800ae0c <vTaskSwitchContext+0xc4>)
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	4a09      	ldr	r2, [pc, #36]	@ (800ae04 <vTaskSwitchContext+0xbc>)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ade4:	4b09      	ldr	r3, [pc, #36]	@ (800ae0c <vTaskSwitchContext+0xc4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3354      	adds	r3, #84	@ 0x54
 800adea:	4a09      	ldr	r2, [pc, #36]	@ (800ae10 <vTaskSwitchContext+0xc8>)
 800adec:	6013      	str	r3, [r2, #0]
}
 800adee:	bf00      	nop
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20001454 	.word	0x20001454
 800ae00:	20001440 	.word	0x20001440
 800ae04:	20001434 	.word	0x20001434
 800ae08:	20000f5c 	.word	0x20000f5c
 800ae0c:	20000f58 	.word	0x20000f58
 800ae10:	20000030 	.word	0x20000030

0800ae14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10b      	bne.n	800ae3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	60fb      	str	r3, [r7, #12]
}
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	e7fd      	b.n	800ae38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae3c:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <vTaskPlaceOnEventList+0x48>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3318      	adds	r3, #24
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7fe fd8a 	bl	800995e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	6838      	ldr	r0, [r7, #0]
 800ae4e:	f000 fa87 	bl	800b360 <prvAddCurrentTaskToDelayedList>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000f58 	.word	0x20000f58

0800ae60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10b      	bne.n	800ae8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	617b      	str	r3, [r7, #20]
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	e7fd      	b.n	800ae86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb4 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3318      	adds	r3, #24
 800ae90:	4619      	mov	r1, r3
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7fe fd3f 	bl	8009916 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f000 fa5a 	bl	800b360 <prvAddCurrentTaskToDelayedList>
	}
 800aeac:	bf00      	nop
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	20000f58 	.word	0x20000f58

0800aeb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10b      	bne.n	800aee6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	60fb      	str	r3, [r7, #12]
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	e7fd      	b.n	800aee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3318      	adds	r3, #24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fd70 	bl	80099d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef0:	4b1d      	ldr	r3, [pc, #116]	@ (800af68 <xTaskRemoveFromEventList+0xb0>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11d      	bne.n	800af34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fd67 	bl	80099d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af06:	4b19      	ldr	r3, [pc, #100]	@ (800af6c <xTaskRemoveFromEventList+0xb4>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d903      	bls.n	800af16 <xTaskRemoveFromEventList+0x5e>
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af12:	4a16      	ldr	r2, [pc, #88]	@ (800af6c <xTaskRemoveFromEventList+0xb4>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4a13      	ldr	r2, [pc, #76]	@ (800af70 <xTaskRemoveFromEventList+0xb8>)
 800af24:	441a      	add	r2, r3
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3304      	adds	r3, #4
 800af2a:	4619      	mov	r1, r3
 800af2c:	4610      	mov	r0, r2
 800af2e:	f7fe fcf2 	bl	8009916 <vListInsertEnd>
 800af32:	e005      	b.n	800af40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3318      	adds	r3, #24
 800af38:	4619      	mov	r1, r3
 800af3a:	480e      	ldr	r0, [pc, #56]	@ (800af74 <xTaskRemoveFromEventList+0xbc>)
 800af3c:	f7fe fceb 	bl	8009916 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af44:	4b0c      	ldr	r3, [pc, #48]	@ (800af78 <xTaskRemoveFromEventList+0xc0>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d905      	bls.n	800af5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af4e:	2301      	movs	r3, #1
 800af50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af52:	4b0a      	ldr	r3, [pc, #40]	@ (800af7c <xTaskRemoveFromEventList+0xc4>)
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	e001      	b.n	800af5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af5e:	697b      	ldr	r3, [r7, #20]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20001454 	.word	0x20001454
 800af6c:	20001434 	.word	0x20001434
 800af70:	20000f5c 	.word	0x20000f5c
 800af74:	200013ec 	.word	0x200013ec
 800af78:	20000f58 	.word	0x20000f58
 800af7c:	20001440 	.word	0x20001440

0800af80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af88:	4b06      	ldr	r3, [pc, #24]	@ (800afa4 <vTaskInternalSetTimeOutState+0x24>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <vTaskInternalSetTimeOutState+0x28>)
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	605a      	str	r2, [r3, #4]
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	20001444 	.word	0x20001444
 800afa8:	20001430 	.word	0x20001430

0800afac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	613b      	str	r3, [r7, #16]
}
 800afce:	bf00      	nop
 800afd0:	bf00      	nop
 800afd2:	e7fd      	b.n	800afd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10b      	bne.n	800aff2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	60fb      	str	r3, [r7, #12]
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	e7fd      	b.n	800afee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aff2:	f000 ff51 	bl	800be98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aff6:	4b1d      	ldr	r3, [pc, #116]	@ (800b06c <xTaskCheckForTimeOut+0xc0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d102      	bne.n	800b016 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b010:	2300      	movs	r3, #0
 800b012:	61fb      	str	r3, [r7, #28]
 800b014:	e023      	b.n	800b05e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <xTaskCheckForTimeOut+0xc4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d007      	beq.n	800b032 <xTaskCheckForTimeOut+0x86>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	61fb      	str	r3, [r7, #28]
 800b030:	e015      	b.n	800b05e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d20b      	bcs.n	800b054 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff ff99 	bl	800af80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	61fb      	str	r3, [r7, #28]
 800b052:	e004      	b.n	800b05e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b05a:	2301      	movs	r3, #1
 800b05c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b05e:	f000 ff4d 	bl	800befc <vPortExitCritical>

	return xReturn;
 800b062:	69fb      	ldr	r3, [r7, #28]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3720      	adds	r7, #32
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	20001430 	.word	0x20001430
 800b070:	20001444 	.word	0x20001444

0800b074 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b078:	4b03      	ldr	r3, [pc, #12]	@ (800b088 <vTaskMissedYield+0x14>)
 800b07a:	2201      	movs	r2, #1
 800b07c:	601a      	str	r2, [r3, #0]
}
 800b07e:	bf00      	nop
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	20001440 	.word	0x20001440

0800b08c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b094:	f000 f852 	bl	800b13c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b098:	4b06      	ldr	r3, [pc, #24]	@ (800b0b4 <prvIdleTask+0x28>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d9f9      	bls.n	800b094 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b0a0:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <prvIdleTask+0x2c>)
 800b0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b0b0:	e7f0      	b.n	800b094 <prvIdleTask+0x8>
 800b0b2:	bf00      	nop
 800b0b4:	20000f5c 	.word	0x20000f5c
 800b0b8:	e000ed04 	.word	0xe000ed04

0800b0bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
 800b0c6:	e00c      	b.n	800b0e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4a12      	ldr	r2, [pc, #72]	@ (800b11c <prvInitialiseTaskLists+0x60>)
 800b0d4:	4413      	add	r3, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7fe fbf0 	bl	80098bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	607b      	str	r3, [r7, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b37      	cmp	r3, #55	@ 0x37
 800b0e6:	d9ef      	bls.n	800b0c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0e8:	480d      	ldr	r0, [pc, #52]	@ (800b120 <prvInitialiseTaskLists+0x64>)
 800b0ea:	f7fe fbe7 	bl	80098bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0ee:	480d      	ldr	r0, [pc, #52]	@ (800b124 <prvInitialiseTaskLists+0x68>)
 800b0f0:	f7fe fbe4 	bl	80098bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0f4:	480c      	ldr	r0, [pc, #48]	@ (800b128 <prvInitialiseTaskLists+0x6c>)
 800b0f6:	f7fe fbe1 	bl	80098bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0fa:	480c      	ldr	r0, [pc, #48]	@ (800b12c <prvInitialiseTaskLists+0x70>)
 800b0fc:	f7fe fbde 	bl	80098bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b100:	480b      	ldr	r0, [pc, #44]	@ (800b130 <prvInitialiseTaskLists+0x74>)
 800b102:	f7fe fbdb 	bl	80098bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b106:	4b0b      	ldr	r3, [pc, #44]	@ (800b134 <prvInitialiseTaskLists+0x78>)
 800b108:	4a05      	ldr	r2, [pc, #20]	@ (800b120 <prvInitialiseTaskLists+0x64>)
 800b10a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b10c:	4b0a      	ldr	r3, [pc, #40]	@ (800b138 <prvInitialiseTaskLists+0x7c>)
 800b10e:	4a05      	ldr	r2, [pc, #20]	@ (800b124 <prvInitialiseTaskLists+0x68>)
 800b110:	601a      	str	r2, [r3, #0]
}
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20000f5c 	.word	0x20000f5c
 800b120:	200013bc 	.word	0x200013bc
 800b124:	200013d0 	.word	0x200013d0
 800b128:	200013ec 	.word	0x200013ec
 800b12c:	20001400 	.word	0x20001400
 800b130:	20001418 	.word	0x20001418
 800b134:	200013e4 	.word	0x200013e4
 800b138:	200013e8 	.word	0x200013e8

0800b13c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b142:	e019      	b.n	800b178 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b144:	f000 fea8 	bl	800be98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b148:	4b10      	ldr	r3, [pc, #64]	@ (800b18c <prvCheckTasksWaitingTermination+0x50>)
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3304      	adds	r3, #4
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe fc3b 	bl	80099d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <prvCheckTasksWaitingTermination+0x54>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3b01      	subs	r3, #1
 800b160:	4a0b      	ldr	r2, [pc, #44]	@ (800b190 <prvCheckTasksWaitingTermination+0x54>)
 800b162:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b164:	4b0b      	ldr	r3, [pc, #44]	@ (800b194 <prvCheckTasksWaitingTermination+0x58>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3b01      	subs	r3, #1
 800b16a:	4a0a      	ldr	r2, [pc, #40]	@ (800b194 <prvCheckTasksWaitingTermination+0x58>)
 800b16c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b16e:	f000 fec5 	bl	800befc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f810 	bl	800b198 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b178:	4b06      	ldr	r3, [pc, #24]	@ (800b194 <prvCheckTasksWaitingTermination+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e1      	bne.n	800b144 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b180:	bf00      	nop
 800b182:	bf00      	nop
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20001400 	.word	0x20001400
 800b190:	2000142c 	.word	0x2000142c
 800b194:	20001414 	.word	0x20001414

0800b198 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3354      	adds	r3, #84	@ 0x54
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 fd51 	bl	800cc4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 f85d 	bl	800c278 <vPortFree>
				vPortFree( pxTCB );
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 f85a 	bl	800c278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1c4:	e019      	b.n	800b1fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d103      	bne.n	800b1d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 f851 	bl	800c278 <vPortFree>
	}
 800b1d6:	e010      	b.n	800b1fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d00b      	beq.n	800b1fa <prvDeleteTCB+0x62>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	60fb      	str	r3, [r7, #12]
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	e7fd      	b.n	800b1f6 <prvDeleteTCB+0x5e>
	}
 800b1fa:	bf00      	nop
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b20a:	4b0c      	ldr	r3, [pc, #48]	@ (800b23c <prvResetNextTaskUnblockTime+0x38>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d104      	bne.n	800b21e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b214:	4b0a      	ldr	r3, [pc, #40]	@ (800b240 <prvResetNextTaskUnblockTime+0x3c>)
 800b216:	f04f 32ff 	mov.w	r2, #4294967295
 800b21a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b21c:	e008      	b.n	800b230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21e:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <prvResetNextTaskUnblockTime+0x38>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4a04      	ldr	r2, [pc, #16]	@ (800b240 <prvResetNextTaskUnblockTime+0x3c>)
 800b22e:	6013      	str	r3, [r2, #0]
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200013e4 	.word	0x200013e4
 800b240:	2000144c 	.word	0x2000144c

0800b244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b24a:	4b0b      	ldr	r3, [pc, #44]	@ (800b278 <xTaskGetSchedulerState+0x34>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b252:	2301      	movs	r3, #1
 800b254:	607b      	str	r3, [r7, #4]
 800b256:	e008      	b.n	800b26a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b258:	4b08      	ldr	r3, [pc, #32]	@ (800b27c <xTaskGetSchedulerState+0x38>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b260:	2302      	movs	r3, #2
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	e001      	b.n	800b26a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b26a:	687b      	ldr	r3, [r7, #4]
	}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	20001438 	.word	0x20001438
 800b27c:	20001454 	.word	0x20001454

0800b280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b28c:	2300      	movs	r3, #0
 800b28e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d058      	beq.n	800b348 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b296:	4b2f      	ldr	r3, [pc, #188]	@ (800b354 <xTaskPriorityDisinherit+0xd4>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d00b      	beq.n	800b2b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
}
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10b      	bne.n	800b2d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	60bb      	str	r3, [r7, #8]
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	e7fd      	b.n	800b2d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2dc:	1e5a      	subs	r2, r3, #1
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d02c      	beq.n	800b348 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d128      	bne.n	800b348 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	3304      	adds	r3, #4
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fb68 	bl	80099d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b318:	4b0f      	ldr	r3, [pc, #60]	@ (800b358 <xTaskPriorityDisinherit+0xd8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d903      	bls.n	800b328 <xTaskPriorityDisinherit+0xa8>
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b324:	4a0c      	ldr	r2, [pc, #48]	@ (800b358 <xTaskPriorityDisinherit+0xd8>)
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32c:	4613      	mov	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4a09      	ldr	r2, [pc, #36]	@ (800b35c <xTaskPriorityDisinherit+0xdc>)
 800b336:	441a      	add	r2, r3
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	3304      	adds	r3, #4
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f7fe fae9 	bl	8009916 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b344:	2301      	movs	r3, #1
 800b346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b348:	697b      	ldr	r3, [r7, #20]
	}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	20000f58 	.word	0x20000f58
 800b358:	20001434 	.word	0x20001434
 800b35c:	20000f5c 	.word	0x20000f5c

0800b360 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b36a:	4b21      	ldr	r3, [pc, #132]	@ (800b3f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b370:	4b20      	ldr	r3, [pc, #128]	@ (800b3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3304      	adds	r3, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fb2a 	bl	80099d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b382:	d10a      	bne.n	800b39a <prvAddCurrentTaskToDelayedList+0x3a>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d007      	beq.n	800b39a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b38a:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3304      	adds	r3, #4
 800b390:	4619      	mov	r1, r3
 800b392:	4819      	ldr	r0, [pc, #100]	@ (800b3f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b394:	f7fe fabf 	bl	8009916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b398:	e026      	b.n	800b3e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4413      	add	r3, r2
 800b3a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3a2:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d209      	bcs.n	800b3c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3b2:	4b12      	ldr	r3, [pc, #72]	@ (800b3fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fe facd 	bl	800995e <vListInsert>
}
 800b3c4:	e010      	b.n	800b3e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b400 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	f7fe fac3 	bl	800995e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d202      	bcs.n	800b3e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3e2:	4a08      	ldr	r2, [pc, #32]	@ (800b404 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6013      	str	r3, [r2, #0]
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20001430 	.word	0x20001430
 800b3f4:	20000f58 	.word	0x20000f58
 800b3f8:	20001418 	.word	0x20001418
 800b3fc:	200013e8 	.word	0x200013e8
 800b400:	200013e4 	.word	0x200013e4
 800b404:	2000144c 	.word	0x2000144c

0800b408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	@ 0x28
 800b40c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b412:	f000 fbb1 	bl	800bb78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b416:	4b1d      	ldr	r3, [pc, #116]	@ (800b48c <xTimerCreateTimerTask+0x84>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d021      	beq.n	800b462 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b426:	1d3a      	adds	r2, r7, #4
 800b428:	f107 0108 	add.w	r1, r7, #8
 800b42c:	f107 030c 	add.w	r3, r7, #12
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fa29 	bl	8009888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	9202      	str	r2, [sp, #8]
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	2302      	movs	r3, #2
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	2300      	movs	r3, #0
 800b446:	460a      	mov	r2, r1
 800b448:	4911      	ldr	r1, [pc, #68]	@ (800b490 <xTimerCreateTimerTask+0x88>)
 800b44a:	4812      	ldr	r0, [pc, #72]	@ (800b494 <xTimerCreateTimerTask+0x8c>)
 800b44c:	f7ff f8a2 	bl	800a594 <xTaskCreateStatic>
 800b450:	4603      	mov	r3, r0
 800b452:	4a11      	ldr	r2, [pc, #68]	@ (800b498 <xTimerCreateTimerTask+0x90>)
 800b454:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b456:	4b10      	ldr	r3, [pc, #64]	@ (800b498 <xTimerCreateTimerTask+0x90>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b45e:	2301      	movs	r3, #1
 800b460:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10b      	bne.n	800b480 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	613b      	str	r3, [r7, #16]
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	e7fd      	b.n	800b47c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b480:	697b      	ldr	r3, [r7, #20]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20001488 	.word	0x20001488
 800b490:	0800ce90 	.word	0x0800ce90
 800b494:	0800b711 	.word	0x0800b711
 800b498:	2000148c 	.word	0x2000148c

0800b49c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b4aa:	202c      	movs	r0, #44	@ 0x2c
 800b4ac:	f000 fe16 	bl	800c0dc <pvPortMalloc>
 800b4b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00d      	beq.n	800b4d4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f845 	bl	800b55e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b4d4:	697b      	ldr	r3, [r7, #20]
	}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b08a      	sub	sp, #40	@ 0x28
 800b4e2:	af02      	add	r7, sp, #8
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b4ec:	232c      	movs	r3, #44	@ 0x2c
 800b4ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	2b2c      	cmp	r3, #44	@ 0x2c
 800b4f4:	d00b      	beq.n	800b50e <xTimerCreateStatic+0x30>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	61bb      	str	r3, [r7, #24]
}
 800b508:	bf00      	nop
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b50e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10b      	bne.n	800b52e <xTimerCreateStatic+0x50>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	617b      	str	r3, [r7, #20]
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	e7fd      	b.n	800b52a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b530:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00d      	beq.n	800b554 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2202      	movs	r2, #2
 800b53c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 f805 	bl	800b55e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b554:	69fb      	ldr	r3, [r7, #28]
	}
 800b556:	4618      	mov	r0, r3
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b086      	sub	sp, #24
 800b562:	af00      	add	r7, sp, #0
 800b564:	60f8      	str	r0, [r7, #12]
 800b566:	60b9      	str	r1, [r7, #8]
 800b568:	607a      	str	r2, [r7, #4]
 800b56a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	617b      	str	r3, [r7, #20]
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	e7fd      	b.n	800b586 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d01e      	beq.n	800b5ce <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b590:	f000 faf2 	bl	800bb78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	6a3a      	ldr	r2, [r7, #32]
 800b5aa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe f9a3 	bl	80098fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5c2:	f043 0304 	orr.w	r3, r3, #4
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b5ce:	bf00      	nop
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	@ 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10b      	bne.n	800b608 <xTimerGenericCommand+0x30>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	623b      	str	r3, [r7, #32]
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	e7fd      	b.n	800b604 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b608:	4b19      	ldr	r3, [pc, #100]	@ (800b670 <xTimerGenericCommand+0x98>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d02a      	beq.n	800b666 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b05      	cmp	r3, #5
 800b620:	dc18      	bgt.n	800b654 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b622:	f7ff fe0f 	bl	800b244 <xTaskGetSchedulerState>
 800b626:	4603      	mov	r3, r0
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d109      	bne.n	800b640 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b62c:	4b10      	ldr	r3, [pc, #64]	@ (800b670 <xTimerGenericCommand+0x98>)
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	f107 0110 	add.w	r1, r7, #16
 800b634:	2300      	movs	r3, #0
 800b636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b638:	f7fe fb3a 	bl	8009cb0 <xQueueGenericSend>
 800b63c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b63e:	e012      	b.n	800b666 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b640:	4b0b      	ldr	r3, [pc, #44]	@ (800b670 <xTimerGenericCommand+0x98>)
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	f107 0110 	add.w	r1, r7, #16
 800b648:	2300      	movs	r3, #0
 800b64a:	2200      	movs	r2, #0
 800b64c:	f7fe fb30 	bl	8009cb0 <xQueueGenericSend>
 800b650:	6278      	str	r0, [r7, #36]	@ 0x24
 800b652:	e008      	b.n	800b666 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b654:	4b06      	ldr	r3, [pc, #24]	@ (800b670 <xTimerGenericCommand+0x98>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	f107 0110 	add.w	r1, r7, #16
 800b65c:	2300      	movs	r3, #0
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	f7fe fc28 	bl	8009eb4 <xQueueGenericSendFromISR>
 800b664:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3728      	adds	r7, #40	@ 0x28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20001488 	.word	0x20001488

0800b674 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af02      	add	r7, sp, #8
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b67e:	4b23      	ldr	r3, [pc, #140]	@ (800b70c <prvProcessExpiredTimer+0x98>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe f99f 	bl	80099d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b698:	f003 0304 	and.w	r3, r3, #4
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d023      	beq.n	800b6e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	18d1      	adds	r1, r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	6978      	ldr	r0, [r7, #20]
 800b6ae:	f000 f8d5 	bl	800b85c <prvInsertTimerInActiveList>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d020      	beq.n	800b6fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	2300      	movs	r3, #0
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	6978      	ldr	r0, [r7, #20]
 800b6c4:	f7ff ff88 	bl	800b5d8 <xTimerGenericCommand>
 800b6c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d114      	bne.n	800b6fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	bf00      	nop
 800b6e6:	e7fd      	b.n	800b6e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6ee:	f023 0301 	bic.w	r3, r3, #1
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	6978      	ldr	r0, [r7, #20]
 800b700:	4798      	blx	r3
}
 800b702:	bf00      	nop
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20001480 	.word	0x20001480

0800b710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f859 	bl	800b7d4 <prvGetNextExpireTime>
 800b722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4619      	mov	r1, r3
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 f805 	bl	800b738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b72e:	f000 f8d7 	bl	800b8e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b732:	bf00      	nop
 800b734:	e7f0      	b.n	800b718 <prvTimerTask+0x8>
	...

0800b738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b742:	f7ff f98b 	bl	800aa5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f866 	bl	800b81c <prvSampleTimeNow>
 800b750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d130      	bne.n	800b7ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <prvProcessTimerOrBlockTask+0x3c>
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	429a      	cmp	r2, r3
 800b764:	d806      	bhi.n	800b774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b766:	f7ff f987 	bl	800aa78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff81 	bl	800b674 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b772:	e024      	b.n	800b7be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d008      	beq.n	800b78c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b77a:	4b13      	ldr	r3, [pc, #76]	@ (800b7c8 <prvProcessTimerOrBlockTask+0x90>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <prvProcessTimerOrBlockTask+0x50>
 800b784:	2301      	movs	r3, #1
 800b786:	e000      	b.n	800b78a <prvProcessTimerOrBlockTask+0x52>
 800b788:	2300      	movs	r3, #0
 800b78a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b78c:	4b0f      	ldr	r3, [pc, #60]	@ (800b7cc <prvProcessTimerOrBlockTask+0x94>)
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4619      	mov	r1, r3
 800b79a:	f7fe fec7 	bl	800a52c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b79e:	f7ff f96b 	bl	800aa78 <xTaskResumeAll>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10a      	bne.n	800b7be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7a8:	4b09      	ldr	r3, [pc, #36]	@ (800b7d0 <prvProcessTimerOrBlockTask+0x98>)
 800b7aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	f3bf 8f6f 	isb	sy
}
 800b7b8:	e001      	b.n	800b7be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7ba:	f7ff f95d 	bl	800aa78 <xTaskResumeAll>
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20001484 	.word	0x20001484
 800b7cc:	20001488 	.word	0x20001488
 800b7d0:	e000ed04 	.word	0xe000ed04

0800b7d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b818 <prvGetNextExpireTime+0x44>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <prvGetNextExpireTime+0x16>
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	e000      	b.n	800b7ec <prvGetNextExpireTime+0x18>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d105      	bne.n	800b804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7f8:	4b07      	ldr	r3, [pc, #28]	@ (800b818 <prvGetNextExpireTime+0x44>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e001      	b.n	800b808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b808:	68fb      	ldr	r3, [r7, #12]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	20001480 	.word	0x20001480

0800b81c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b824:	f7ff f9c6 	bl	800abb4 <xTaskGetTickCount>
 800b828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b82a:	4b0b      	ldr	r3, [pc, #44]	@ (800b858 <prvSampleTimeNow+0x3c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	429a      	cmp	r2, r3
 800b832:	d205      	bcs.n	800b840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b834:	f000 f93a 	bl	800baac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e002      	b.n	800b846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b846:	4a04      	ldr	r2, [pc, #16]	@ (800b858 <prvSampleTimeNow+0x3c>)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b84c:	68fb      	ldr	r3, [r7, #12]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20001490 	.word	0x20001490

0800b85c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d812      	bhi.n	800b8a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	1ad2      	subs	r2, r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d302      	bcc.n	800b896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e01b      	b.n	800b8ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b896:	4b10      	ldr	r3, [pc, #64]	@ (800b8d8 <prvInsertTimerInActiveList+0x7c>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	3304      	adds	r3, #4
 800b89e:	4619      	mov	r1, r3
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	f7fe f85c 	bl	800995e <vListInsert>
 800b8a6:	e012      	b.n	800b8ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d206      	bcs.n	800b8be <prvInsertTimerInActiveList+0x62>
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d302      	bcc.n	800b8be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	617b      	str	r3, [r7, #20]
 800b8bc:	e007      	b.n	800b8ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8be:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <prvInsertTimerInActiveList+0x80>)
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4610      	mov	r0, r2
 800b8ca:	f7fe f848 	bl	800995e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8ce:	697b      	ldr	r3, [r7, #20]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	20001484 	.word	0x20001484
 800b8dc:	20001480 	.word	0x20001480

0800b8e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08e      	sub	sp, #56	@ 0x38
 800b8e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8e6:	e0ce      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	da19      	bge.n	800b922 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8ee:	1d3b      	adds	r3, r7, #4
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	61fb      	str	r3, [r7, #28]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b918:	6850      	ldr	r0, [r2, #4]
 800b91a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b91c:	6892      	ldr	r2, [r2, #8]
 800b91e:	4611      	mov	r1, r2
 800b920:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f2c0 80ae 	blt.w	800ba86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b938:	3304      	adds	r3, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe f848 	bl	80099d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b940:	463b      	mov	r3, r7
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff ff6a 	bl	800b81c <prvSampleTimeNow>
 800b948:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	f200 8097 	bhi.w	800ba80 <prvProcessReceivedCommands+0x1a0>
 800b952:	a201      	add	r2, pc, #4	@ (adr r2, 800b958 <prvProcessReceivedCommands+0x78>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b981 	.word	0x0800b981
 800b95c:	0800b981 	.word	0x0800b981
 800b960:	0800b981 	.word	0x0800b981
 800b964:	0800b9f7 	.word	0x0800b9f7
 800b968:	0800ba0b 	.word	0x0800ba0b
 800b96c:	0800ba57 	.word	0x0800ba57
 800b970:	0800b981 	.word	0x0800b981
 800b974:	0800b981 	.word	0x0800b981
 800b978:	0800b9f7 	.word	0x0800b9f7
 800b97c:	0800ba0b 	.word	0x0800ba0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	18d1      	adds	r1, r2, r3
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9a0:	f7ff ff5c 	bl	800b85c <prvInsertTimerInActiveList>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d06c      	beq.n	800ba84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d061      	beq.n	800ba84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	441a      	add	r2, r3
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9d2:	f7ff fe01 	bl	800b5d8 <xTimerGenericCommand>
 800b9d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d152      	bne.n	800ba84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	61bb      	str	r3, [r7, #24]
}
 800b9f0:	bf00      	nop
 800b9f2:	bf00      	nop
 800b9f4:	e7fd      	b.n	800b9f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9fc:	f023 0301 	bic.w	r3, r3, #1
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba08:	e03d      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba10:	f043 0301 	orr.w	r3, r3, #1
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10b      	bne.n	800ba42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	617b      	str	r3, [r7, #20]
}
 800ba3c:	bf00      	nop
 800ba3e:	bf00      	nop
 800ba40:	e7fd      	b.n	800ba3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba44:	699a      	ldr	r2, [r3, #24]
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	18d1      	adds	r1, r2, r3
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba50:	f7ff ff04 	bl	800b85c <prvInsertTimerInActiveList>
					break;
 800ba54:	e017      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba5c:	f003 0302 	and.w	r3, r3, #2
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d103      	bne.n	800ba6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ba64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba66:	f000 fc07 	bl	800c278 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba6a:	e00c      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba72:	f023 0301 	bic.w	r3, r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba7e:	e002      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ba80:	bf00      	nop
 800ba82:	e000      	b.n	800ba86 <prvProcessReceivedCommands+0x1a6>
					break;
 800ba84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba86:	4b08      	ldr	r3, [pc, #32]	@ (800baa8 <prvProcessReceivedCommands+0x1c8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	1d39      	adds	r1, r7, #4
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe faae 	bl	8009ff0 <xQueueReceive>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f47f af26 	bne.w	800b8e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	3730      	adds	r7, #48	@ 0x30
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20001488 	.word	0x20001488

0800baac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bab2:	e049      	b.n	800bb48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bab4:	4b2e      	ldr	r3, [pc, #184]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800babe:	4b2c      	ldr	r3, [pc, #176]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3304      	adds	r3, #4
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fd ff7f 	bl	80099d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d02f      	beq.n	800bb48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	4413      	add	r3, r2
 800baf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d90e      	bls.n	800bb18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb06:	4b1a      	ldr	r3, [pc, #104]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4610      	mov	r0, r2
 800bb12:	f7fd ff24 	bl	800995e <vListInsert>
 800bb16:	e017      	b.n	800bb48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	2100      	movs	r1, #0
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff fd58 	bl	800b5d8 <xTimerGenericCommand>
 800bb28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	603b      	str	r3, [r7, #0]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb48:	4b09      	ldr	r3, [pc, #36]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1b0      	bne.n	800bab4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb52:	4b07      	ldr	r3, [pc, #28]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb58:	4b06      	ldr	r3, [pc, #24]	@ (800bb74 <prvSwitchTimerLists+0xc8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a04      	ldr	r2, [pc, #16]	@ (800bb70 <prvSwitchTimerLists+0xc4>)
 800bb5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb60:	4a04      	ldr	r2, [pc, #16]	@ (800bb74 <prvSwitchTimerLists+0xc8>)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6013      	str	r3, [r2, #0]
}
 800bb66:	bf00      	nop
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20001480 	.word	0x20001480
 800bb74:	20001484 	.word	0x20001484

0800bb78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb7e:	f000 f98b 	bl	800be98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb82:	4b15      	ldr	r3, [pc, #84]	@ (800bbd8 <prvCheckForValidListAndQueue+0x60>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d120      	bne.n	800bbcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb8a:	4814      	ldr	r0, [pc, #80]	@ (800bbdc <prvCheckForValidListAndQueue+0x64>)
 800bb8c:	f7fd fe96 	bl	80098bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb90:	4813      	ldr	r0, [pc, #76]	@ (800bbe0 <prvCheckForValidListAndQueue+0x68>)
 800bb92:	f7fd fe93 	bl	80098bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb96:	4b13      	ldr	r3, [pc, #76]	@ (800bbe4 <prvCheckForValidListAndQueue+0x6c>)
 800bb98:	4a10      	ldr	r2, [pc, #64]	@ (800bbdc <prvCheckForValidListAndQueue+0x64>)
 800bb9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb9c:	4b12      	ldr	r3, [pc, #72]	@ (800bbe8 <prvCheckForValidListAndQueue+0x70>)
 800bb9e:	4a10      	ldr	r2, [pc, #64]	@ (800bbe0 <prvCheckForValidListAndQueue+0x68>)
 800bba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bba2:	2300      	movs	r3, #0
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	4b11      	ldr	r3, [pc, #68]	@ (800bbec <prvCheckForValidListAndQueue+0x74>)
 800bba8:	4a11      	ldr	r2, [pc, #68]	@ (800bbf0 <prvCheckForValidListAndQueue+0x78>)
 800bbaa:	2110      	movs	r1, #16
 800bbac:	200a      	movs	r0, #10
 800bbae:	f7fd ffa3 	bl	8009af8 <xQueueGenericCreateStatic>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	4a08      	ldr	r2, [pc, #32]	@ (800bbd8 <prvCheckForValidListAndQueue+0x60>)
 800bbb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbb8:	4b07      	ldr	r3, [pc, #28]	@ (800bbd8 <prvCheckForValidListAndQueue+0x60>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbc0:	4b05      	ldr	r3, [pc, #20]	@ (800bbd8 <prvCheckForValidListAndQueue+0x60>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	490b      	ldr	r1, [pc, #44]	@ (800bbf4 <prvCheckForValidListAndQueue+0x7c>)
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe fc86 	bl	800a4d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbcc:	f000 f996 	bl	800befc <vPortExitCritical>
}
 800bbd0:	bf00      	nop
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20001488 	.word	0x20001488
 800bbdc:	20001458 	.word	0x20001458
 800bbe0:	2000146c 	.word	0x2000146c
 800bbe4:	20001480 	.word	0x20001480
 800bbe8:	20001484 	.word	0x20001484
 800bbec:	20001534 	.word	0x20001534
 800bbf0:	20001494 	.word	0x20001494
 800bbf4:	0800ce98 	.word	0x0800ce98

0800bbf8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10b      	bne.n	800bc22 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	60fb      	str	r3, [r7, #12]
}
 800bc1c:	bf00      	nop
 800bc1e:	bf00      	nop
 800bc20:	e7fd      	b.n	800bc1e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800bc22:	f000 f939 	bl	800be98 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800bc2c:	f000 f966 	bl	800befc <vPortExitCritical>

	return pvReturn;
 800bc30:	693b      	ldr	r3, [r7, #16]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3b04      	subs	r3, #4
 800bc4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3b04      	subs	r3, #4
 800bc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f023 0201 	bic.w	r2, r3, #1
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3b04      	subs	r3, #4
 800bc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc6c:	4a0c      	ldr	r2, [pc, #48]	@ (800bca0 <pxPortInitialiseStack+0x64>)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3b14      	subs	r3, #20
 800bc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3b04      	subs	r3, #4
 800bc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f06f 0202 	mvn.w	r2, #2
 800bc8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	3b20      	subs	r3, #32
 800bc90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc92:	68fb      	ldr	r3, [r7, #12]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr
 800bca0:	0800bca5 	.word	0x0800bca5

0800bca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bcae:	4b13      	ldr	r3, [pc, #76]	@ (800bcfc <prvTaskExitError+0x58>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d00b      	beq.n	800bcd0 <prvTaskExitError+0x2c>
	__asm volatile
 800bcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	60fb      	str	r3, [r7, #12]
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	e7fd      	b.n	800bccc <prvTaskExitError+0x28>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60bb      	str	r3, [r7, #8]
}
 800bce2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bce4:	bf00      	nop
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0fc      	beq.n	800bce6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcec:	bf00      	nop
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	2000002c 	.word	0x2000002c

0800bd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd00:	4b07      	ldr	r3, [pc, #28]	@ (800bd20 <pxCurrentTCBConst2>)
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	6808      	ldr	r0, [r1, #0]
 800bd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f380 8809 	msr	PSP, r0
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f04f 0000 	mov.w	r0, #0
 800bd16:	f380 8811 	msr	BASEPRI, r0
 800bd1a:	4770      	bx	lr
 800bd1c:	f3af 8000 	nop.w

0800bd20 <pxCurrentTCBConst2>:
 800bd20:	20000f58 	.word	0x20000f58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop

0800bd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd28:	4808      	ldr	r0, [pc, #32]	@ (800bd4c <prvPortStartFirstTask+0x24>)
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	6800      	ldr	r0, [r0, #0]
 800bd2e:	f380 8808 	msr	MSP, r0
 800bd32:	f04f 0000 	mov.w	r0, #0
 800bd36:	f380 8814 	msr	CONTROL, r0
 800bd3a:	b662      	cpsie	i
 800bd3c:	b661      	cpsie	f
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	df00      	svc	0
 800bd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd4a:	bf00      	nop
 800bd4c:	e000ed08 	.word	0xe000ed08

0800bd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bd56:	4b47      	ldr	r3, [pc, #284]	@ (800be74 <xPortStartScheduler+0x124>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a47      	ldr	r2, [pc, #284]	@ (800be78 <xPortStartScheduler+0x128>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d10b      	bne.n	800bd78 <xPortStartScheduler+0x28>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	613b      	str	r3, [r7, #16]
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd78:	4b3e      	ldr	r3, [pc, #248]	@ (800be74 <xPortStartScheduler+0x124>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a3f      	ldr	r2, [pc, #252]	@ (800be7c <xPortStartScheduler+0x12c>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d10b      	bne.n	800bd9a <xPortStartScheduler+0x4a>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	60fb      	str	r3, [r7, #12]
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	e7fd      	b.n	800bd96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd9a:	4b39      	ldr	r3, [pc, #228]	@ (800be80 <xPortStartScheduler+0x130>)
 800bd9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	22ff      	movs	r2, #255	@ 0xff
 800bdaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdb4:	78fb      	ldrb	r3, [r7, #3]
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	4b31      	ldr	r3, [pc, #196]	@ (800be84 <xPortStartScheduler+0x134>)
 800bdc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdc2:	4b31      	ldr	r3, [pc, #196]	@ (800be88 <xPortStartScheduler+0x138>)
 800bdc4:	2207      	movs	r2, #7
 800bdc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdc8:	e009      	b.n	800bdde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bdca:	4b2f      	ldr	r3, [pc, #188]	@ (800be88 <xPortStartScheduler+0x138>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	4a2d      	ldr	r2, [pc, #180]	@ (800be88 <xPortStartScheduler+0x138>)
 800bdd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdde:	78fb      	ldrb	r3, [r7, #3]
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde6:	2b80      	cmp	r3, #128	@ 0x80
 800bde8:	d0ef      	beq.n	800bdca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bdea:	4b27      	ldr	r3, [pc, #156]	@ (800be88 <xPortStartScheduler+0x138>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f1c3 0307 	rsb	r3, r3, #7
 800bdf2:	2b04      	cmp	r3, #4
 800bdf4:	d00b      	beq.n	800be0e <xPortStartScheduler+0xbe>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	60bb      	str	r3, [r7, #8]
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	e7fd      	b.n	800be0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be0e:	4b1e      	ldr	r3, [pc, #120]	@ (800be88 <xPortStartScheduler+0x138>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	4a1c      	ldr	r2, [pc, #112]	@ (800be88 <xPortStartScheduler+0x138>)
 800be16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be18:	4b1b      	ldr	r3, [pc, #108]	@ (800be88 <xPortStartScheduler+0x138>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be20:	4a19      	ldr	r2, [pc, #100]	@ (800be88 <xPortStartScheduler+0x138>)
 800be22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	b2da      	uxtb	r2, r3
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be2c:	4b17      	ldr	r3, [pc, #92]	@ (800be8c <xPortStartScheduler+0x13c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a16      	ldr	r2, [pc, #88]	@ (800be8c <xPortStartScheduler+0x13c>)
 800be32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be38:	4b14      	ldr	r3, [pc, #80]	@ (800be8c <xPortStartScheduler+0x13c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a13      	ldr	r2, [pc, #76]	@ (800be8c <xPortStartScheduler+0x13c>)
 800be3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be44:	f000 f8da 	bl	800bffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be48:	4b11      	ldr	r3, [pc, #68]	@ (800be90 <xPortStartScheduler+0x140>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be4e:	f000 f8f9 	bl	800c044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be52:	4b10      	ldr	r3, [pc, #64]	@ (800be94 <xPortStartScheduler+0x144>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a0f      	ldr	r2, [pc, #60]	@ (800be94 <xPortStartScheduler+0x144>)
 800be58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be5e:	f7ff ff63 	bl	800bd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be62:	f7fe ff71 	bl	800ad48 <vTaskSwitchContext>
	prvTaskExitError();
 800be66:	f7ff ff1d 	bl	800bca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	e000ed00 	.word	0xe000ed00
 800be78:	410fc271 	.word	0x410fc271
 800be7c:	410fc270 	.word	0x410fc270
 800be80:	e000e400 	.word	0xe000e400
 800be84:	20001584 	.word	0x20001584
 800be88:	20001588 	.word	0x20001588
 800be8c:	e000ed20 	.word	0xe000ed20
 800be90:	2000002c 	.word	0x2000002c
 800be94:	e000ef34 	.word	0xe000ef34

0800be98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
}
 800beb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <vPortEnterCritical+0x5c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3301      	adds	r3, #1
 800beb8:	4a0e      	ldr	r2, [pc, #56]	@ (800bef4 <vPortEnterCritical+0x5c>)
 800beba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bebc:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <vPortEnterCritical+0x5c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d110      	bne.n	800bee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bec4:	4b0c      	ldr	r3, [pc, #48]	@ (800bef8 <vPortEnterCritical+0x60>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00b      	beq.n	800bee6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	603b      	str	r3, [r7, #0]
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <vPortEnterCritical+0x4a>
	}
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	2000002c 	.word	0x2000002c
 800bef8:	e000ed04 	.word	0xe000ed04

0800befc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf02:	4b12      	ldr	r3, [pc, #72]	@ (800bf4c <vPortExitCritical+0x50>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <vPortExitCritical+0x26>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	607b      	str	r3, [r7, #4]
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	e7fd      	b.n	800bf1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bf22:	4b0a      	ldr	r3, [pc, #40]	@ (800bf4c <vPortExitCritical+0x50>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	4a08      	ldr	r2, [pc, #32]	@ (800bf4c <vPortExitCritical+0x50>)
 800bf2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf2c:	4b07      	ldr	r3, [pc, #28]	@ (800bf4c <vPortExitCritical+0x50>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <vPortExitCritical+0x44>
 800bf34:	2300      	movs	r3, #0
 800bf36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	f383 8811 	msr	BASEPRI, r3
}
 800bf3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	2000002c 	.word	0x2000002c

0800bf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf50:	f3ef 8009 	mrs	r0, PSP
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <pxCurrentTCBConst>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	f01e 0f10 	tst.w	lr, #16
 800bf60:	bf08      	it	eq
 800bf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	6010      	str	r0, [r2, #0]
 800bf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf74:	f380 8811 	msr	BASEPRI, r0
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f7fe fee2 	bl	800ad48 <vTaskSwitchContext>
 800bf84:	f04f 0000 	mov.w	r0, #0
 800bf88:	f380 8811 	msr	BASEPRI, r0
 800bf8c:	bc09      	pop	{r0, r3}
 800bf8e:	6819      	ldr	r1, [r3, #0]
 800bf90:	6808      	ldr	r0, [r1, #0]
 800bf92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf96:	f01e 0f10 	tst.w	lr, #16
 800bf9a:	bf08      	it	eq
 800bf9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfa0:	f380 8809 	msr	PSP, r0
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w

0800bfb0 <pxCurrentTCBConst>:
 800bfb0:	20000f58 	.word	0x20000f58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	607b      	str	r3, [r7, #4]
}
 800bfd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfd2:	f7fe fdff 	bl	800abd4 <xTaskIncrementTick>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfdc:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <xPortSysTickHandler+0x40>)
 800bfde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	f383 8811 	msr	BASEPRI, r3
}
 800bfee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	e000ed04 	.word	0xe000ed04

0800bffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c000:	4b0b      	ldr	r3, [pc, #44]	@ (800c030 <vPortSetupTimerInterrupt+0x34>)
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c006:	4b0b      	ldr	r3, [pc, #44]	@ (800c034 <vPortSetupTimerInterrupt+0x38>)
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c00c:	4b0a      	ldr	r3, [pc, #40]	@ (800c038 <vPortSetupTimerInterrupt+0x3c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a0a      	ldr	r2, [pc, #40]	@ (800c03c <vPortSetupTimerInterrupt+0x40>)
 800c012:	fba2 2303 	umull	r2, r3, r2, r3
 800c016:	099b      	lsrs	r3, r3, #6
 800c018:	4a09      	ldr	r2, [pc, #36]	@ (800c040 <vPortSetupTimerInterrupt+0x44>)
 800c01a:	3b01      	subs	r3, #1
 800c01c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c01e:	4b04      	ldr	r3, [pc, #16]	@ (800c030 <vPortSetupTimerInterrupt+0x34>)
 800c020:	2207      	movs	r2, #7
 800c022:	601a      	str	r2, [r3, #0]
}
 800c024:	bf00      	nop
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	e000e010 	.word	0xe000e010
 800c034:	e000e018 	.word	0xe000e018
 800c038:	20000000 	.word	0x20000000
 800c03c:	10624dd3 	.word	0x10624dd3
 800c040:	e000e014 	.word	0xe000e014

0800c044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c054 <vPortEnableVFP+0x10>
 800c048:	6801      	ldr	r1, [r0, #0]
 800c04a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c04e:	6001      	str	r1, [r0, #0]
 800c050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c052:	bf00      	nop
 800c054:	e000ed88 	.word	0xe000ed88

0800c058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c05e:	f3ef 8305 	mrs	r3, IPSR
 800c062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b0f      	cmp	r3, #15
 800c068:	d915      	bls.n	800c096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c06a:	4a18      	ldr	r2, [pc, #96]	@ (800c0cc <vPortValidateInterruptPriority+0x74>)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c074:	4b16      	ldr	r3, [pc, #88]	@ (800c0d0 <vPortValidateInterruptPriority+0x78>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	7afa      	ldrb	r2, [r7, #11]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d20b      	bcs.n	800c096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	e7fd      	b.n	800c092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c096:	4b0f      	ldr	r3, [pc, #60]	@ (800c0d4 <vPortValidateInterruptPriority+0x7c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c09e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d8 <vPortValidateInterruptPriority+0x80>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d90b      	bls.n	800c0be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	603b      	str	r3, [r7, #0]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <vPortValidateInterruptPriority+0x62>
	}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	e000e3f0 	.word	0xe000e3f0
 800c0d0:	20001584 	.word	0x20001584
 800c0d4:	e000ed0c 	.word	0xe000ed0c
 800c0d8:	20001588 	.word	0x20001588

0800c0dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08a      	sub	sp, #40	@ 0x28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0e8:	f7fe fcb8 	bl	800aa5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0ec:	4b5c      	ldr	r3, [pc, #368]	@ (800c260 <pvPortMalloc+0x184>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0f4:	f000 f924 	bl	800c340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0f8:	4b5a      	ldr	r3, [pc, #360]	@ (800c264 <pvPortMalloc+0x188>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4013      	ands	r3, r2
 800c100:	2b00      	cmp	r3, #0
 800c102:	f040 8095 	bne.w	800c230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01e      	beq.n	800c14a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c10c:	2208      	movs	r2, #8
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d015      	beq.n	800c14a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f023 0307 	bic.w	r3, r3, #7
 800c124:	3308      	adds	r3, #8
 800c126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f003 0307 	and.w	r3, r3, #7
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00b      	beq.n	800c14a <pvPortMalloc+0x6e>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	617b      	str	r3, [r7, #20]
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	e7fd      	b.n	800c146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d06f      	beq.n	800c230 <pvPortMalloc+0x154>
 800c150:	4b45      	ldr	r3, [pc, #276]	@ (800c268 <pvPortMalloc+0x18c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d86a      	bhi.n	800c230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c15a:	4b44      	ldr	r3, [pc, #272]	@ (800c26c <pvPortMalloc+0x190>)
 800c15c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c15e:	4b43      	ldr	r3, [pc, #268]	@ (800c26c <pvPortMalloc+0x190>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c164:	e004      	b.n	800c170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	d903      	bls.n	800c182 <pvPortMalloc+0xa6>
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1f1      	bne.n	800c166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c182:	4b37      	ldr	r3, [pc, #220]	@ (800c260 <pvPortMalloc+0x184>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c188:	429a      	cmp	r2, r3
 800c18a:	d051      	beq.n	800c230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2208      	movs	r2, #8
 800c192:	4413      	add	r3, r2
 800c194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	1ad2      	subs	r2, r2, r3
 800c1a6:	2308      	movs	r3, #8
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d920      	bls.n	800c1f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	f003 0307 	and.w	r3, r3, #7
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <pvPortMalloc+0xfc>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1ea:	69b8      	ldr	r0, [r7, #24]
 800c1ec:	f000 f90a 	bl	800c404 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1f0:	4b1d      	ldr	r3, [pc, #116]	@ (800c268 <pvPortMalloc+0x18c>)
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c268 <pvPortMalloc+0x18c>)
 800c1fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c268 <pvPortMalloc+0x18c>)
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	4b1b      	ldr	r3, [pc, #108]	@ (800c270 <pvPortMalloc+0x194>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	429a      	cmp	r2, r3
 800c208:	d203      	bcs.n	800c212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c20a:	4b17      	ldr	r3, [pc, #92]	@ (800c268 <pvPortMalloc+0x18c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a18      	ldr	r2, [pc, #96]	@ (800c270 <pvPortMalloc+0x194>)
 800c210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <pvPortMalloc+0x188>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	431a      	orrs	r2, r3
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c226:	4b13      	ldr	r3, [pc, #76]	@ (800c274 <pvPortMalloc+0x198>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3301      	adds	r3, #1
 800c22c:	4a11      	ldr	r2, [pc, #68]	@ (800c274 <pvPortMalloc+0x198>)
 800c22e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c230:	f7fe fc22 	bl	800aa78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00b      	beq.n	800c256 <pvPortMalloc+0x17a>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	60fb      	str	r3, [r7, #12]
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	e7fd      	b.n	800c252 <pvPortMalloc+0x176>
	return pvReturn;
 800c256:	69fb      	ldr	r3, [r7, #28]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3728      	adds	r7, #40	@ 0x28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20005194 	.word	0x20005194
 800c264:	200051a8 	.word	0x200051a8
 800c268:	20005198 	.word	0x20005198
 800c26c:	2000518c 	.word	0x2000518c
 800c270:	2000519c 	.word	0x2000519c
 800c274:	200051a0 	.word	0x200051a0

0800c278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d04f      	beq.n	800c32a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c28a:	2308      	movs	r3, #8
 800c28c:	425b      	negs	r3, r3
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	4413      	add	r3, r2
 800c292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	4b25      	ldr	r3, [pc, #148]	@ (800c334 <vPortFree+0xbc>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <vPortFree+0x46>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2aa:	f383 8811 	msr	BASEPRI, r3
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	f3bf 8f4f 	dsb	sy
 800c2b6:	60fb      	str	r3, [r7, #12]
}
 800c2b8:	bf00      	nop
 800c2ba:	bf00      	nop
 800c2bc:	e7fd      	b.n	800c2ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00b      	beq.n	800c2de <vPortFree+0x66>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	60bb      	str	r3, [r7, #8]
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	e7fd      	b.n	800c2da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	4b14      	ldr	r3, [pc, #80]	@ (800c334 <vPortFree+0xbc>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01e      	beq.n	800c32a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d11a      	bne.n	800c32a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	685a      	ldr	r2, [r3, #4]
 800c2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <vPortFree+0xbc>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	43db      	mvns	r3, r3
 800c2fe:	401a      	ands	r2, r3
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c304:	f7fe fbaa 	bl	800aa5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	4b0a      	ldr	r3, [pc, #40]	@ (800c338 <vPortFree+0xc0>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4413      	add	r3, r2
 800c312:	4a09      	ldr	r2, [pc, #36]	@ (800c338 <vPortFree+0xc0>)
 800c314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c316:	6938      	ldr	r0, [r7, #16]
 800c318:	f000 f874 	bl	800c404 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c31c:	4b07      	ldr	r3, [pc, #28]	@ (800c33c <vPortFree+0xc4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a06      	ldr	r2, [pc, #24]	@ (800c33c <vPortFree+0xc4>)
 800c324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c326:	f7fe fba7 	bl	800aa78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c32a:	bf00      	nop
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	200051a8 	.word	0x200051a8
 800c338:	20005198 	.word	0x20005198
 800c33c:	200051a4 	.word	0x200051a4

0800c340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c346:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c34a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c34c:	4b27      	ldr	r3, [pc, #156]	@ (800c3ec <prvHeapInit+0xac>)
 800c34e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f003 0307 	and.w	r3, r3, #7
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00c      	beq.n	800c374 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3307      	adds	r3, #7
 800c35e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f023 0307 	bic.w	r3, r3, #7
 800c366:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	4a1f      	ldr	r2, [pc, #124]	@ (800c3ec <prvHeapInit+0xac>)
 800c370:	4413      	add	r3, r2
 800c372:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c378:	4a1d      	ldr	r2, [pc, #116]	@ (800c3f0 <prvHeapInit+0xb0>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c37e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3f0 <prvHeapInit+0xb0>)
 800c380:	2200      	movs	r2, #0
 800c382:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	4413      	add	r3, r2
 800c38a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c38c:	2208      	movs	r2, #8
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	1a9b      	subs	r3, r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 0307 	bic.w	r3, r3, #7
 800c39a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4a15      	ldr	r2, [pc, #84]	@ (800c3f4 <prvHeapInit+0xb4>)
 800c3a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3a2:	4b14      	ldr	r3, [pc, #80]	@ (800c3f4 <prvHeapInit+0xb4>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3aa:	4b12      	ldr	r3, [pc, #72]	@ (800c3f4 <prvHeapInit+0xb4>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	1ad2      	subs	r2, r2, r3
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f4 <prvHeapInit+0xb4>)
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c3f8 <prvHeapInit+0xb8>)
 800c3ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	4a09      	ldr	r2, [pc, #36]	@ (800c3fc <prvHeapInit+0xbc>)
 800c3d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3d8:	4b09      	ldr	r3, [pc, #36]	@ (800c400 <prvHeapInit+0xc0>)
 800c3da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3de:	601a      	str	r2, [r3, #0]
}
 800c3e0:	bf00      	nop
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	2000158c 	.word	0x2000158c
 800c3f0:	2000518c 	.word	0x2000518c
 800c3f4:	20005194 	.word	0x20005194
 800c3f8:	2000519c 	.word	0x2000519c
 800c3fc:	20005198 	.word	0x20005198
 800c400:	200051a8 	.word	0x200051a8

0800c404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c40c:	4b28      	ldr	r3, [pc, #160]	@ (800c4b0 <prvInsertBlockIntoFreeList+0xac>)
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e002      	b.n	800c418 <prvInsertBlockIntoFreeList+0x14>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	60fb      	str	r3, [r7, #12]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d8f7      	bhi.n	800c412 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	4413      	add	r3, r2
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	429a      	cmp	r2, r3
 800c432:	d108      	bne.n	800c446 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	441a      	add	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	441a      	add	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	429a      	cmp	r2, r3
 800c458:	d118      	bne.n	800c48c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	4b15      	ldr	r3, [pc, #84]	@ (800c4b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	429a      	cmp	r2, r3
 800c464:	d00d      	beq.n	800c482 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	441a      	add	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	e008      	b.n	800c494 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c482:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	e003      	b.n	800c494 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d002      	beq.n	800c4a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4a2:	bf00      	nop
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	2000518c 	.word	0x2000518c
 800c4b4:	20005194 	.word	0x20005194

0800c4b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c4bc:	2201      	movs	r2, #1
 800c4be:	490e      	ldr	r1, [pc, #56]	@ (800c4f8 <MX_USB_HOST_Init+0x40>)
 800c4c0:	480e      	ldr	r0, [pc, #56]	@ (800c4fc <MX_USB_HOST_Init+0x44>)
 800c4c2:	f7fa ff87 	bl	80073d4 <USBH_Init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c4cc:	f7f4 fb3e 	bl	8000b4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c4d0:	490b      	ldr	r1, [pc, #44]	@ (800c500 <MX_USB_HOST_Init+0x48>)
 800c4d2:	480a      	ldr	r0, [pc, #40]	@ (800c4fc <MX_USB_HOST_Init+0x44>)
 800c4d4:	f7fb f84d 	bl	8007572 <USBH_RegisterClass>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c4de:	f7f4 fb35 	bl	8000b4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c4e2:	4806      	ldr	r0, [pc, #24]	@ (800c4fc <MX_USB_HOST_Init+0x44>)
 800c4e4:	f7fb f8d1 	bl	800768a <USBH_Start>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c4ee:	f7f4 fb2d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c4f2:	bf00      	nop
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	0800c505 	.word	0x0800c505
 800c4fc:	200051ac 	.word	0x200051ac
 800c500:	2000000c 	.word	0x2000000c

0800c504 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	3b01      	subs	r3, #1
 800c514:	2b04      	cmp	r3, #4
 800c516:	d819      	bhi.n	800c54c <USBH_UserProcess+0x48>
 800c518:	a201      	add	r2, pc, #4	@ (adr r2, 800c520 <USBH_UserProcess+0x1c>)
 800c51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51e:	bf00      	nop
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	0800c53d 	.word	0x0800c53d
 800c528:	0800c54d 	.word	0x0800c54d
 800c52c:	0800c545 	.word	0x0800c545
 800c530:	0800c535 	.word	0x0800c535
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c534:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <USBH_UserProcess+0x58>)
 800c536:	2203      	movs	r2, #3
 800c538:	701a      	strb	r2, [r3, #0]
  break;
 800c53a:	e008      	b.n	800c54e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c53c:	4b07      	ldr	r3, [pc, #28]	@ (800c55c <USBH_UserProcess+0x58>)
 800c53e:	2202      	movs	r2, #2
 800c540:	701a      	strb	r2, [r3, #0]
  break;
 800c542:	e004      	b.n	800c54e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c544:	4b05      	ldr	r3, [pc, #20]	@ (800c55c <USBH_UserProcess+0x58>)
 800c546:	2201      	movs	r2, #1
 800c548:	701a      	strb	r2, [r3, #0]
  break;
 800c54a:	e000      	b.n	800c54e <USBH_UserProcess+0x4a>

  default:
  break;
 800c54c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c54e:	bf00      	nop
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20005590 	.word	0x20005590

0800c560 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	@ 0x28
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c568:	f107 0314 	add.w	r3, r7, #20
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	605a      	str	r2, [r3, #4]
 800c572:	609a      	str	r2, [r3, #8]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c580:	d147      	bne.n	800c612 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c582:	2300      	movs	r3, #0
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	4b25      	ldr	r3, [pc, #148]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c58a:	4a24      	ldr	r2, [pc, #144]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c58c:	f043 0301 	orr.w	r3, r3, #1
 800c590:	6313      	str	r3, [r2, #48]	@ 0x30
 800c592:	4b22      	ldr	r3, [pc, #136]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c59e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c5ac:	f107 0314 	add.w	r3, r7, #20
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	481b      	ldr	r0, [pc, #108]	@ (800c620 <HAL_HCD_MspInit+0xc0>)
 800c5b4:	f7f4 fec6 	bl	8001344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c5b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c5bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5be:	2302      	movs	r3, #2
 800c5c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c5ca:	230a      	movs	r3, #10
 800c5cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5ce:	f107 0314 	add.w	r3, r7, #20
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4812      	ldr	r0, [pc, #72]	@ (800c620 <HAL_HCD_MspInit+0xc0>)
 800c5d6:	f7f4 feb5 	bl	8001344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c5da:	4b10      	ldr	r3, [pc, #64]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c5dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5de:	4a0f      	ldr	r2, [pc, #60]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c5e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e4:	6353      	str	r3, [r2, #52]	@ 0x34
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ee:	4a0b      	ldr	r2, [pc, #44]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c5f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c5f4:	6453      	str	r3, [r2, #68]	@ 0x44
 800c5f6:	4b09      	ldr	r3, [pc, #36]	@ (800c61c <HAL_HCD_MspInit+0xbc>)
 800c5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c602:	2200      	movs	r2, #0
 800c604:	2105      	movs	r1, #5
 800c606:	2043      	movs	r0, #67	@ 0x43
 800c608:	f7f4 fe72 	bl	80012f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c60c:	2043      	movs	r0, #67	@ 0x43
 800c60e:	f7f4 fe8b 	bl	8001328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c612:	bf00      	nop
 800c614:	3728      	adds	r7, #40	@ 0x28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	40023800 	.word	0x40023800
 800c620:	40020000 	.word	0x40020000

0800c624 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c632:	4618      	mov	r0, r3
 800c634:	f7fb fcdb 	bl	8007fee <USBH_LL_IncTimer>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fb fd1f 	bl	8008092 <USBH_LL_Connect>
}
 800c654:	bf00      	nop
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fb fd34 	bl	80080d8 <USBH_LL_Disconnect>
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
 800c684:	4613      	mov	r3, r2
 800c686:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fb fd6b 	bl	800816a <USBH_LL_NotifyURBChange>
#endif
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fb fcc9 	bl	8008042 <USBH_LL_PortEnabled>
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fb fcd5 	bl	8008076 <USBH_LL_PortDisabled>
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d12a      	bne.n	800c73c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c6e6:	4a18      	ldr	r2, [pc, #96]	@ (800c748 <USBH_LL_Init+0x74>)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a15      	ldr	r2, [pc, #84]	@ (800c748 <USBH_LL_Init+0x74>)
 800c6f2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6f6:	4b14      	ldr	r3, [pc, #80]	@ (800c748 <USBH_LL_Init+0x74>)
 800c6f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c6fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c6fe:	4b12      	ldr	r3, [pc, #72]	@ (800c748 <USBH_LL_Init+0x74>)
 800c700:	2208      	movs	r2, #8
 800c702:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c704:	4b10      	ldr	r3, [pc, #64]	@ (800c748 <USBH_LL_Init+0x74>)
 800c706:	2201      	movs	r2, #1
 800c708:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c70a:	4b0f      	ldr	r3, [pc, #60]	@ (800c748 <USBH_LL_Init+0x74>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c710:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <USBH_LL_Init+0x74>)
 800c712:	2202      	movs	r2, #2
 800c714:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c716:	4b0c      	ldr	r3, [pc, #48]	@ (800c748 <USBH_LL_Init+0x74>)
 800c718:	2200      	movs	r2, #0
 800c71a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c71c:	480a      	ldr	r0, [pc, #40]	@ (800c748 <USBH_LL_Init+0x74>)
 800c71e:	f7f4 fff8 	bl	8001712 <HAL_HCD_Init>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c728:	f7f4 fa10 	bl	8000b4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c72c:	4806      	ldr	r0, [pc, #24]	@ (800c748 <USBH_LL_Init+0x74>)
 800c72e:	f7f5 fc59 	bl	8001fe4 <HAL_HCD_GetCurrentFrame>
 800c732:	4603      	mov	r3, r0
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7fb fc4a 	bl	8007fd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20005594 	.word	0x20005594

0800c74c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c762:	4618      	mov	r0, r3
 800c764:	f7f5 fbc6 	bl	8001ef4 <HAL_HCD_Start>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 f95e 	bl	800ca30 <USBH_Get_USB_Status>
 800c774:	4603      	mov	r3, r0
 800c776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c778:	7bbb      	ldrb	r3, [r7, #14]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f5 fbce 	bl	8001f3a <HAL_HCD_Stop>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 f943 	bl	800ca30 <USBH_Get_USB_Status>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f5 fc18 	bl	8002000 <HAL_HCD_GetCurrentSpeed>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d00c      	beq.n	800c7f0 <USBH_LL_GetSpeed+0x38>
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d80d      	bhi.n	800c7f6 <USBH_LL_GetSpeed+0x3e>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <USBH_LL_GetSpeed+0x2c>
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d003      	beq.n	800c7ea <USBH_LL_GetSpeed+0x32>
 800c7e2:	e008      	b.n	800c7f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7e8:	e008      	b.n	800c7fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ee:	e005      	b.n	800c7fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7f4:	e002      	b.n	800c7fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7fa:	bf00      	nop
  }
  return  speed;
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b084      	sub	sp, #16
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7f5 fba9 	bl	8001f74 <HAL_HCD_ResetPort>
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 f901 	bl	800ca30 <USBH_Get_USB_Status>
 800c82e:	4603      	mov	r3, r0
 800c830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c832:	7bbb      	ldrb	r3, [r7, #14]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c84e:	78fa      	ldrb	r2, [r7, #3]
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f7f5 fbb1 	bl	8001fba <HAL_HCD_HC_GetXferCount>
 800c858:	4603      	mov	r3, r0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c862:	b590      	push	{r4, r7, lr}
 800c864:	b089      	sub	sp, #36	@ 0x24
 800c866:	af04      	add	r7, sp, #16
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	4608      	mov	r0, r1
 800c86c:	4611      	mov	r1, r2
 800c86e:	461a      	mov	r2, r3
 800c870:	4603      	mov	r3, r0
 800c872:	70fb      	strb	r3, [r7, #3]
 800c874:	460b      	mov	r3, r1
 800c876:	70bb      	strb	r3, [r7, #2]
 800c878:	4613      	mov	r3, r2
 800c87a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c88a:	787c      	ldrb	r4, [r7, #1]
 800c88c:	78ba      	ldrb	r2, [r7, #2]
 800c88e:	78f9      	ldrb	r1, [r7, #3]
 800c890:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	f7f4 ff9d 	bl	80017e0 <HAL_HCD_HC_Init>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f8bf 	bl	800ca30 <USBH_Get_USB_Status>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd90      	pop	{r4, r7, pc}

0800c8c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f5 f836 	bl	8001950 <HAL_HCD_HC_Halt>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 f8a0 	bl	800ca30 <USBH_Get_USB_Status>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c8fe:	b590      	push	{r4, r7, lr}
 800c900:	b089      	sub	sp, #36	@ 0x24
 800c902:	af04      	add	r7, sp, #16
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	4608      	mov	r0, r1
 800c908:	4611      	mov	r1, r2
 800c90a:	461a      	mov	r2, r3
 800c90c:	4603      	mov	r3, r0
 800c90e:	70fb      	strb	r3, [r7, #3]
 800c910:	460b      	mov	r3, r1
 800c912:	70bb      	strb	r3, [r7, #2]
 800c914:	4613      	mov	r3, r2
 800c916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c926:	787c      	ldrb	r4, [r7, #1]
 800c928:	78ba      	ldrb	r2, [r7, #2]
 800c92a:	78f9      	ldrb	r1, [r7, #3]
 800c92c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c930:	9303      	str	r3, [sp, #12]
 800c932:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	4623      	mov	r3, r4
 800c942:	f7f5 f829 	bl	8001998 <HAL_HCD_HC_SubmitRequest>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 f86f 	bl	800ca30 <USBH_Get_USB_Status>
 800c952:	4603      	mov	r3, r0
 800c954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c956:	7bbb      	ldrb	r3, [r7, #14]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd90      	pop	{r4, r7, pc}

0800c960 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c972:	78fa      	ldrb	r2, [r7, #3]
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7f5 fb0a 	bl	8001f90 <HAL_HCD_HC_GetURBState>
 800c97c:	4603      	mov	r3, r0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	460b      	mov	r3, r1
 800c990:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d103      	bne.n	800c9a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c99c:	78fb      	ldrb	r3, [r7, #3]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f872 	bl	800ca88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c9a4:	20c8      	movs	r0, #200	@ 0xc8
 800c9a6:	f7f4 fbc7 	bl	8001138 <HAL_Delay>
  return USBH_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	70fb      	strb	r3, [r7, #3]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c9ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c9cc:	78fa      	ldrb	r2, [r7, #3]
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	1a9b      	subs	r3, r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	440b      	add	r3, r1
 800c9da:	3317      	adds	r3, #23
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00a      	beq.n	800c9f8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c9e2:	78fa      	ldrb	r2, [r7, #3]
 800c9e4:	68f9      	ldr	r1, [r7, #12]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	1a9b      	subs	r3, r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	333c      	adds	r3, #60	@ 0x3c
 800c9f2:	78ba      	ldrb	r2, [r7, #2]
 800c9f4:	701a      	strb	r2, [r3, #0]
 800c9f6:	e009      	b.n	800ca0c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c9f8:	78fa      	ldrb	r2, [r7, #3]
 800c9fa:	68f9      	ldr	r1, [r7, #12]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	1a9b      	subs	r3, r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	440b      	add	r3, r1
 800ca06:	333d      	adds	r3, #61	@ 0x3d
 800ca08:	78ba      	ldrb	r2, [r7, #2]
 800ca0a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7f4 fb88 	bl	8001138 <HAL_Delay>
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	4603      	mov	r3, r0
 800ca38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca3e:	79fb      	ldrb	r3, [r7, #7]
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d817      	bhi.n	800ca74 <USBH_Get_USB_Status+0x44>
 800ca44:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <USBH_Get_USB_Status+0x1c>)
 800ca46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4a:	bf00      	nop
 800ca4c:	0800ca5d 	.word	0x0800ca5d
 800ca50:	0800ca63 	.word	0x0800ca63
 800ca54:	0800ca69 	.word	0x0800ca69
 800ca58:	0800ca6f 	.word	0x0800ca6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca60:	e00b      	b.n	800ca7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ca62:	2302      	movs	r3, #2
 800ca64:	73fb      	strb	r3, [r7, #15]
    break;
 800ca66:	e008      	b.n	800ca7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca6c:	e005      	b.n	800ca7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ca6e:	2302      	movs	r3, #2
 800ca70:	73fb      	strb	r3, [r7, #15]
    break;
 800ca72:	e002      	b.n	800ca7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ca74:	2302      	movs	r3, #2
 800ca76:	73fb      	strb	r3, [r7, #15]
    break;
 800ca78:	bf00      	nop
  }
  return usb_status;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]
 800caa0:	e001      	b.n	800caa6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800caa2:	2301      	movs	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	461a      	mov	r2, r3
 800caaa:	2101      	movs	r1, #1
 800caac:	4803      	ldr	r0, [pc, #12]	@ (800cabc <MX_DriverVbusFS+0x34>)
 800caae:	f7f4 fdfd 	bl	80016ac <HAL_GPIO_WritePin>
}
 800cab2:	bf00      	nop
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	40020800 	.word	0x40020800

0800cac0 <malloc>:
 800cac0:	4b02      	ldr	r3, [pc, #8]	@ (800cacc <malloc+0xc>)
 800cac2:	4601      	mov	r1, r0
 800cac4:	6818      	ldr	r0, [r3, #0]
 800cac6:	f000 b82d 	b.w	800cb24 <_malloc_r>
 800caca:	bf00      	nop
 800cacc:	20000030 	.word	0x20000030

0800cad0 <free>:
 800cad0:	4b02      	ldr	r3, [pc, #8]	@ (800cadc <free+0xc>)
 800cad2:	4601      	mov	r1, r0
 800cad4:	6818      	ldr	r0, [r3, #0]
 800cad6:	f000 b959 	b.w	800cd8c <_free_r>
 800cada:	bf00      	nop
 800cadc:	20000030 	.word	0x20000030

0800cae0 <sbrk_aligned>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4e0f      	ldr	r6, [pc, #60]	@ (800cb20 <sbrk_aligned+0x40>)
 800cae4:	460c      	mov	r4, r1
 800cae6:	6831      	ldr	r1, [r6, #0]
 800cae8:	4605      	mov	r5, r0
 800caea:	b911      	cbnz	r1, 800caf2 <sbrk_aligned+0x12>
 800caec:	f000 f904 	bl	800ccf8 <_sbrk_r>
 800caf0:	6030      	str	r0, [r6, #0]
 800caf2:	4621      	mov	r1, r4
 800caf4:	4628      	mov	r0, r5
 800caf6:	f000 f8ff 	bl	800ccf8 <_sbrk_r>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d103      	bne.n	800cb06 <sbrk_aligned+0x26>
 800cafe:	f04f 34ff 	mov.w	r4, #4294967295
 800cb02:	4620      	mov	r0, r4
 800cb04:	bd70      	pop	{r4, r5, r6, pc}
 800cb06:	1cc4      	adds	r4, r0, #3
 800cb08:	f024 0403 	bic.w	r4, r4, #3
 800cb0c:	42a0      	cmp	r0, r4
 800cb0e:	d0f8      	beq.n	800cb02 <sbrk_aligned+0x22>
 800cb10:	1a21      	subs	r1, r4, r0
 800cb12:	4628      	mov	r0, r5
 800cb14:	f000 f8f0 	bl	800ccf8 <_sbrk_r>
 800cb18:	3001      	adds	r0, #1
 800cb1a:	d1f2      	bne.n	800cb02 <sbrk_aligned+0x22>
 800cb1c:	e7ef      	b.n	800cafe <sbrk_aligned+0x1e>
 800cb1e:	bf00      	nop
 800cb20:	20005974 	.word	0x20005974

0800cb24 <_malloc_r>:
 800cb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb28:	1ccd      	adds	r5, r1, #3
 800cb2a:	f025 0503 	bic.w	r5, r5, #3
 800cb2e:	3508      	adds	r5, #8
 800cb30:	2d0c      	cmp	r5, #12
 800cb32:	bf38      	it	cc
 800cb34:	250c      	movcc	r5, #12
 800cb36:	2d00      	cmp	r5, #0
 800cb38:	4606      	mov	r6, r0
 800cb3a:	db01      	blt.n	800cb40 <_malloc_r+0x1c>
 800cb3c:	42a9      	cmp	r1, r5
 800cb3e:	d904      	bls.n	800cb4a <_malloc_r+0x26>
 800cb40:	230c      	movs	r3, #12
 800cb42:	6033      	str	r3, [r6, #0]
 800cb44:	2000      	movs	r0, #0
 800cb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc20 <_malloc_r+0xfc>
 800cb4e:	f000 f869 	bl	800cc24 <__malloc_lock>
 800cb52:	f8d8 3000 	ldr.w	r3, [r8]
 800cb56:	461c      	mov	r4, r3
 800cb58:	bb44      	cbnz	r4, 800cbac <_malloc_r+0x88>
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff ffbf 	bl	800cae0 <sbrk_aligned>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	4604      	mov	r4, r0
 800cb66:	d158      	bne.n	800cc1a <_malloc_r+0xf6>
 800cb68:	f8d8 4000 	ldr.w	r4, [r8]
 800cb6c:	4627      	mov	r7, r4
 800cb6e:	2f00      	cmp	r7, #0
 800cb70:	d143      	bne.n	800cbfa <_malloc_r+0xd6>
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	d04b      	beq.n	800cc0e <_malloc_r+0xea>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	4639      	mov	r1, r7
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	eb04 0903 	add.w	r9, r4, r3
 800cb80:	f000 f8ba 	bl	800ccf8 <_sbrk_r>
 800cb84:	4581      	cmp	r9, r0
 800cb86:	d142      	bne.n	800cc0e <_malloc_r+0xea>
 800cb88:	6821      	ldr	r1, [r4, #0]
 800cb8a:	1a6d      	subs	r5, r5, r1
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7ff ffa6 	bl	800cae0 <sbrk_aligned>
 800cb94:	3001      	adds	r0, #1
 800cb96:	d03a      	beq.n	800cc0e <_malloc_r+0xea>
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	442b      	add	r3, r5
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	bb62      	cbnz	r2, 800cc00 <_malloc_r+0xdc>
 800cba6:	f8c8 7000 	str.w	r7, [r8]
 800cbaa:	e00f      	b.n	800cbcc <_malloc_r+0xa8>
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	1b52      	subs	r2, r2, r5
 800cbb0:	d420      	bmi.n	800cbf4 <_malloc_r+0xd0>
 800cbb2:	2a0b      	cmp	r2, #11
 800cbb4:	d917      	bls.n	800cbe6 <_malloc_r+0xc2>
 800cbb6:	1961      	adds	r1, r4, r5
 800cbb8:	42a3      	cmp	r3, r4
 800cbba:	6025      	str	r5, [r4, #0]
 800cbbc:	bf18      	it	ne
 800cbbe:	6059      	strne	r1, [r3, #4]
 800cbc0:	6863      	ldr	r3, [r4, #4]
 800cbc2:	bf08      	it	eq
 800cbc4:	f8c8 1000 	streq.w	r1, [r8]
 800cbc8:	5162      	str	r2, [r4, r5]
 800cbca:	604b      	str	r3, [r1, #4]
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f000 f82f 	bl	800cc30 <__malloc_unlock>
 800cbd2:	f104 000b 	add.w	r0, r4, #11
 800cbd6:	1d23      	adds	r3, r4, #4
 800cbd8:	f020 0007 	bic.w	r0, r0, #7
 800cbdc:	1ac2      	subs	r2, r0, r3
 800cbde:	bf1c      	itt	ne
 800cbe0:	1a1b      	subne	r3, r3, r0
 800cbe2:	50a3      	strne	r3, [r4, r2]
 800cbe4:	e7af      	b.n	800cb46 <_malloc_r+0x22>
 800cbe6:	6862      	ldr	r2, [r4, #4]
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	bf0c      	ite	eq
 800cbec:	f8c8 2000 	streq.w	r2, [r8]
 800cbf0:	605a      	strne	r2, [r3, #4]
 800cbf2:	e7eb      	b.n	800cbcc <_malloc_r+0xa8>
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	6864      	ldr	r4, [r4, #4]
 800cbf8:	e7ae      	b.n	800cb58 <_malloc_r+0x34>
 800cbfa:	463c      	mov	r4, r7
 800cbfc:	687f      	ldr	r7, [r7, #4]
 800cbfe:	e7b6      	b.n	800cb6e <_malloc_r+0x4a>
 800cc00:	461a      	mov	r2, r3
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d1fb      	bne.n	800cc00 <_malloc_r+0xdc>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	6053      	str	r3, [r2, #4]
 800cc0c:	e7de      	b.n	800cbcc <_malloc_r+0xa8>
 800cc0e:	230c      	movs	r3, #12
 800cc10:	6033      	str	r3, [r6, #0]
 800cc12:	4630      	mov	r0, r6
 800cc14:	f000 f80c 	bl	800cc30 <__malloc_unlock>
 800cc18:	e794      	b.n	800cb44 <_malloc_r+0x20>
 800cc1a:	6005      	str	r5, [r0, #0]
 800cc1c:	e7d6      	b.n	800cbcc <_malloc_r+0xa8>
 800cc1e:	bf00      	nop
 800cc20:	20005978 	.word	0x20005978

0800cc24 <__malloc_lock>:
 800cc24:	4801      	ldr	r0, [pc, #4]	@ (800cc2c <__malloc_lock+0x8>)
 800cc26:	f000 b8a1 	b.w	800cd6c <__retarget_lock_acquire_recursive>
 800cc2a:	bf00      	nop
 800cc2c:	20005ab8 	.word	0x20005ab8

0800cc30 <__malloc_unlock>:
 800cc30:	4801      	ldr	r0, [pc, #4]	@ (800cc38 <__malloc_unlock+0x8>)
 800cc32:	f000 b89c 	b.w	800cd6e <__retarget_lock_release_recursive>
 800cc36:	bf00      	nop
 800cc38:	20005ab8 	.word	0x20005ab8

0800cc3c <memset>:
 800cc3c:	4402      	add	r2, r0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d100      	bne.n	800cc46 <memset+0xa>
 800cc44:	4770      	bx	lr
 800cc46:	f803 1b01 	strb.w	r1, [r3], #1
 800cc4a:	e7f9      	b.n	800cc40 <memset+0x4>

0800cc4c <_reclaim_reent>:
 800cc4c:	4b29      	ldr	r3, [pc, #164]	@ (800ccf4 <_reclaim_reent+0xa8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4283      	cmp	r3, r0
 800cc52:	b570      	push	{r4, r5, r6, lr}
 800cc54:	4604      	mov	r4, r0
 800cc56:	d04b      	beq.n	800ccf0 <_reclaim_reent+0xa4>
 800cc58:	69c3      	ldr	r3, [r0, #28]
 800cc5a:	b1ab      	cbz	r3, 800cc88 <_reclaim_reent+0x3c>
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	b16b      	cbz	r3, 800cc7c <_reclaim_reent+0x30>
 800cc60:	2500      	movs	r5, #0
 800cc62:	69e3      	ldr	r3, [r4, #28]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	5959      	ldr	r1, [r3, r5]
 800cc68:	2900      	cmp	r1, #0
 800cc6a:	d13b      	bne.n	800cce4 <_reclaim_reent+0x98>
 800cc6c:	3504      	adds	r5, #4
 800cc6e:	2d80      	cmp	r5, #128	@ 0x80
 800cc70:	d1f7      	bne.n	800cc62 <_reclaim_reent+0x16>
 800cc72:	69e3      	ldr	r3, [r4, #28]
 800cc74:	4620      	mov	r0, r4
 800cc76:	68d9      	ldr	r1, [r3, #12]
 800cc78:	f000 f888 	bl	800cd8c <_free_r>
 800cc7c:	69e3      	ldr	r3, [r4, #28]
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	b111      	cbz	r1, 800cc88 <_reclaim_reent+0x3c>
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f882 	bl	800cd8c <_free_r>
 800cc88:	6961      	ldr	r1, [r4, #20]
 800cc8a:	b111      	cbz	r1, 800cc92 <_reclaim_reent+0x46>
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f000 f87d 	bl	800cd8c <_free_r>
 800cc92:	69e1      	ldr	r1, [r4, #28]
 800cc94:	b111      	cbz	r1, 800cc9c <_reclaim_reent+0x50>
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 f878 	bl	800cd8c <_free_r>
 800cc9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc9e:	b111      	cbz	r1, 800cca6 <_reclaim_reent+0x5a>
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f873 	bl	800cd8c <_free_r>
 800cca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cca8:	b111      	cbz	r1, 800ccb0 <_reclaim_reent+0x64>
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 f86e 	bl	800cd8c <_free_r>
 800ccb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ccb2:	b111      	cbz	r1, 800ccba <_reclaim_reent+0x6e>
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 f869 	bl	800cd8c <_free_r>
 800ccba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ccbc:	b111      	cbz	r1, 800ccc4 <_reclaim_reent+0x78>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 f864 	bl	800cd8c <_free_r>
 800ccc4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ccc6:	b111      	cbz	r1, 800ccce <_reclaim_reent+0x82>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 f85f 	bl	800cd8c <_free_r>
 800ccce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ccd0:	b111      	cbz	r1, 800ccd8 <_reclaim_reent+0x8c>
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 f85a 	bl	800cd8c <_free_r>
 800ccd8:	6a23      	ldr	r3, [r4, #32]
 800ccda:	b14b      	cbz	r3, 800ccf0 <_reclaim_reent+0xa4>
 800ccdc:	4620      	mov	r0, r4
 800ccde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cce2:	4718      	bx	r3
 800cce4:	680e      	ldr	r6, [r1, #0]
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f850 	bl	800cd8c <_free_r>
 800ccec:	4631      	mov	r1, r6
 800ccee:	e7bb      	b.n	800cc68 <_reclaim_reent+0x1c>
 800ccf0:	bd70      	pop	{r4, r5, r6, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20000030 	.word	0x20000030

0800ccf8 <_sbrk_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	@ (800cd14 <_sbrk_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f4 f964 	bl	8000fd0 <_sbrk>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_sbrk_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_sbrk_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	20005ab4 	.word	0x20005ab4

0800cd18 <__errno>:
 800cd18:	4b01      	ldr	r3, [pc, #4]	@ (800cd20 <__errno+0x8>)
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	20000030 	.word	0x20000030

0800cd24 <__libc_init_array>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	4d0d      	ldr	r5, [pc, #52]	@ (800cd5c <__libc_init_array+0x38>)
 800cd28:	4c0d      	ldr	r4, [pc, #52]	@ (800cd60 <__libc_init_array+0x3c>)
 800cd2a:	1b64      	subs	r4, r4, r5
 800cd2c:	10a4      	asrs	r4, r4, #2
 800cd2e:	2600      	movs	r6, #0
 800cd30:	42a6      	cmp	r6, r4
 800cd32:	d109      	bne.n	800cd48 <__libc_init_array+0x24>
 800cd34:	4d0b      	ldr	r5, [pc, #44]	@ (800cd64 <__libc_init_array+0x40>)
 800cd36:	4c0c      	ldr	r4, [pc, #48]	@ (800cd68 <__libc_init_array+0x44>)
 800cd38:	f000 f872 	bl	800ce20 <_init>
 800cd3c:	1b64      	subs	r4, r4, r5
 800cd3e:	10a4      	asrs	r4, r4, #2
 800cd40:	2600      	movs	r6, #0
 800cd42:	42a6      	cmp	r6, r4
 800cd44:	d105      	bne.n	800cd52 <__libc_init_array+0x2e>
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
 800cd48:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4c:	4798      	blx	r3
 800cd4e:	3601      	adds	r6, #1
 800cd50:	e7ee      	b.n	800cd30 <__libc_init_array+0xc>
 800cd52:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd56:	4798      	blx	r3
 800cd58:	3601      	adds	r6, #1
 800cd5a:	e7f2      	b.n	800cd42 <__libc_init_array+0x1e>
 800cd5c:	0800cf6c 	.word	0x0800cf6c
 800cd60:	0800cf6c 	.word	0x0800cf6c
 800cd64:	0800cf6c 	.word	0x0800cf6c
 800cd68:	0800cf70 	.word	0x0800cf70

0800cd6c <__retarget_lock_acquire_recursive>:
 800cd6c:	4770      	bx	lr

0800cd6e <__retarget_lock_release_recursive>:
 800cd6e:	4770      	bx	lr

0800cd70 <memcpy>:
 800cd70:	440a      	add	r2, r1
 800cd72:	4291      	cmp	r1, r2
 800cd74:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd78:	d100      	bne.n	800cd7c <memcpy+0xc>
 800cd7a:	4770      	bx	lr
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd86:	4291      	cmp	r1, r2
 800cd88:	d1f9      	bne.n	800cd7e <memcpy+0xe>
 800cd8a:	bd10      	pop	{r4, pc}

0800cd8c <_free_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4605      	mov	r5, r0
 800cd90:	2900      	cmp	r1, #0
 800cd92:	d041      	beq.n	800ce18 <_free_r+0x8c>
 800cd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd98:	1f0c      	subs	r4, r1, #4
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	bfb8      	it	lt
 800cd9e:	18e4      	addlt	r4, r4, r3
 800cda0:	f7ff ff40 	bl	800cc24 <__malloc_lock>
 800cda4:	4a1d      	ldr	r2, [pc, #116]	@ (800ce1c <_free_r+0x90>)
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	b933      	cbnz	r3, 800cdb8 <_free_r+0x2c>
 800cdaa:	6063      	str	r3, [r4, #4]
 800cdac:	6014      	str	r4, [r2, #0]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb4:	f7ff bf3c 	b.w	800cc30 <__malloc_unlock>
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d908      	bls.n	800cdce <_free_r+0x42>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf01      	itttt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	1809      	addeq	r1, r1, r0
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	e7ed      	b.n	800cdaa <_free_r+0x1e>
 800cdce:	461a      	mov	r2, r3
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	b10b      	cbz	r3, 800cdd8 <_free_r+0x4c>
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d9fa      	bls.n	800cdce <_free_r+0x42>
 800cdd8:	6811      	ldr	r1, [r2, #0]
 800cdda:	1850      	adds	r0, r2, r1
 800cddc:	42a0      	cmp	r0, r4
 800cdde:	d10b      	bne.n	800cdf8 <_free_r+0x6c>
 800cde0:	6820      	ldr	r0, [r4, #0]
 800cde2:	4401      	add	r1, r0
 800cde4:	1850      	adds	r0, r2, r1
 800cde6:	4283      	cmp	r3, r0
 800cde8:	6011      	str	r1, [r2, #0]
 800cdea:	d1e0      	bne.n	800cdae <_free_r+0x22>
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	6053      	str	r3, [r2, #4]
 800cdf2:	4408      	add	r0, r1
 800cdf4:	6010      	str	r0, [r2, #0]
 800cdf6:	e7da      	b.n	800cdae <_free_r+0x22>
 800cdf8:	d902      	bls.n	800ce00 <_free_r+0x74>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	e7d6      	b.n	800cdae <_free_r+0x22>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	1821      	adds	r1, r4, r0
 800ce04:	428b      	cmp	r3, r1
 800ce06:	bf04      	itt	eq
 800ce08:	6819      	ldreq	r1, [r3, #0]
 800ce0a:	685b      	ldreq	r3, [r3, #4]
 800ce0c:	6063      	str	r3, [r4, #4]
 800ce0e:	bf04      	itt	eq
 800ce10:	1809      	addeq	r1, r1, r0
 800ce12:	6021      	streq	r1, [r4, #0]
 800ce14:	6054      	str	r4, [r2, #4]
 800ce16:	e7ca      	b.n	800cdae <_free_r+0x22>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20005978 	.word	0x20005978

0800ce20 <_init>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	bf00      	nop
 800ce24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce26:	bc08      	pop	{r3}
 800ce28:	469e      	mov	lr, r3
 800ce2a:	4770      	bx	lr

0800ce2c <_fini>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	bf00      	nop
 800ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce32:	bc08      	pop	{r3}
 800ce34:	469e      	mov	lr, r3
 800ce36:	4770      	bx	lr
