
TestProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800b97c  0800b97c  0000c97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba00  0800ba00  0000d080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba00  0800ba00  0000ca00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba08  0800ba08  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba08  0800ba08  0000ca08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba0c  0800ba0c  0000ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ba10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d080  2**0
                  CONTENTS
 10 .bss          00004a1c  20000080  20000080  0000d080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a9c  20004a9c  0000d080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020075  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005051  00000000  00000000  0002d125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e5  00000000  00000000  00033dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026603  00000000  00000000  000353bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024dfe  00000000  00000000  0005b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd014  00000000  00000000  000807be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d7d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b2c  00000000  00000000  0015d818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00165344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b964 	.word	0x0800b964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b964 	.word	0x0800b964

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000009c 	.word	0x2000009c
 80004f0:	200000f0 	.word	0x200000f0

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc81 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f823 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f955 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f889 	bl	800061c <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f8b5 	bl	8000678 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f8e3 	bl	80006d8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8000512:	f000 f917 	bl	8000744 <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <main+0x4c>)
 8000518:	1d3c      	adds	r4, r7, #4
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f008 fb52 	bl	8008bd6 <osThreadCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a03      	ldr	r2, [pc, #12]	@ (8000544 <main+0x50>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f008 fb46 	bl	8008bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x48>
 8000540:	0800b988 	.word	0x0800b988
 8000544:	2000042c 	.word	0x2000042c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00b f968 	bl	800b82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	@ (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	@ (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 febe 	bl	8004350 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 fa09 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f91f 	bl	8004840 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 f9f2 	bl	80009f0 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	@ 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_I2C1_Init+0x50>)
 800065a:	f003 f895 	bl	8003788 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f9c4 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200002f0 	.word	0x200002f0
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800069c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f003 f9aa 	bl	8003a10 <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f995 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000344 	.word	0x20000344
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_SPI1_Init+0x64>)
 800072a:	f004 fbd7 	bl	8004edc <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f95c 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000038c 	.word	0x2000038c
 8000740:	40013000 	.word	0x40013000

08000744 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_TIM7_Init+0x64>)
 8000754:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_TIM7_Init+0x68>)
 8000756:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_TIM7_Init+0x64>)
 800075a:	2253      	movs	r2, #83	@ 0x53
 800075c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_TIM7_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_TIM7_Init+0x64>)
 8000766:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800076a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_TIM7_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000772:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <MX_TIM7_Init+0x64>)
 8000774:	f004 fc3b 	bl	8004fee <HAL_TIM_Base_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800077e:	f000 f937 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <MX_TIM7_Init+0x64>)
 8000790:	f004 fd28 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800079a:	f000 f929 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200003e4 	.word	0x200003e4
 80007ac:	40001400 	.word	0x40001400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b72      	ldr	r3, [pc, #456]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a71      	ldr	r2, [pc, #452]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b68      	ldr	r3, [pc, #416]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b64      	ldr	r3, [pc, #400]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a63      	ldr	r2, [pc, #396]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b61      	ldr	r3, [pc, #388]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b5d      	ldr	r3, [pc, #372]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a5c      	ldr	r2, [pc, #368]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b5a      	ldr	r3, [pc, #360]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b56      	ldr	r3, [pc, #344]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b53      	ldr	r3, [pc, #332]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a4e      	ldr	r2, [pc, #312]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	4849      	ldr	r0, [pc, #292]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 8000874:	f000 fe20 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	4847      	ldr	r0, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1ec>)
 800087e:	f000 fe1b 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000882:	2200      	movs	r2, #0
 8000884:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000888:	4845      	ldr	r0, [pc, #276]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 800088a:	f000 fe15 	bl	80014b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 80008a6:	f000 fc53 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4836      	ldr	r0, [pc, #216]	@ (800099c <MX_GPIO_Init+0x1ec>)
 80008c2:	f000 fc45 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fc35 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	482a      	ldr	r0, [pc, #168]	@ (80009a4 <MX_GPIO_Init+0x1f4>)
 80008fc:	f000 fc28 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <MX_GPIO_Init+0x1f8>)
 8000914:	f000 fc1c 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0x1f8>)
 8000936:	f000 fc0b 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 8000954:	f000 fbfc 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000958:	2320      	movs	r3, #32
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 800096c:	f000 fbf0 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000974:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 8000986:	f000 fbe3 	bl	8001150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

080009ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80009b4:	f00a fb78 	bl	800b0a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while( 1 )
  {
	osDelay(100);
 80009b8:	2064      	movs	r0, #100	@ 0x64
 80009ba:	f008 f958 	bl	8008c6e <osDelay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80009be:	2101      	movs	r1, #1
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <StartDefaultTask+0x3c>)
 80009c2:	f000 fd61 	bl	8001488 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d005      	beq.n	80009d8 <StartDefaultTask+0x2c>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d0:	4806      	ldr	r0, [pc, #24]	@ (80009ec <StartDefaultTask+0x40>)
 80009d2:	f000 fd8a 	bl	80014ea <HAL_GPIO_TogglePin>
 80009d6:	e7ef      	b.n	80009b8 <StartDefaultTask+0xc>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009de:	4803      	ldr	r0, [pc, #12]	@ (80009ec <StartDefaultTask+0x40>)
 80009e0:	f000 fd6a 	bl	80014b8 <HAL_GPIO_WritePin>
	osDelay(100);
 80009e4:	e7e8      	b.n	80009b8 <StartDefaultTask+0xc>
 80009e6:	bf00      	nop
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a11      	ldr	r2, [pc, #68]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fb4e 	bl	80010e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_I2C_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a92:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <HAL_I2C_MspInit+0x8c>)
 8000ab0:	f000 fb4e 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <HAL_I2S_MspInit+0xf0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d15a      	bne.n	8000bca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b18:	23c0      	movs	r3, #192	@ 0xc0
 8000b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 f897 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b30:	f7ff ff5e 	bl	80009f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b98:	2306      	movs	r3, #6
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <HAL_I2S_MspInit+0xf8>)
 8000ba4:	f000 fad4 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <HAL_I2S_MspInit+0xfc>)
 8000bc6:	f000 fac3 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	@ 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_SPI_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3e:	23e0      	movs	r3, #224	@ 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f000 fa79 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10d      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <HAL_TIM_Base_MspInit+0x40>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 0320 	and.w	r3, r3, #32
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40001400 	.word	0x40001400
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <NMI_Handler+0x4>

08000cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <MemManage_Handler+0x4>

08000cd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <UsageFault_Handler+0x4>

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf2:	f000 f8d7 	bl	8000ea4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cf6:	f009 fc8d 	bl	800a614 <xTaskGetSchedulerState>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d001      	beq.n	8000d04 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d00:	f009 ff52 	bl	800aba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f000 fee7 	bl	8001ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20004574 	.word	0x20004574

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f00a fd86 	bl	800b85c <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000430 	.word	0x20000430
 8000d84:	20004aa0 	.word	0x20004aa0

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f00a fd45 	bl	800b868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fb89 	bl	80004f4 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000df0:	0800ba10 	.word	0x0800ba10
  ldr r2, =_sbss
 8000df4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000df8:	20004a9c 	.word	0x20004a9c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f94f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fde2 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f967 	bl	8001136 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f92f 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000434 	.word	0x20000434

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000434 	.word	0x20000434

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e16b      	b.n	8001444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 815a 	bne.w	800143e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d005      	beq.n	80011a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d130      	bne.n	8001204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d8:	2201      	movs	r2, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 0201 	and.w	r2, r3, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d017      	beq.n	8001240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d123      	bne.n	8001294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	220f      	movs	r2, #15
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	69b9      	ldr	r1, [r7, #24]
 8001290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80b4 	beq.w	800143e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b60      	ldr	r3, [pc, #384]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a5f      	ldr	r2, [pc, #380]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <HAL_GPIO_Init+0x30c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001460 <HAL_GPIO_Init+0x310>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_GPIO_Init+0x314>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x226>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a51      	ldr	r2, [pc, #324]	@ (8001468 <HAL_GPIO_Init+0x318>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d025      	beq.n	8001372 <HAL_GPIO_Init+0x222>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a50      	ldr	r2, [pc, #320]	@ (800146c <HAL_GPIO_Init+0x31c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01f      	beq.n	800136e <HAL_GPIO_Init+0x21e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <HAL_GPIO_Init+0x320>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d019      	beq.n	800136a <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_GPIO_Init+0x324>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	@ (8001478 <HAL_GPIO_Init+0x328>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00d      	beq.n	8001362 <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d101      	bne.n	800135a <HAL_GPIO_Init+0x20a>
 8001356:	2307      	movs	r3, #7
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135a:	2308      	movs	r3, #8
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x228>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x228>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	@ (8001460 <HAL_GPIO_Init+0x310>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a27      	ldr	r2, [pc, #156]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_GPIO_Init+0x334>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <HAL_GPIO_Init+0x334>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <HAL_GPIO_Init+0x334>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae90 	bls.w	800116c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014fc:	887a      	ldrh	r2, [r7, #2]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43d9      	mvns	r1, r3
 8001508:	887b      	ldrh	r3, [r7, #2]
 800150a:	400b      	ands	r3, r1
 800150c:	431a      	orrs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e059      	b.n	80015e4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f009 fe00 	bl	800b150 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800155e:	d102      	bne.n	8001566 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f003 ff2b 	bl	80053c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7c1a      	ldrb	r2, [r3, #16]
 8001578:	f88d 2000 	strb.w	r2, [sp]
 800157c:	3304      	adds	r3, #4
 800157e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001580:	f003 feac 	bl	80052dc <USB_CoreInit>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e026      	b.n	80015e4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	4618      	mov	r0, r3
 800159e:	f003 ff23 	bl	80053e8 <USB_SetCurrentMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e017      	b.n	80015e4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7c1a      	ldrb	r2, [r3, #16]
 80015bc:	f88d 2000 	strb.w	r2, [sp]
 80015c0:	3304      	adds	r3, #4
 80015c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c4:	f004 f8c6 	bl	8005754 <USB_HostInit>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e004      	b.n	80015e4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	@ 0x2c
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4603      	mov	r3, r0
 80015fc:	70fb      	strb	r3, [r7, #3]
 80015fe:	460b      	mov	r3, r1
 8001600:	70bb      	strb	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001606:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001608:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_HCD_HC_Init+0x2c>
 8001614:	2302      	movs	r3, #2
 8001616:	e09d      	b.n	8001754 <HAL_HCD_HC_Init+0x168>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3319      	adds	r3, #25
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3314      	adds	r3, #20
 8001644:	787a      	ldrb	r2, [r7, #1]
 8001646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3315      	adds	r3, #21
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3326      	adds	r3, #38	@ 0x26
 800166c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3316      	adds	r3, #22
 800168a:	4602      	mov	r2, r0
 800168c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fbc8 	bl	8001e28 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001698:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800169c:	2b00      	cmp	r3, #0
 800169e:	da0a      	bge.n	80016b6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016a0:	78fa      	ldrb	r2, [r7, #3]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	3317      	adds	r3, #23
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e009      	b.n	80016ca <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3317      	adds	r3, #23
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f9a4 	bl	8005a1c <USB_GetHostSpeed>
 80016d4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10b      	bne.n	80016f6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_HCD_HC_Init+0x10a>
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80016f0:	d901      	bls.n	80016f6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016f2:	23bc      	movs	r3, #188	@ 0xbc
 80016f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3318      	adds	r3, #24
 8001706:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	b298      	uxth	r0, r3
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3328      	adds	r3, #40	@ 0x28
 8001720:	4602      	mov	r2, r0
 8001722:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	b29b      	uxth	r3, r3
 800172c:	787c      	ldrb	r4, [r7, #1]
 800172e:	78ba      	ldrb	r2, [r7, #2]
 8001730:	78f9      	ldrb	r1, [r7, #3]
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4623      	mov	r3, r4
 8001742:	f004 f993 	bl	8005a6c <USB_HC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}

0800175c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_HCD_HC_Halt+0x1e>
 8001776:	2302      	movs	r3, #2
 8001778:	e00f      	b.n	800179a <HAL_HCD_HC_Halt+0x3e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fd25 	bl	80061da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70bb      	strb	r3, [r7, #2]
 80017ba:	4613      	mov	r3, r2
 80017bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3317      	adds	r3, #23
 80017ce:	78ba      	ldrb	r2, [r7, #2]
 80017d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3326      	adds	r3, #38	@ 0x26
 80017e2:	787a      	ldrb	r2, [r7, #1]
 80017e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017e6:	7c3b      	ldrb	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d114      	bne.n	8001816 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	332a      	adds	r3, #42	@ 0x2a
 80017fc:	2203      	movs	r2, #3
 80017fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3319      	adds	r3, #25
 8001810:	7f3a      	ldrb	r2, [r7, #28]
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e009      	b.n	800182a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	332a      	adds	r3, #42	@ 0x2a
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800182a:	787b      	ldrb	r3, [r7, #1]
 800182c:	2b03      	cmp	r3, #3
 800182e:	f200 8102 	bhi.w	8001a36 <HAL_HCD_HC_SubmitRequest+0x292>
 8001832:	a201      	add	r2, pc, #4	@ (adr r2, 8001838 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	08001a21 	.word	0x08001a21
 8001840:	0800190d 	.word	0x0800190d
 8001844:	08001997 	.word	0x08001997
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001848:	7c3b      	ldrb	r3, [r7, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	f040 80f5 	bne.w	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001850:	78bb      	ldrb	r3, [r7, #2]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d12d      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001856:	8b3b      	ldrh	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	333d      	adds	r3, #61	@ 0x3d
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	333d      	adds	r3, #61	@ 0x3d
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	332a      	adds	r3, #42	@ 0x2a
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800189a:	e0ce      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	332a      	adds	r3, #42	@ 0x2a
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]
      break;
 80018b0:	e0c3      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	331a      	adds	r3, #26
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f040 80b8 	bne.w	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	333c      	adds	r3, #60	@ 0x3c
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	332a      	adds	r3, #42	@ 0x2a
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
      break;
 80018f4:	e0a1      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	332a      	adds	r3, #42	@ 0x2a
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
      break;
 800190a:	e096      	b.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800190c:	78bb      	ldrb	r3, [r7, #2]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d120      	bne.n	8001954 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	333d      	adds	r3, #61	@ 0x3d
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	332a      	adds	r3, #42	@ 0x2a
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800193c:	e07e      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	332a      	adds	r3, #42	@ 0x2a
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e073      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	333c      	adds	r3, #60	@ 0x3c
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	332a      	adds	r3, #42	@ 0x2a
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e05d      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	332a      	adds	r3, #42	@ 0x2a
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e052      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001996:	78bb      	ldrb	r3, [r7, #2]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d120      	bne.n	80019de <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	333d      	adds	r3, #61	@ 0x3d
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	332a      	adds	r3, #42	@ 0x2a
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019c6:	e039      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	332a      	adds	r3, #42	@ 0x2a
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e02e      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	333c      	adds	r3, #60	@ 0x3c
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	332a      	adds	r3, #42	@ 0x2a
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
      break;
 8001a08:	e018      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	332a      	adds	r3, #42	@ 0x2a
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
      break;
 8001a1e:	e00d      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	332a      	adds	r3, #42	@ 0x2a
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
      break;
 8001a34:	e002      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a36:	bf00      	nop
 8001a38:	e000      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	332c      	adds	r3, #44	@ 0x2c
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	8b39      	ldrh	r1, [r7, #24]
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4403      	add	r3, r0
 8001a60:	3334      	adds	r3, #52	@ 0x34
 8001a62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	334c      	adds	r3, #76	@ 0x4c
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	3338      	adds	r3, #56	@ 0x38
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3315      	adds	r3, #21
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	334d      	adds	r3, #77	@ 0x4d
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3310      	adds	r3, #16
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	1d19      	adds	r1, r3, #4
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	799b      	ldrb	r3, [r3, #6]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f004 f8f8 	bl	8005cc4 <USB_HC_StartXfer>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop

08001ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fdec 	bl	80056d4 <USB_GetMode>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 80fb 	bne.w	8001cfa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fdaf 	bl	800566c <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80f1 	beq.w	8001cf8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fda6 	bl	800566c <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b2a:	d104      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fd96 	bl	800566c <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fd86 	bl	800566c <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fd76 	bl	800566c <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fd68 	bl	800566c <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ba6:	d120      	bne.n	8001bea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d113      	bne.n	8001bea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	6938      	ldr	r0, [r7, #16]
 8001bc6:	f003 fc5b 	bl	8005480 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bca:	6938      	ldr	r0, [r7, #16]
 8001bcc:	f003 fc8a 	bl	80054e4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7a5b      	ldrb	r3, [r3, #9]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d105      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fe7c 	bl	80058dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f009 fb31 	bl	800b24c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fd3c 	bl	800566c <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bfe:	d102      	bne.n	8001c06 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f001 fd4d 	bl	80036a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fd2e 	bl	800566c <USB_ReadInterrupts>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d106      	bne.n	8001c28 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f009 fafa 	bl	800b214 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fd1d 	bl	800566c <USB_ReadInterrupts>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c3c:	d139      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fab8 	bl	80061b8 <USB_HC_ReadInterrupt>
 8001c48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e025      	b.n	8001c9c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d018      	beq.n	8001c96 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c7a:	d106      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f905 	bl	8001e92 <HCD_HC_IN_IRQHandler>
 8001c88:	e005      	b.n	8001c96 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 ff67 	bl	8002b64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d3d3      	bcc.n	8001c50 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fcd8 	bl	800566c <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d101      	bne.n	8001cca <HAL_HCD_IRQHandler+0x1ea>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_HCD_IRQHandler+0x1ec>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d014      	beq.n	8001cfa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0210 	bic.w	r2, r2, #16
 8001cde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f001 fbfe 	bl	80034e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0210 	orr.w	r2, r2, #16
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	e000      	b.n	8001cfa <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cf8:	bf00      	nop
    }
  }
}
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_HCD_Start+0x16>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e013      	b.n	8001d3e <HAL_HCD_Start+0x3e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fe40 	bl	80059aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb38 	bl	80053a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_HCD_Stop+0x16>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e00d      	b.n	8001d78 <HAL_HCD_Stop+0x32>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fb93 	bl	8006494 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fde2 	bl	8005956 <USB_ResetPort>
 8001d92:	4603      	mov	r3, r0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	334c      	adds	r3, #76	@ 0x4c
 8001db8:	781b      	ldrb	r3, [r3, #0]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3338      	adds	r3, #56	@ 0x38
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fe24 	bl	8005a4a <USB_GetCurrentFrame>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fdff 	bl	8005a1c <USB_GetHostSpeed>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	331a      	adds	r3, #26
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	331b      	adds	r3, #27
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3325      	adds	r3, #37	@ 0x25
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3324      	adds	r3, #36	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fbee 	bl	8005692 <USB_ReadChInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d11a      	bne.n	8001ef6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2304      	movs	r3, #4
 8001ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	334d      	adds	r3, #77	@ 0x4d
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 f973 	bl	80061da <USB_HC_Halt>
 8001ef4:	e09e      	b.n	8002034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fbc7 	bl	8005692 <USB_ReadChInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f0e:	d11b      	bne.n	8001f48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	334d      	adds	r3, #77	@ 0x4d
 8001f34:	2208      	movs	r2, #8
 8001f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 f94a 	bl	80061da <USB_HC_Halt>
 8001f46:	e075      	b.n	8002034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fb9e 	bl	8005692 <USB_ReadChInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11a      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2308      	movs	r3, #8
 8001f70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	334d      	adds	r3, #77	@ 0x4d
 8001f82:	2206      	movs	r2, #6
 8001f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f923 	bl	80061da <USB_HC_Halt>
 8001f94:	e04e      	b.n	8002034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fb77 	bl	8005692 <USB_ReadChInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fae:	d11b      	bne.n	8001fe8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	334d      	adds	r3, #77	@ 0x4d
 8001fd4:	2209      	movs	r2, #9
 8001fd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 f8fa 	bl	80061da <USB_HC_Halt>
 8001fe6:	e025      	b.n	8002034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fb4e 	bl	8005692 <USB_ReadChInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffc:	2b80      	cmp	r3, #128	@ 0x80
 8001ffe:	d119      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	334d      	adds	r3, #77	@ 0x4d
 8002022:	2207      	movs	r2, #7
 8002024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f004 f8d3 	bl	80061da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fb28 	bl	8005692 <USB_ReadChInterrupts>
 8002042:	4603      	mov	r3, r0
 8002044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204c:	d112      	bne.n	8002074 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f8bf 	bl	80061da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800206e:	6093      	str	r3, [r2, #8]
 8002070:	f000 bd75 	b.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fb08 	bl	8005692 <USB_ReadChInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 8128 	bne.w	80022de <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209a:	461a      	mov	r2, r3
 800209c:	2320      	movs	r3, #32
 800209e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	331b      	adds	r3, #27
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d119      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	331b      	adds	r3, #27
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	799b      	ldrb	r3, [r3, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01b      	beq.n	800212a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3330      	adds	r3, #48	@ 0x30
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	1ac9      	subs	r1, r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4403      	add	r3, r0
 8002126:	3338      	adds	r3, #56	@ 0x38
 8002128:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334d      	adds	r3, #77	@ 0x4d
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3344      	adds	r3, #68	@ 0x44
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215e:	461a      	mov	r2, r3
 8002160:	2301      	movs	r3, #1
 8002162:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3326      	adds	r3, #38	@ 0x26
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	3326      	adds	r3, #38	@ 0x26
 800218a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d110      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f81e 	bl	80061da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021aa:	461a      	mov	r2, r3
 80021ac:	2310      	movs	r3, #16
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	e03d      	b.n	800222e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3326      	adds	r3, #38	@ 0x26
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d00a      	beq.n	80021de <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3326      	adds	r3, #38	@ 0x26
 80021d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d127      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	334c      	adds	r3, #76	@ 0x4c
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	334c      	adds	r3, #76	@ 0x4c
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f009 f81d 	bl	800b268 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d13b      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3338      	adds	r3, #56	@ 0x38
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4403      	add	r3, r0
 8002256:	3328      	adds	r3, #40	@ 0x28
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	440b      	add	r3, r1
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4403      	add	r3, r0
 800226c:	3328      	adds	r3, #40	@ 0x28
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	fbb1 f3f3 	udiv	r3, r1, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8470 	beq.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	@ 0x3c
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2d8      	uxtb	r0, r3
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	333c      	adds	r3, #60	@ 0x3c
 80022a6:	4602      	mov	r2, r0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	f000 bc58 	b.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	333c      	adds	r3, #60	@ 0x3c
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2d8      	uxtb	r0, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	333c      	adds	r3, #60	@ 0x3c
 80022d6:	4602      	mov	r2, r0
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	f000 bc40 	b.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f9d3 	bl	8005692 <USB_ReadChInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d131      	bne.n	800235a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	2320      	movs	r3, #32
 8002306:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	331a      	adds	r3, #26
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 841f 	bne.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	331b      	adds	r3, #27
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	334d      	adds	r3, #77	@ 0x4d
 8002344:	2203      	movs	r2, #3
 8002346:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f003 ff42 	bl	80061da <USB_HC_Halt>
 8002356:	f000 bc02 	b.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f003 f995 	bl	8005692 <USB_ReadChInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	f040 8305 	bne.w	800297e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2302      	movs	r3, #2
 8002384:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	334d      	adds	r3, #77	@ 0x4d
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d114      	bne.n	80023c6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334d      	adds	r3, #77	@ 0x4d
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	334c      	adds	r3, #76	@ 0x4c
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e2cc      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	334d      	adds	r3, #77	@ 0x4d
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d114      	bne.n	8002406 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334d      	adds	r3, #77	@ 0x4d
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334c      	adds	r3, #76	@ 0x4c
 8002400:	2205      	movs	r2, #5
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e2ac      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334d      	adds	r3, #77	@ 0x4d
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b07      	cmp	r3, #7
 800241a:	d00b      	beq.n	8002434 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	334d      	adds	r3, #77	@ 0x4d
 800242c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800242e:	2b09      	cmp	r3, #9
 8002430:	f040 80a6 	bne.w	8002580 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	334d      	adds	r3, #77	@ 0x4d
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3344      	adds	r3, #68	@ 0x44
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c59      	adds	r1, r3, #1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	3344      	adds	r3, #68	@ 0x44
 800246a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3344      	adds	r3, #68	@ 0x44
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d943      	bls.n	800250a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3344      	adds	r3, #68	@ 0x44
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	331a      	adds	r3, #26
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d123      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	331b      	adds	r3, #27
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	331c      	adds	r3, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334c      	adds	r3, #76	@ 0x4c
 8002504:	2204      	movs	r2, #4
 8002506:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002508:	e229      	b.n	800295e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800250a:	78fa      	ldrb	r2, [r7, #3]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	334c      	adds	r3, #76	@ 0x4c
 800251a:	2202      	movs	r2, #2
 800251c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3326      	adds	r3, #38	@ 0x26
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3326      	adds	r3, #38	@ 0x26
 8002544:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 8209 	bne.w	800295e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002562:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800256a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800257e:	e1ee      	b.n	800295e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334d      	adds	r3, #77	@ 0x4d
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b05      	cmp	r3, #5
 8002594:	f040 80c8 	bne.w	8002728 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	@ 0x4d
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	331b      	adds	r3, #27
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	f040 81ce 	bne.w	8002960 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3326      	adds	r3, #38	@ 0x26
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d16b      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3348      	adds	r3, #72	@ 0x48
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	3348      	adds	r3, #72	@ 0x48
 80025fc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3348      	adds	r3, #72	@ 0x48
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d943      	bls.n	800269c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3348      	adds	r3, #72	@ 0x48
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	331b      	adds	r3, #27
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3344      	adds	r3, #68	@ 0x44
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d809      	bhi.n	8002666 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	331c      	adds	r3, #28
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002684:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	334c      	adds	r3, #76	@ 0x4c
 8002696:	2204      	movs	r2, #4
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e014      	b.n	80026c6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334c      	adds	r3, #76	@ 0x4c
 80026ac:	2202      	movs	r2, #2
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e009      	b.n	80026c6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	334c      	adds	r3, #76	@ 0x4c
 80026c2:	2202      	movs	r2, #2
 80026c4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3326      	adds	r3, #38	@ 0x26
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3326      	adds	r3, #38	@ 0x26
 80026ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	f040 8136 	bne.w	8002960 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800270a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002712:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e11b      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334d      	adds	r3, #77	@ 0x4d
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b03      	cmp	r3, #3
 800273c:	f040 8081 	bne.w	8002842 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334d      	adds	r3, #77	@ 0x4d
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	331b      	adds	r3, #27
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 80fa 	bne.w	8002960 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334c      	adds	r3, #76	@ 0x4c
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	440a      	add	r2, r1
 8002796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800279a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027be:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027da:	f023 0320 	bic.w	r3, r3, #32
 80027de:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3326      	adds	r3, #38	@ 0x26
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3326      	adds	r3, #38	@ 0x26
 8002806:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002808:	2b02      	cmp	r3, #2
 800280a:	f040 80a9 	bne.w	8002960 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002824:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800282c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e08e      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334d      	adds	r3, #77	@ 0x4d
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d143      	bne.n	80028e0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334d      	adds	r3, #77	@ 0x4d
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	334c      	adds	r3, #76	@ 0x4c
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	3326      	adds	r3, #38	@ 0x26
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3326      	adds	r3, #38	@ 0x26
 80028a6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d159      	bne.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e03f      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	334d      	adds	r3, #77	@ 0x4d
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d126      	bne.n	8002944 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	334d      	adds	r3, #77	@ 0x4d
 8002906:	2202      	movs	r2, #2
 8002908:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3344      	adds	r3, #68	@ 0x44
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1c59      	adds	r1, r3, #1
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4403      	add	r3, r0
 800292a:	3344      	adds	r3, #68	@ 0x44
 800292c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	334c      	adds	r3, #76	@ 0x4c
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e00d      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334d      	adds	r3, #77	@ 0x4d
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	f000 8100 	beq.w	8002b5c <HCD_HC_IN_IRQHandler+0xcca>
 800295c:	e000      	b.n	8002960 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800295e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334c      	adds	r3, #76	@ 0x4c
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f008 fc76 	bl	800b268 <HAL_HCD_HC_NotifyURBChange_Callback>
 800297c:	e0ef      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f002 fe83 	bl	8005692 <USB_ReadChInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d12f      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	2340      	movs	r3, #64	@ 0x40
 80029a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	2205      	movs	r2, #5
 80029ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	331a      	adds	r3, #26
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3344      	adds	r3, #68	@ 0x44
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fbf3 	bl	80061da <USB_HC_Halt>
 80029f4:	e0b3      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fe47 	bl	8005692 <USB_ReadChInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	f040 80a7 	bne.w	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3326      	adds	r3, #38	@ 0x26
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d11b      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3344      	adds	r3, #68	@ 0x44
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	334d      	adds	r3, #77	@ 0x4d
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fbbf 	bl	80061da <USB_HC_Halt>
 8002a5c:	e03f      	b.n	8002ade <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3326      	adds	r3, #38	@ 0x26
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3326      	adds	r3, #38	@ 0x26
 8002a84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d129      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3344      	adds	r3, #68	@ 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	799b      	ldrb	r3, [r3, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HCD_HC_IN_IRQHandler+0xc2a>
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	331b      	adds	r3, #27
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d110      	bne.n	8002ade <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	@ 0x4d
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fb7e 	bl	80061da <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331b      	adds	r3, #27
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d129      	bne.n	8002b48 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	331b      	adds	r3, #27
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b42:	f043 0320 	orr.w	r3, r3, #32
 8002b46:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	2310      	movs	r3, #16
 8002b58:	6093      	str	r3, [r2, #8]
 8002b5a:	e000      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b5c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 fd85 	bl	8005692 <USB_ReadChInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d11b      	bne.n	8002bca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fb0a 	bl	80061da <USB_HC_Halt>
 8002bc6:	f000 bc89 	b.w	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fd5d 	bl	8005692 <USB_ReadChInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	f040 8082 	bne.w	8002ce8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3319      	adds	r3, #25
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d124      	bne.n	8002c56 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	3319      	adds	r3, #25
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334c      	adds	r3, #76	@ 0x4c
 8002c30:	2202      	movs	r2, #2
 8002c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	334d      	adds	r3, #77	@ 0x4d
 8002c44:	2203      	movs	r2, #3
 8002c46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fac2 	bl	80061da <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	331a      	adds	r3, #26
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f040 8437 	bne.w	80034dc <HCD_HC_OUT_IRQHandler+0x978>
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	331b      	adds	r3, #27
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 842b 	bne.w	80034dc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3326      	adds	r3, #38	@ 0x26
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d009      	beq.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	331b      	adds	r3, #27
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334d      	adds	r3, #77	@ 0x4d
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fa84 	bl	80061da <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	@ 0x44
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e3f9      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fcce 	bl	8005692 <USB_ReadChInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d00:	d111      	bne.n	8002d26 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d14:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fa5b 	bl	80061da <USB_HC_Halt>
 8002d24:	e3da      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fcaf 	bl	8005692 <USB_ReadChInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d168      	bne.n	8002e10 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3344      	adds	r3, #68	@ 0x44
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fc99 	bl	8005692 <USB_ReadChInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b40      	cmp	r3, #64	@ 0x40
 8002d68:	d112      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3319      	adds	r3, #25
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2340      	movs	r3, #64	@ 0x40
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	331b      	adds	r3, #27
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d019      	beq.n	8002dda <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	331b      	adds	r3, #27
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	0151      	lsls	r1, r2, #5
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	440a      	add	r2, r1
 8002dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 f9e6 	bl	80061da <USB_HC_Halt>
 8002e0e:	e365      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fc3a 	bl	8005692 <USB_ReadChInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d139      	bne.n	8002e9c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	334d      	adds	r3, #77	@ 0x4d
 8002e38:	2205      	movs	r2, #5
 8002e3a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	331a      	adds	r3, #26
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3319      	adds	r3, #25
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3344      	adds	r3, #68	@ 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 f9a9 	bl	80061da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	2340      	movs	r3, #64	@ 0x40
 8002e98:	6093      	str	r3, [r2, #8]
 8002e9a:	e31f      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fbf4 	bl	8005692 <USB_ReadChInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d11a      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334d      	adds	r3, #77	@ 0x4d
 8002ed6:	2206      	movs	r2, #6
 8002ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 f979 	bl	80061da <USB_HC_Halt>
 8002ee8:	e2f8      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fbcd 	bl	8005692 <USB_ReadChInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d144      	bne.n	8002f8c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3344      	adds	r3, #68	@ 0x44
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	334d      	adds	r3, #77	@ 0x4d
 8002f26:	2204      	movs	r2, #4
 8002f28:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3319      	adds	r3, #25
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d114      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3318      	adds	r3, #24
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3319      	adds	r3, #25
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f003 f931 	bl	80061da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	2310      	movs	r3, #16
 8002f88:	6093      	str	r3, [r2, #8]
 8002f8a:	e2a7      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 fb7c 	bl	8005692 <USB_ReadChInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	2b80      	cmp	r3, #128	@ 0x80
 8002fa2:	f040 8083 	bne.w	80030ac <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	799b      	ldrb	r3, [r3, #6]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d111      	bne.n	8002fd2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	334d      	adds	r3, #77	@ 0x4d
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 f905 	bl	80061da <USB_HC_Halt>
 8002fd0:	e062      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3344      	adds	r3, #68	@ 0x44
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	3344      	adds	r3, #68	@ 0x44
 8002ff4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3344      	adds	r3, #68	@ 0x44
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d922      	bls.n	8003052 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3344      	adds	r3, #68	@ 0x44
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	334c      	adds	r3, #76	@ 0x4c
 8003030:	2204      	movs	r2, #4
 8003032:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334c      	adds	r3, #76	@ 0x4c
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f008 f90c 	bl	800b268 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003050:	e022      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334c      	adds	r3, #76	@ 0x4c
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800307c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003084:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	6093      	str	r3, [r2, #8]
 80030aa:	e217      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 faec 	bl	8005692 <USB_ReadChInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c4:	d11b      	bne.n	80030fe <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334d      	adds	r3, #77	@ 0x4d
 80030d6:	2209      	movs	r2, #9
 80030d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 f879 	bl	80061da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	e1ee      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fac3 	bl	8005692 <USB_ReadChInterrupts>
 800310c:	4603      	mov	r3, r0
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	f040 81df 	bne.w	80034d6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2302      	movs	r3, #2
 8003128:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	334d      	adds	r3, #77	@ 0x4d
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	f040 8093 	bne.w	8003268 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334d      	adds	r3, #77	@ 0x4d
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334c      	adds	r3, #76	@ 0x4c
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3326      	adds	r3, #38	@ 0x26
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d00b      	beq.n	8003198 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3326      	adds	r3, #38	@ 0x26
 8003190:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003192:	2b03      	cmp	r3, #3
 8003194:	f040 8190 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	799b      	ldrb	r3, [r3, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	333d      	adds	r3, #61	@ 0x3d
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2d8      	uxtb	r0, r3
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	333d      	adds	r3, #61	@ 0x3d
 80031c8:	4602      	mov	r2, r0
 80031ca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	799b      	ldrb	r3, [r3, #6]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	f040 8171 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3334      	adds	r3, #52	@ 0x34
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8165 	beq.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3334      	adds	r3, #52	@ 0x34
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4403      	add	r3, r0
 800320e:	3328      	adds	r3, #40	@ 0x28
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	440b      	add	r3, r1
 8003214:	1e59      	subs	r1, r3, #1
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4403      	add	r3, r0
 8003224:	3328      	adds	r3, #40	@ 0x28
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 813f 	beq.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	333d      	adds	r3, #61	@ 0x3d
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	f083 0301 	eor.w	r3, r3, #1
 8003252:	b2d8      	uxtb	r0, r3
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	333d      	adds	r3, #61	@ 0x3d
 8003262:	4602      	mov	r2, r0
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e127      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334d      	adds	r3, #77	@ 0x4d
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d120      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334d      	adds	r3, #77	@ 0x4d
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	331b      	adds	r3, #27
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 8107 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334c      	adds	r3, #76	@ 0x4c
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e0fb      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d13a      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	331b      	adds	r3, #27
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 80d1 	bne.w	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	331b      	adds	r3, #27
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	440a      	add	r2, r1
 8003340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003348:	6053      	str	r3, [r2, #4]
 800334a:	e0b5      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	334d      	adds	r3, #77	@ 0x4d
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d114      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334d      	adds	r3, #77	@ 0x4d
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	334c      	adds	r3, #76	@ 0x4c
 8003386:	2202      	movs	r2, #2
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e095      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334d      	adds	r3, #77	@ 0x4d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d114      	bne.n	80033cc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	334c      	adds	r3, #76	@ 0x4c
 80033c6:	2205      	movs	r2, #5
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e075      	b.n	80034b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	334d      	adds	r3, #77	@ 0x4d
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d00a      	beq.n	80033f8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334d      	adds	r3, #77	@ 0x4d
 80033f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033f4:	2b09      	cmp	r3, #9
 80033f6:	d170      	bne.n	80034da <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334d      	adds	r3, #77	@ 0x4d
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	3344      	adds	r3, #68	@ 0x44
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4403      	add	r3, r0
 800342c:	3344      	adds	r3, #68	@ 0x44
 800342e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3344      	adds	r3, #68	@ 0x44
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d914      	bls.n	8003470 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	3344      	adds	r3, #68	@ 0x44
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	@ 0x4c
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800346e:	e022      	b.n	80034b6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	@ 0x4c
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800349a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	334c      	adds	r3, #76	@ 0x4c
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f007 feca 	bl	800b268 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d4:	e002      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034da:	bf00      	nop
  }
}
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b08a      	sub	sp, #40	@ 0x28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	0c5b      	lsrs	r3, r3, #17
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003516:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d004      	beq.n	8003528 <HCD_RXQLVL_IRQHandler+0x46>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b05      	cmp	r3, #5
 8003522:	f000 80b6 	beq.w	8003692 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003526:	e0b7      	b.n	8003698 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80b3 	beq.w	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332c      	adds	r3, #44	@ 0x2c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a7 	beq.w	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3338      	adds	r3, #56	@ 0x38
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	18d1      	adds	r1, r2, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4403      	add	r3, r0
 800356c:	3334      	adds	r3, #52	@ 0x34
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4299      	cmp	r1, r3
 8003572:	f200 8083 	bhi.w	800367c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	332c      	adds	r3, #44	@ 0x2c
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	b292      	uxth	r2, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f002 f813 	bl	80055bc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	332c      	adds	r3, #44	@ 0x2c
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	18d1      	adds	r1, r2, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4403      	add	r3, r0
 80035ba:	332c      	adds	r3, #44	@ 0x2c
 80035bc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3338      	adds	r3, #56	@ 0x38
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	18d1      	adds	r1, r2, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	3338      	adds	r3, #56	@ 0x38
 80035e4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	0cdb      	lsrs	r3, r3, #19
 80035f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3328      	adds	r3, #40	@ 0x28
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4293      	cmp	r3, r2
 8003614:	d13f      	bne.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03c      	beq.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003632:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800363a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	333c      	adds	r3, #60	@ 0x3c
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2d8      	uxtb	r0, r3
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	333c      	adds	r3, #60	@ 0x3c
 8003676:	4602      	mov	r2, r0
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	e00c      	b.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	@ 0x4c
 800368c:	2204      	movs	r2, #4
 800368e:	701a      	strb	r2, [r3, #0]
      break;
 8003690:	e001      	b.n	8003696 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003696:	bf00      	nop
  }
}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d10b      	bne.n	80036f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f007 fda4 	bl	800b230 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f043 0302 	orr.w	r3, r3, #2
 80036ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d132      	bne.n	8003760 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d126      	bne.n	800375a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7a5b      	ldrb	r3, [r3, #9]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d113      	bne.n	800373c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800371a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800371e:	d106      	bne.n	800372e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f002 f8d8 	bl	80058dc <USB_InitFSLSPClkSel>
 800372c:	e011      	b.n	8003752 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f002 f8d1 	bl	80058dc <USB_InitFSLSPClkSel>
 800373a:	e00a      	b.n	8003752 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	79db      	ldrb	r3, [r3, #7]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800374a:	461a      	mov	r2, r3
 800374c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003750:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f007 fd9a 	bl	800b28c <HAL_HCD_PortEnabled_Callback>
 8003758:	e002      	b.n	8003760 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f007 fda4 	bl	800b2a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d103      	bne.n	8003772 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f043 0320 	orr.w	r3, r3, #32
 8003770:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003778:	461a      	mov	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6013      	str	r3, [r2, #0]
}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e12b      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f950 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	@ 0x24
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037ec:	f001 fa20 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80037f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4a81      	ldr	r2, [pc, #516]	@ (80039fc <HAL_I2C_Init+0x274>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d807      	bhi.n	800380c <HAL_I2C_Init+0x84>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a80      	ldr	r2, [pc, #512]	@ (8003a00 <HAL_I2C_Init+0x278>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e006      	b.n	800381a <HAL_I2C_Init+0x92>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a04 <HAL_I2C_Init+0x27c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0e7      	b.n	80039f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a78      	ldr	r2, [pc, #480]	@ (8003a08 <HAL_I2C_Init+0x280>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	0c9b      	lsrs	r3, r3, #18
 800382c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a6a      	ldr	r2, [pc, #424]	@ (80039fc <HAL_I2C_Init+0x274>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d802      	bhi.n	800385c <HAL_I2C_Init+0xd4>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3301      	adds	r3, #1
 800385a:	e009      	b.n	8003870 <HAL_I2C_Init+0xe8>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	4a69      	ldr	r2, [pc, #420]	@ (8003a0c <HAL_I2C_Init+0x284>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	3301      	adds	r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003882:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	495c      	ldr	r1, [pc, #368]	@ (80039fc <HAL_I2C_Init+0x274>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d819      	bhi.n	80038c4 <HAL_I2C_Init+0x13c>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e59      	subs	r1, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fbb1 f3f3 	udiv	r3, r1, r3
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038a4:	400b      	ands	r3, r1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_I2C_Init+0x138>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e59      	subs	r1, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038be:	e051      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c0:	2304      	movs	r3, #4
 80038c2:	e04f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_I2C_Init+0x168>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e012      	b.n	8003916 <HAL_I2C_Init+0x18e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Init+0x196>
 800391a:	2301      	movs	r3, #1
 800391c:	e022      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <HAL_I2C_Init+0x1bc>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1e58      	subs	r0, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	440b      	add	r3, r1
 8003934:	fbb0 f3f3 	udiv	r3, r0, r3
 8003938:	3301      	adds	r3, #1
 800393a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Init+0x1dc>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	6809      	ldr	r1, [r1, #0]
 8003968:	4313      	orrs	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6911      	ldr	r1, [r2, #16]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68d2      	ldr	r2, [r2, #12]
 800399e:	4311      	orrs	r1, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	000186a0 	.word	0x000186a0
 8003a00:	001e847f 	.word	0x001e847f
 8003a04:	003d08ff 	.word	0x003d08ff
 8003a08:	431bde83 	.word	0x431bde83
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e128      	b.n	8003c74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a90      	ldr	r2, [pc, #576]	@ (8003c7c <HAL_I2S_Init+0x26c>)
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fd f851 	bl	8000ae4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d060      	beq.n	8003b30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d102      	bne.n	8003a7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a76:	2310      	movs	r3, #16
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e001      	b.n	8003a80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d802      	bhi.n	8003a8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f001 f9c4 	bl	8004e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9e:	d125      	bne.n	8003aec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	3305      	adds	r3, #5
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e01f      	b.n	8003b0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	e00e      	b.n	8003b0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	3305      	adds	r3, #5
 8003b08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8003c80 <HAL_I2S_Init+0x270>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e003      	b.n	8003b38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d902      	bls.n	8003b44 <HAL_I2S_Init+0x134>
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2bff      	cmp	r3, #255	@ 0xff
 8003b42:	d907      	bls.n	8003b54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e08f      	b.n	8003c74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	ea42 0103 	orr.w	r1, r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6851      	ldr	r1, [r2, #4]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6892      	ldr	r2, [r2, #8]
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68d2      	ldr	r2, [r2, #12]
 8003b84:	4311      	orrs	r1, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6992      	ldr	r2, [r2, #24]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d161      	bne.n	8003c64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a38      	ldr	r2, [pc, #224]	@ (8003c84 <HAL_I2S_Init+0x274>)
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a37      	ldr	r2, [pc, #220]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2S_Init+0x1a4>
 8003bb0:	4b36      	ldr	r3, [pc, #216]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x1a8>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4932      	ldr	r1, [pc, #200]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2S_Init+0x1b8>
 8003bc4:	4a31      	ldr	r2, [pc, #196]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bc6:	e001      	b.n	8003bcc <HAL_I2S_Init+0x1bc>
 8003bc8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bd0:	f023 030f 	bic.w	r3, r3, #15
 8003bd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_I2S_Init+0x1d4>
 8003be0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003be2:	e001      	b.n	8003be8 <HAL_I2S_Init+0x1d8>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be8:	2202      	movs	r2, #2
 8003bea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2S_Init+0x1ea>
 8003bf6:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2S_Init+0x1ee>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0a:	d003      	beq.n	8003c14 <HAL_I2S_Init+0x204>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d103      	bne.n	8003c1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e001      	b.n	8003c20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	897b      	ldrh	r3, [r7, #10]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a0d      	ldr	r2, [pc, #52]	@ (8003c88 <HAL_I2S_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_I2S_Init+0x24c>
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <HAL_I2S_Init+0x27c>)
 8003c5a:	e001      	b.n	8003c60 <HAL_I2S_Init+0x250>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c60:	897a      	ldrh	r2, [r7, #10]
 8003c62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	08003d87 	.word	0x08003d87
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	08003e9d 	.word	0x08003e9d
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40003400 	.word	0x40003400

08003c90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffb8 	bl	8003c90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10e      	bne.n	8003d7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff93 	bl	8003ca4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d13a      	bne.n	8003e18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d109      	bne.n	8003dc0 <I2S_IRQHandler+0x3a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d102      	bne.n	8003dc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ffb4 	bl	8003d28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d126      	bne.n	8003e18 <I2S_IRQHandler+0x92>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d11f      	bne.n	8003e18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff50 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d136      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d109      	bne.n	8003e42 <I2S_IRQHandler+0xbc>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d102      	bne.n	8003e42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff45 	bl	8003ccc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d122      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d11b      	bne.n	8003e92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ff13 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e92:	bf00      	nop
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a92      	ldr	r2, [pc, #584]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003eb6:	4b92      	ldr	r3, [pc, #584]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a8b      	ldr	r2, [pc, #556]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed6:	e001      	b.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee8:	d004      	beq.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 8099 	bne.w	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d107      	bne.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f925 	bl	8004158 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f9c8 	bl	80042b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d13a      	bne.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d035      	beq.n	8003fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a6e      	ldr	r2, [pc, #440]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f46:	4b6e      	ldr	r3, [pc, #440]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4969      	ldr	r1, [pc, #420]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f56:	428b      	cmp	r3, r1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f5a:	4b69      	ldr	r3, [pc, #420]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f5c:	e001      	b.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fe88 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	f040 80c3 	bne.w	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80bd 	beq.w	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a49      	ldr	r2, [pc, #292]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fda:	4b49      	ldr	r3, [pc, #292]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fdc:	e001      	b.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4944      	ldr	r1, [pc, #272]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fea:	428b      	cmp	r3, r1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fee:	4b44      	ldr	r3, [pc, #272]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff0:	e001      	b.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0204 	orr.w	r2, r3, #4
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fe4a 	bl	8003cb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004024:	e089      	b.n	800413a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d107      	bne.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8be 	bl	80041bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8fd 	bl	8004254 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d12f      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02a      	beq.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1e      	ldr	r2, [pc, #120]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004088:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408a:	e001      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4919      	ldr	r1, [pc, #100]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004098:	428b      	cmp	r3, r1
 800409a:	d101      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800409c:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409e:	e001      	b.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fdfa 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d136      	bne.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d031      	beq.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a07      	ldr	r2, [pc, #28]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e4:	e001      	b.n	80040ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4902      	ldr	r1, [pc, #8]	@ (80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f2:	428b      	cmp	r3, r1
 80040f4:	d106      	bne.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040f6:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f8:	e006      	b.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040fa:	bf00      	nop
 80040fc:	40003800 	.word	0x40003800
 8004100:	40003400 	.word	0x40003400
 8004104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800410c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800411c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fdc0 	bl	8003cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	e000      	b.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800413a:	bf00      	nop
}
 800413c:	bf00      	nop
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	1c99      	adds	r1, r3, #2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6251      	str	r1, [r2, #36]	@ 0x24
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d113      	bne.n	80041b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ffc9 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	1c99      	adds	r1, r3, #2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ce:	8819      	ldrh	r1, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <I2SEx_TxISR_I2SExt+0x22>
 80041da:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 80041dc:	e001      	b.n	80041e2 <I2SEx_TxISR_I2SExt+0x26>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e2:	460a      	mov	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d121      	bne.n	8004242 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <I2SEx_TxISR_I2SExt+0x50>
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 800420a:	e001      	b.n	8004210 <I2SEx_TxISR_I2SExt+0x54>
 800420c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	490d      	ldr	r1, [pc, #52]	@ (800424c <I2SEx_TxISR_I2SExt+0x90>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d101      	bne.n	8004220 <I2SEx_TxISR_I2SExt+0x64>
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <I2SEx_TxISR_I2SExt+0x94>)
 800421e:	e001      	b.n	8004224 <I2SEx_TxISR_I2SExt+0x68>
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff81 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40003800 	.word	0x40003800
 8004250:	40003400 	.word	0x40003400

08004254 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68d8      	ldr	r0, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	1c99      	adds	r1, r3, #2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800426c:	b282      	uxth	r2, r0
 800426e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004296:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff ff4a 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <I2SEx_RxISR_I2SExt+0x16>
 80042ca:	4b20      	ldr	r3, [pc, #128]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 80042cc:	e001      	b.n	80042d2 <I2SEx_RxISR_I2SExt+0x1a>
 80042ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d2:	68d8      	ldr	r0, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	1c99      	adds	r1, r3, #2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042de:	b282      	uxth	r2, r0
 80042e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d121      	bne.n	800433e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <I2SEx_RxISR_I2SExt+0x50>
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 8004306:	e001      	b.n	800430c <I2SEx_RxISR_I2SExt+0x54>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	490d      	ldr	r1, [pc, #52]	@ (8004348 <I2SEx_RxISR_I2SExt+0x90>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d101      	bne.n	800431c <I2SEx_RxISR_I2SExt+0x64>
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <I2SEx_RxISR_I2SExt+0x94>)
 800431a:	e001      	b.n	8004320 <I2SEx_RxISR_I2SExt+0x68>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004320:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004324:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff ff03 	bl	8004144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40003800 	.word	0x40003800
 800434c:	40003400 	.word	0x40003400

08004350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e267      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d075      	beq.n	800445a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800436e:	4b88      	ldr	r3, [pc, #544]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b04      	cmp	r3, #4
 8004378:	d00c      	beq.n	8004394 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b85      	ldr	r3, [pc, #532]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004382:	2b08      	cmp	r3, #8
 8004384:	d112      	bne.n	80043ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004386:	4b82      	ldr	r3, [pc, #520]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004392:	d10b      	bne.n	80043ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	4b7e      	ldr	r3, [pc, #504]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d05b      	beq.n	8004458 <HAL_RCC_OscConfig+0x108>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d157      	bne.n	8004458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e242      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCC_OscConfig+0x74>
 80043b6:	4b76      	ldr	r3, [pc, #472]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a75      	ldr	r2, [pc, #468]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x98>
 80043ce:	4b70      	ldr	r3, [pc, #448]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6d      	ldr	r3, [pc, #436]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6c      	ldr	r2, [pc, #432]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0xb0>
 80043e8:	4b69      	ldr	r3, [pc, #420]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a68      	ldr	r2, [pc, #416]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b66      	ldr	r3, [pc, #408]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a65      	ldr	r2, [pc, #404]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fc fd60 	bl	8000ecc <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fc fd5c 	bl	8000ecc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e207      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	4b5b      	ldr	r3, [pc, #364]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xc0>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fc fd4c 	bl	8000ecc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004438:	f7fc fd48 	bl	8000ecc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	@ 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1f3      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0xe8>
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d063      	beq.n	800452e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004466:	4b4a      	ldr	r3, [pc, #296]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800447a:	2b08      	cmp	r3, #8
 800447c:	d11c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447e:	4b44      	ldr	r3, [pc, #272]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d116      	bne.n	80044b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	4b41      	ldr	r3, [pc, #260]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_RCC_OscConfig+0x152>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e1c7      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4937      	ldr	r1, [pc, #220]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	e03a      	b.n	800452e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d020      	beq.n	8004502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c0:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fc fd01 	bl	8000ecc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fc fcfd 	bl	8000ecc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1a8      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ec:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4925      	ldr	r1, [pc, #148]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	e015      	b.n	800452e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_RCC_OscConfig+0x244>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fc fce0 	bl	8000ecc <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004510:	f7fc fcdc 	bl	8000ecc <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e187      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d036      	beq.n	80045a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <HAL_RCC_OscConfig+0x248>)
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fc fcc0 	bl	8000ecc <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004550:	f7fc fcbc 	bl	8000ecc <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e167      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <HAL_RCC_OscConfig+0x240>)
 8004564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x200>
 800456e:	e01b      	b.n	80045a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_OscConfig+0x248>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004576:	f7fc fca9 	bl	8000ecc <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	e00e      	b.n	800459c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457e:	f7fc fca5 	bl	8000ecc <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d907      	bls.n	800459c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e150      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
 8004590:	40023800 	.word	0x40023800
 8004594:	42470000 	.word	0x42470000
 8004598:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	4b88      	ldr	r3, [pc, #544]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8097 	beq.w	80046e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ba:	4b81      	ldr	r3, [pc, #516]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b7d      	ldr	r3, [pc, #500]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	4a7c      	ldr	r2, [pc, #496]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045d6:	4b7a      	ldr	r3, [pc, #488]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	4b77      	ldr	r3, [pc, #476]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d118      	bne.n	8004624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a73      	ldr	r2, [pc, #460]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 80045f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fe:	f7fc fc65 	bl	8000ecc <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004606:	f7fc fc61 	bl	8000ecc <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e10c      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	4b6a      	ldr	r3, [pc, #424]	@ (80047c4 <HAL_RCC_OscConfig+0x474>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d106      	bne.n	800463a <HAL_RCC_OscConfig+0x2ea>
 800462c:	4b64      	ldr	r3, [pc, #400]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a63      	ldr	r2, [pc, #396]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	e01c      	b.n	8004674 <HAL_RCC_OscConfig+0x324>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x30c>
 8004642:	4b5f      	ldr	r3, [pc, #380]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	4a5e      	ldr	r2, [pc, #376]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6713      	str	r3, [r2, #112]	@ 0x70
 800464e:	4b5c      	ldr	r3, [pc, #368]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a5b      	ldr	r2, [pc, #364]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0x324>
 800465c:	4b58      	ldr	r3, [pc, #352]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	4a57      	ldr	r2, [pc, #348]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	@ 0x70
 8004668:	4b55      	ldr	r3, [pc, #340]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	4a54      	ldr	r2, [pc, #336]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 0304 	bic.w	r3, r3, #4
 8004672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc fc26 	bl	8000ecc <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fc fc22 	bl	8000ecc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0cb      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4b49      	ldr	r3, [pc, #292]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0ee      	beq.n	8004684 <HAL_RCC_OscConfig+0x334>
 80046a6:	e014      	b.n	80046d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fc fc10 	bl	8000ecc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b0:	f7fc fc0c 	bl	8000ecc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e0b5      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c6:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ee      	bne.n	80046b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d8:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046dc:	4a38      	ldr	r2, [pc, #224]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80a1 	beq.w	8004830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ee:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d05c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d141      	bne.n	8004786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b31      	ldr	r3, [pc, #196]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fc fbe0 	bl	8000ecc <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fc fbdc 	bl	8000ecc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e087      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	491b      	ldr	r1, [pc, #108]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fc fbb5 	bl	8000ecc <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fc fbb1 	bl	8000ecc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e05c      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x416>
 8004784:	e054      	b.n	8004830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCC_OscConfig+0x478>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fc fb9e 	bl	8000ecc <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fc fb9a 	bl	8000ecc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e045      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCC_OscConfig+0x470>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x444>
 80047b2:	e03d      	b.n	8004830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e038      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047cc:	4b1b      	ldr	r3, [pc, #108]	@ (800483c <HAL_RCC_OscConfig+0x4ec>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d028      	beq.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d121      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d11a      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004804:	4293      	cmp	r3, r2
 8004806:	d111      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	3b01      	subs	r3, #1
 8004816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d107      	bne.n	800482c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0cc      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b68      	ldr	r3, [pc, #416]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d90c      	bls.n	800487c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b65      	ldr	r3, [pc, #404]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b63      	ldr	r3, [pc, #396]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0b8      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004894:	4b59      	ldr	r3, [pc, #356]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a58      	ldr	r2, [pc, #352]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800489e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ac:	4b53      	ldr	r3, [pc, #332]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a52      	ldr	r2, [pc, #328]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b8:	4b50      	ldr	r3, [pc, #320]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	494d      	ldr	r1, [pc, #308]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d044      	beq.n	8004960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d119      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e07f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fe:	4b3f      	ldr	r3, [pc, #252]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e06f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490e:	4b3b      	ldr	r3, [pc, #236]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e067      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491e:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f023 0203 	bic.w	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4934      	ldr	r1, [pc, #208]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004930:	f7fc facc 	bl	8000ecc <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	e00a      	b.n	800494e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004938:	f7fc fac8 	bl	8000ecc <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e04f      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 020c 	and.w	r2, r3, #12
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	429a      	cmp	r2, r3
 800495e:	d1eb      	bne.n	8004938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d20c      	bcs.n	8004988 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b20      	ldr	r3, [pc, #128]	@ (80049f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e032      	b.n	80049ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4916      	ldr	r1, [pc, #88]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b2:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	490e      	ldr	r1, [pc, #56]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049c6:	f000 f821 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	490a      	ldr	r1, [pc, #40]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c0>)
 80049d8:	5ccb      	ldrb	r3, [r1, r3]
 80049da:	fa22 f303 	lsr.w	r3, r2, r3
 80049de:	4a09      	ldr	r2, [pc, #36]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049e2:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc fa2c 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00
 80049fc:	40023800 	.word	0x40023800
 8004a00:	0800b9e8 	.word	0x0800b9e8
 8004a04:	20000000 	.word	0x20000000
 8004a08:	20000004 	.word	0x20000004

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b094      	sub	sp, #80	@ 0x50
 8004a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a24:	4b79      	ldr	r3, [pc, #484]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d00d      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x40>
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	f200 80e1 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x34>
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3e:	e0db      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a44:	e0db      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a46:	4b73      	ldr	r3, [pc, #460]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4a:	e0d8      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a56:	4b6d      	ldr	r3, [pc, #436]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b6a      	ldr	r3, [pc, #424]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a76:	2300      	movs	r3, #0
 8004a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a7e:	4622      	mov	r2, r4
 8004a80:	462b      	mov	r3, r5
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	0159      	lsls	r1, r3, #5
 8004a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a90:	0150      	lsls	r0, r2, #5
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4621      	mov	r1, r4
 8004a98:	1a51      	subs	r1, r2, r1
 8004a9a:	6139      	str	r1, [r7, #16]
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	018b      	lsls	r3, r1, #6
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aba:	4651      	mov	r1, sl
 8004abc:	018a      	lsls	r2, r1, #6
 8004abe:	4651      	mov	r1, sl
 8004ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ade:	4690      	mov	r8, r2
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	4623      	mov	r3, r4
 8004ae4:	eb18 0303 	adds.w	r3, r8, r3
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	462b      	mov	r3, r5
 8004aec:	eb49 0303 	adc.w	r3, r9, r3
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004afe:	4629      	mov	r1, r5
 8004b00:	024b      	lsls	r3, r1, #9
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b08:	4621      	mov	r1, r4
 8004b0a:	024a      	lsls	r2, r1, #9
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b12:	2200      	movs	r2, #0
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b1c:	f7fb fb58 	bl	80001d0 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b28:	e058      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b38      	ldr	r3, [pc, #224]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	2200      	movs	r2, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	4611      	mov	r1, r2
 8004b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b44:	4642      	mov	r2, r8
 8004b46:	464b      	mov	r3, r9
 8004b48:	f04f 0000 	mov.w	r0, #0
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	0159      	lsls	r1, r3, #5
 8004b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b56:	0150      	lsls	r0, r2, #5
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b80:	eb63 050b 	sbc.w	r5, r3, fp
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	00eb      	lsls	r3, r5, #3
 8004b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b92:	00e2      	lsls	r2, r4, #3
 8004b94:	4614      	mov	r4, r2
 8004b96:	461d      	mov	r5, r3
 8004b98:	4643      	mov	r3, r8
 8004b9a:	18e3      	adds	r3, r4, r3
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb45 0303 	adc.w	r3, r5, r3
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	028b      	lsls	r3, r1, #10
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	028a      	lsls	r2, r1, #10
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	61fa      	str	r2, [r7, #28]
 8004bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd0:	f7fb fafe 	bl	80001d0 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	3301      	adds	r3, #1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3750      	adds	r7, #80	@ 0x50
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	007a1200 	.word	0x007a1200

08004c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000000 	.word	0x20000000

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c34:	f7ff fff0 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0a9b      	lsrs	r3, r3, #10
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	@ (8004c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800b9f8 	.word	0x0800b9f8

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d035      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c80:	4b62      	ldr	r3, [pc, #392]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c86:	f7fc f921 	bl	8000ecc <HAL_GetTick>
 8004c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c8e:	f7fc f91d 	bl	8000ecc <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0b0      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f0      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	019a      	lsls	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	4955      	ldr	r1, [pc, #340]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc0:	4b52      	ldr	r3, [pc, #328]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc6:	f7fc f901 	bl	8000ecc <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cce:	f7fc f8fd 	bl	8000ecc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e090      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8083 	beq.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b44      	ldr	r3, [pc, #272]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4a43      	ldr	r2, [pc, #268]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0a:	4b41      	ldr	r3, [pc, #260]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d16:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc f8d3 	bl	8000ecc <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fc f8cf 	bl	8000ecc <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e062      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d48:	4b31      	ldr	r3, [pc, #196]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d028      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d66:	4b2a      	ldr	r3, [pc, #168]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	4b29      	ldr	r3, [pc, #164]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b28      	ldr	r3, [pc, #160]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d82:	4b23      	ldr	r3, [pc, #140]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d114      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fc f89d 	bl	8000ecc <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fc f899 	bl	8000ecc <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e02a      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ee      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc4:	d10d      	bne.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	490d      	ldr	r1, [pc, #52]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	608b      	str	r3, [r1, #8]
 8004de0:	e005      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004de2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	4905      	ldr	r1, [pc, #20]	@ (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	42470068 	.word	0x42470068
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40007000 	.word	0x40007000
 8004e18:	42470e40 	.word	0x42470e40

08004e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d13f      	bne.n	8004eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e50:	d12f      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e54:	617b      	str	r3, [r7, #20]
          break;
 8004e56:	e02f      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e64:	d108      	bne.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e66:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e6e:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e007      	b.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e78:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e80:	4a15      	ldr	r2, [pc, #84]	@ (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e88:	4b10      	ldr	r3, [pc, #64]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea2:	0f1b      	lsrs	r3, r3, #28
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	617b      	str	r3, [r7, #20]
          break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
          break;
 8004eb6:	bf00      	nop
        }
      }
      break;
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004eba:	bf00      	nop
    }
  }
  return frequency;
 8004ebc:	697b      	ldr	r3, [r7, #20]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	00bb8000 	.word	0x00bb8000
 8004ed4:	007a1200 	.word	0x007a1200
 8004ed8:	00f42400 	.word	0x00f42400

08004edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e07b      	b.n	8004fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004efe:	d009      	beq.n	8004f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	61da      	str	r2, [r3, #28]
 8004f06:	e005      	b.n	8004f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fe58 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	ea42 0103 	orr.w	r1, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	0c1b      	lsrs	r3, r3, #16
 8004fb2:	f003 0104 	and.w	r1, r3, #4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0210 	and.w	r2, r3, #16
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e041      	b.n	8005084 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fb fe2d 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 f82d 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a46      	ldr	r2, [pc, #280]	@ (80051b8 <TIM_Base_SetConfig+0x12c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d00f      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a43      	ldr	r2, [pc, #268]	@ (80051bc <TIM_Base_SetConfig+0x130>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00b      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a42      	ldr	r2, [pc, #264]	@ (80051c0 <TIM_Base_SetConfig+0x134>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a41      	ldr	r2, [pc, #260]	@ (80051c4 <TIM_Base_SetConfig+0x138>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a40      	ldr	r2, [pc, #256]	@ (80051c8 <TIM_Base_SetConfig+0x13c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d108      	bne.n	80050de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a35      	ldr	r2, [pc, #212]	@ (80051b8 <TIM_Base_SetConfig+0x12c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ec:	d027      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a32      	ldr	r2, [pc, #200]	@ (80051bc <TIM_Base_SetConfig+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d023      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a31      	ldr	r2, [pc, #196]	@ (80051c0 <TIM_Base_SetConfig+0x134>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01f      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a30      	ldr	r2, [pc, #192]	@ (80051c4 <TIM_Base_SetConfig+0x138>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2f      	ldr	r2, [pc, #188]	@ (80051c8 <TIM_Base_SetConfig+0x13c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d017      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2e      	ldr	r2, [pc, #184]	@ (80051cc <TIM_Base_SetConfig+0x140>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2d      	ldr	r2, [pc, #180]	@ (80051d0 <TIM_Base_SetConfig+0x144>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00f      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	@ (80051d4 <TIM_Base_SetConfig+0x148>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <TIM_Base_SetConfig+0x14c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2a      	ldr	r2, [pc, #168]	@ (80051dc <TIM_Base_SetConfig+0x150>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a29      	ldr	r2, [pc, #164]	@ (80051e0 <TIM_Base_SetConfig+0x154>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d108      	bne.n	8005150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a10      	ldr	r2, [pc, #64]	@ (80051b8 <TIM_Base_SetConfig+0x12c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <TIM_Base_SetConfig+0x13c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]
  }
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40001800 	.word	0x40001800
 80051dc:	40001c00 	.word	0x40001c00
 80051e0:	40002000 	.word	0x40002000

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e05a      	b.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d01d      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1d      	ldr	r2, [pc, #116]	@ (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1a      	ldr	r2, [pc, #104]	@ (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d10c      	bne.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	4313      	orrs	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800

080052dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052dc:	b084      	sub	sp, #16
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	f107 001c 	add.w	r0, r7, #28
 80052ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d123      	bne.n	800533e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800530a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800531e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9dc 	bl	80056f0 <USB_CoreReset>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e01b      	b.n	8005376 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9d0 	bl	80056f0 <USB_CoreReset>
 8005350:	4603      	mov	r3, r0
 8005352:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38
 8005368:	e005      	b.n	8005376 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005376:	7fbb      	ldrb	r3, [r7, #30]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d10b      	bne.n	8005394 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f043 0206 	orr.w	r2, r3, #6
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr

080053a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f043 0201 	orr.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 0201 	bic.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d115      	bne.n	8005436 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005416:	200a      	movs	r0, #10
 8005418:	f7fb fd64 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	330a      	adds	r3, #10
 8005420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f956 	bl	80056d4 <USB_GetMode>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d01e      	beq.n	800546c <USB_SetCurrentMode+0x84>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2bc7      	cmp	r3, #199	@ 0xc7
 8005432:	d9f0      	bls.n	8005416 <USB_SetCurrentMode+0x2e>
 8005434:	e01a      	b.n	800546c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d115      	bne.n	8005468 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005448:	200a      	movs	r0, #10
 800544a:	f7fb fd4b 	bl	8000ee4 <HAL_Delay>
      ms += 10U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	330a      	adds	r3, #10
 8005452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f93d 	bl	80056d4 <USB_GetMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <USB_SetCurrentMode+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2bc7      	cmp	r3, #199	@ 0xc7
 8005464:	d9f0      	bls.n	8005448 <USB_SetCurrentMode+0x60>
 8005466:	e001      	b.n	800546c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e005      	b.n	8005478 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005470:	d101      	bne.n	8005476 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800549a:	d901      	bls.n	80054a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e01b      	b.n	80054d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	daf2      	bge.n	800548e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	019b      	lsls	r3, r3, #6
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c4:	d901      	bls.n	80054ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e006      	b.n	80054d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d0f0      	beq.n	80054b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054fc:	d901      	bls.n	8005502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e018      	b.n	8005534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	daf2      	bge.n	80054f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2210      	movs	r2, #16
 8005512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005520:	d901      	bls.n	8005526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d0f0      	beq.n	8005514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	@ 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	460b      	mov	r3, r1
 8005550:	71fb      	strb	r3, [r7, #7]
 8005552:	4613      	mov	r3, r2
 8005554:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800555e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d123      	bne.n	80055ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005566:	88bb      	ldrh	r3, [r7, #4]
 8005568:	3303      	adds	r3, #3
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e018      	b.n	80055a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	031a      	lsls	r2, r3, #12
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005580:	461a      	mov	r2, r3
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3301      	adds	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3301      	adds	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d3e2      	bcc.n	8005574 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3724      	adds	r7, #36	@ 0x24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055bc:	b480      	push	{r7}
 80055be:	b08b      	sub	sp, #44	@ 0x2c
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	623b      	str	r3, [r7, #32]
 80055e6:	e014      	b.n	8005612 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	3301      	adds	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	3301      	adds	r3, #1
 80055fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	3301      	adds	r3, #1
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	3301      	adds	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	3301      	adds	r3, #1
 8005610:	623b      	str	r3, [r7, #32]
 8005612:	6a3a      	ldr	r2, [r7, #32]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	429a      	cmp	r2, r3
 8005618:	d3e6      	bcc.n	80055e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800561a:	8bfb      	ldrh	r3, [r7, #30]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800562a:	461a      	mov	r2, r3
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	701a      	strb	r2, [r3, #0]
      i++;
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	3301      	adds	r3, #1
 800564a:	623b      	str	r3, [r7, #32]
      pDest++;
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	3301      	adds	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005652:	8bfb      	ldrh	r3, [r7, #30]
 8005654:	3b01      	subs	r3, #1
 8005656:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005658:	8bfb      	ldrh	r3, [r7, #30]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ea      	bne.n	8005634 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005660:	4618      	mov	r0, r3
 8005662:	372c      	adds	r7, #44	@ 0x2c
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005684:	68fb      	ldr	r3, [r7, #12]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c6:	68bb      	ldr	r3, [r7, #8]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	f003 0301 	and.w	r3, r3, #1
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005708:	d901      	bls.n	800570e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e01b      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	daf2      	bge.n	80056fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005732:	d901      	bls.n	8005738 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d0f0      	beq.n	8005726 <USB_CoreReset+0x36>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005754:	b084      	sub	sp, #16
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005796:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d119      	bne.n	80057de <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d10a      	bne.n	80057c8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057c0:	f043 0304 	orr.w	r3, r3, #4
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e014      	b.n	80057f2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057d6:	f023 0304 	bic.w	r3, r3, #4
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e009      	b.n	80057f2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057f2:	2110      	movs	r1, #16
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fe43 	bl	8005480 <USB_FlushTxFifo>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fe6d 	bl	80054e4 <USB_FlushRxFifo>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	e015      	b.n	8005846 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	461a      	mov	r2, r3
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	3301      	adds	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800584a:	461a      	mov	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4293      	cmp	r3, r2
 8005850:	d3e3      	bcc.n	800581a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <USB_HostInit+0x170>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10b      	bne.n	8005880 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800586e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <USB_HostInit+0x174>)
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a14      	ldr	r2, [pc, #80]	@ (80058cc <USB_HostInit+0x178>)
 800587a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800587e:	e009      	b.n	8005894 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2280      	movs	r2, #128	@ 0x80
 8005884:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a11      	ldr	r2, [pc, #68]	@ (80058d0 <USB_HostInit+0x17c>)
 800588a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a11      	ldr	r2, [pc, #68]	@ (80058d4 <USB_HostInit+0x180>)
 8005890:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 0210 	orr.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <USB_HostInit+0x184>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c0:	b004      	add	sp, #16
 80058c2:	4770      	bx	lr
 80058c4:	40040000 	.word	0x40040000
 80058c8:	01000200 	.word	0x01000200
 80058cc:	00e00300 	.word	0x00e00300
 80058d0:	00600080 	.word	0x00600080
 80058d4:	004000e0 	.word	0x004000e0
 80058d8:	a3200008 	.word	0xa3200008

080058dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005924:	461a      	mov	r2, r3
 8005926:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800592a:	6053      	str	r3, [r2, #4]
 800592c:	e00c      	b.n	8005948 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d107      	bne.n	8005944 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800593a:	461a      	mov	r2, r3
 800593c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005940:	6053      	str	r3, [r2, #4]
 8005942:	e001      	b.n	8005948 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005976:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005984:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005986:	2064      	movs	r0, #100	@ 0x64
 8005988:	f7fb faac 	bl	8000ee4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005998:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800599a:	200a      	movs	r0, #10
 800599c:	f7fb faa2 	bl	8000ee4 <HAL_Delay>

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <USB_DriveVbus+0x44>
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80059e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f8:	d109      	bne.n	8005a0e <USB_DriveVbus+0x64>
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a0c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	0c5b      	lsrs	r3, r3, #17
 8005a3a:	f003 0303 	and.w	r3, r3, #3
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	b29b      	uxth	r3, r3
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	70fb      	strb	r3, [r7, #3]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70bb      	strb	r3, [r7, #2]
 8005a82:	4613      	mov	r3, r2
 8005a84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d87c      	bhi.n	8005ba4 <USB_HC_Init+0x138>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <USB_HC_Init+0x44>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ac1 	.word	0x08005ac1
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005ac1 	.word	0x08005ac1
 8005abc:	08005b29 	.word	0x08005b29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005acc:	461a      	mov	r2, r3
 8005ace:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005ad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da10      	bge.n	8005afe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005afa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005afc:	e055      	b.n	8005baa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a6f      	ldr	r2, [pc, #444]	@ (8005cc0 <USB_HC_Init+0x254>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d151      	bne.n	8005baa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	78fa      	ldrb	r2, [r7, #3]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b24:	60d3      	str	r3, [r2, #12]
      break;
 8005b26:	e040      	b.n	8005baa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b34:	461a      	mov	r2, r3
 8005b36:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005b3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da34      	bge.n	8005bae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b64:	e023      	b.n	8005bae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b72:	461a      	mov	r2, r3
 8005b74:	f240 2325 	movw	r3, #549	@ 0x225
 8005b78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da17      	bge.n	8005bb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b9c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ba0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ba2:	e006      	b.n	8005bb2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ba8:	e004      	b.n	8005bb4 <USB_HC_Init+0x148>
      break;
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <USB_HC_Init+0x148>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <USB_HC_Init+0x148>
      break;
 8005bb2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be0:	f043 0302 	orr.w	r3, r3, #2
 8005be4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	6939      	ldr	r1, [r7, #16]
 8005bfc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c00:	4313      	orrs	r3, r2
 8005c02:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da03      	bge.n	8005c20 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	e001      	b.n	8005c24 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fef9 	bl	8005a1c <USB_GetHostSpeed>
 8005c2a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d106      	bne.n	8005c42 <USB_HC_Init+0x1d6>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d003      	beq.n	8005c42 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e001      	b.n	8005c46 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c46:	787b      	ldrb	r3, [r7, #1]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c4e:	78bb      	ldrb	r3, [r7, #2]
 8005c50:	02db      	lsls	r3, r3, #11
 8005c52:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c56:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c5c:	049b      	lsls	r3, r3, #18
 8005c5e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005c64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c6a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c84:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005c86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d003      	beq.n	8005c96 <USB_HC_Init+0x22a>
 8005c8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10f      	bne.n	8005cb6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cb4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40040000 	.word	0x40040000

08005cc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	@ 0x30
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ce0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8005e5c <USB_HC_StartXfer+0x198>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d12f      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d11c      	bne.n	8005d2a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	7c9b      	ldrb	r3, [r3, #18]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <USB_HC_StartXfer+0x3c>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	7c9b      	ldrb	r3, [r3, #18]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d124      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	799b      	ldrb	r3, [r3, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d120      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	6a3a      	ldr	r2, [r7, #32]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d26:	60d3      	str	r3, [r2, #12]
 8005d28:	e00f      	b.n	8005d4a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	795b      	ldrb	r3, [r3, #5]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fb6b 	bl	800641c <USB_DoPing>
        return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e232      	b.n	80061b0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	799b      	ldrb	r3, [r3, #6]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d158      	bne.n	8005e04 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005d52:	2301      	movs	r3, #1
 8005d54:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	8a92      	ldrh	r2, [r2, #20]
 8005d64:	fb03 f202 	mul.w	r2, r3, r2
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61da      	str	r2, [r3, #28]
 8005d6c:	e07c      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	7c9b      	ldrb	r3, [r3, #18]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d130      	bne.n	8005dd8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	2bbc      	cmp	r3, #188	@ 0xbc
 8005d7c:	d918      	bls.n	8005db0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	8a9b      	ldrh	r3, [r3, #20]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	69da      	ldr	r2, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d003      	beq.n	8005da0 <USB_HC_StartXfer+0xdc>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d103      	bne.n	8005da8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2202      	movs	r2, #2
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e05f      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2201      	movs	r2, #1
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	e05b      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d007      	beq.n	8005dd0 <USB_HC_StartXfer+0x10c>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d003      	beq.n	8005dd0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	e04b      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	60da      	str	r2, [r3, #12]
 8005dd6:	e047      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10d      	bne.n	8005dfa <USB_HC_StartXfer+0x136>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	8a92      	ldrh	r2, [r2, #20]
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d907      	bls.n	8005dfa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	8a92      	ldrh	r2, [r2, #20]
 8005df0:	fb03 f202 	mul.w	r2, r3, r2
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	61da      	str	r2, [r3, #28]
 8005df8:	e036      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	61da      	str	r2, [r3, #28]
 8005e02:	e031      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d018      	beq.n	8005e3e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	8a92      	ldrh	r2, [r2, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	3b01      	subs	r3, #1
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	8a92      	ldrh	r2, [r2, #20]
 8005e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e20:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005e22:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005e24:	8b7b      	ldrh	r3, [r7, #26]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d90b      	bls.n	8005e42 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005e2a:	8b7b      	ldrh	r3, [r7, #26]
 8005e2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	8a92      	ldrh	r2, [r2, #20]
 8005e34:	fb03 f202 	mul.w	r2, r3, r2
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61da      	str	r2, [r3, #28]
 8005e3c:	e001      	b.n	8005e42 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	8a92      	ldrh	r2, [r2, #20]
 8005e50:	fb03 f202 	mul.w	r2, r3, r2
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	61da      	str	r2, [r3, #28]
 8005e58:	e006      	b.n	8005e68 <USB_HC_StartXfer+0x1a4>
 8005e5a:	bf00      	nop
 8005e5c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e72:	04d9      	lsls	r1, r3, #19
 8005e74:	4ba3      	ldr	r3, [pc, #652]	@ (8006104 <USB_HC_StartXfer+0x440>)
 8005e76:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e78:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	7d9b      	ldrb	r3, [r3, #22]
 8005e7e:	075b      	lsls	r3, r3, #29
 8005e80:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	0148      	lsls	r0, r1, #5
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	4401      	add	r1, r0
 8005e8c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e90:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e92:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6999      	ldr	r1, [r3, #24]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	460a      	mov	r2, r1
 8005eac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	6a3a      	ldr	r2, [r7, #32]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ee0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ee4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	7e7b      	ldrb	r3, [r7, #25]
 8005ef6:	075b      	lsls	r3, r3, #29
 8005ef8:	69f9      	ldr	r1, [r7, #28]
 8005efa:	0148      	lsls	r0, r1, #5
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	4401      	add	r1, r0
 8005f00:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	799b      	ldrb	r3, [r3, #6]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 80c3 	bne.w	8006098 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	7c5b      	ldrb	r3, [r3, #17]
 8005f16:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	6a3a      	ldr	r2, [r7, #32]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005f2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005f2e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	79db      	ldrb	r3, [r3, #7]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d123      	bne.n	8005fa0 <USB_HC_StartXfer+0x2dc>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	78db      	ldrb	r3, [r3, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11f      	bne.n	8005fa0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f9e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	7c9b      	ldrb	r3, [r3, #18]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d003      	beq.n	8005fb0 <USB_HC_StartXfer+0x2ec>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	7c9b      	ldrb	r3, [r3, #18]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d117      	bne.n	8005fe0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d113      	bne.n	8005fe0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10f      	bne.n	8005fe0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fde:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	7c9b      	ldrb	r3, [r3, #18]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d162      	bne.n	80060ae <USB_HC_StartXfer+0x3ea>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	78db      	ldrb	r3, [r3, #3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d15e      	bne.n	80060ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d858      	bhi.n	80060ac <USB_HC_StartXfer+0x3e8>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <USB_HC_StartXfer+0x33c>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006011 	.word	0x08006011
 8006004:	08006033 	.word	0x08006033
 8006008:	08006055 	.word	0x08006055
 800600c:	08006077 	.word	0x08006077
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	6a3a      	ldr	r2, [r7, #32]
 8006024:	440a      	add	r2, r1
 8006026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800602a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800602e:	6053      	str	r3, [r2, #4]
          break;
 8006030:	e03d      	b.n	80060ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	440a      	add	r2, r1
 8006048:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800604c:	f043 030e 	orr.w	r3, r3, #14
 8006050:	6053      	str	r3, [r2, #4]
          break;
 8006052:	e02c      	b.n	80060ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006072:	6053      	str	r3, [r2, #4]
          break;
 8006074:	e01b      	b.n	80060ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	440a      	add	r2, r1
 800608c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006090:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006094:	6053      	str	r3, [r2, #4]
          break;
 8006096:	e00a      	b.n	80060ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6053      	str	r3, [r2, #4]
 80060aa:	e000      	b.n	80060ae <USB_HC_StartXfer+0x3ea>
          break;
 80060ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	e003      	b.n	80060e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f4:	461a      	mov	r2, r3
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	e055      	b.n	80061b0 <USB_HC_StartXfer+0x4ec>
 8006104:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d14e      	bne.n	80061ae <USB_HC_StartXfer+0x4ea>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d04a      	beq.n	80061ae <USB_HC_StartXfer+0x4ea>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	79db      	ldrb	r3, [r3, #7]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d146      	bne.n	80061ae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	7c9b      	ldrb	r3, [r3, #18]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d831      	bhi.n	800618c <USB_HC_StartXfer+0x4c8>
 8006128:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <USB_HC_StartXfer+0x46c>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006141 	.word	0x08006141
 8006134:	08006165 	.word	0x08006165
 8006138:	08006141 	.word	0x08006141
 800613c:	08006165 	.word	0x08006165
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	3303      	adds	r3, #3
 8006146:	089b      	lsrs	r3, r3, #2
 8006148:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800614a:	8afa      	ldrh	r2, [r7, #22]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	b29b      	uxth	r3, r3
 8006152:	429a      	cmp	r2, r3
 8006154:	d91c      	bls.n	8006190 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	619a      	str	r2, [r3, #24]
        }
        break;
 8006162:	e015      	b.n	8006190 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	3303      	adds	r3, #3
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800616e:	8afa      	ldrh	r2, [r7, #22]
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	b29b      	uxth	r3, r3
 800617a:	429a      	cmp	r2, r3
 800617c:	d90a      	bls.n	8006194 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	619a      	str	r2, [r3, #24]
        }
        break;
 800618a:	e003      	b.n	8006194 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800618c:	bf00      	nop
 800618e:	e002      	b.n	8006196 <USB_HC_StartXfer+0x4d2>
        break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <USB_HC_StartXfer+0x4d2>
        break;
 8006194:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6999      	ldr	r1, [r3, #24]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	785a      	ldrb	r2, [r3, #1]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2000      	movs	r0, #0
 80061a6:	9000      	str	r0, [sp, #0]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff f9c9 	bl	8005540 <USB_WritePacket>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	@ 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	b29b      	uxth	r3, r3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80061da:	b480      	push	{r7}
 80061dc:	b089      	sub	sp, #36	@ 0x24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0c9b      	lsrs	r3, r3, #18
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	0fdb      	lsrs	r3, r3, #31
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	0fdb      	lsrs	r3, r3, #31
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b20      	cmp	r3, #32
 800623e:	d10d      	bne.n	800625c <USB_HC_Halt+0x82>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <USB_HC_Halt+0x82>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d002      	beq.n	8006258 <USB_HC_Halt+0x7e>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d101      	bne.n	800625c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e0d8      	b.n	800640e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <USB_HC_Halt+0x8e>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d173      	bne.n	8006350 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	440a      	add	r2, r1
 800627e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006286:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d14a      	bne.n	800632a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d133      	bne.n	8006308 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062be:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062de:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ec:	d82e      	bhi.n	800634c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006304:	d0ec      	beq.n	80062e0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006306:	e081      	b.n	800640c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006326:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006328:	e070      	b.n	800640c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006344:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006348:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800634a:	e05f      	b.n	800640c <USB_HC_Halt+0x232>
            break;
 800634c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800634e:	e05d      	b.n	800640c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800636e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d133      	bne.n	80063e8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800639a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800639e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063cc:	d81d      	bhi.n	800640a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e4:	d0ec      	beq.n	80063c0 <USB_HC_Halt+0x1e6>
 80063e6:	e011      	b.n	800640c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006402:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	e000      	b.n	800640c <USB_HC_Halt+0x232>
          break;
 800640a:	bf00      	nop
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3724      	adds	r7, #36	@ 0x24
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006430:	2301      	movs	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	04da      	lsls	r2, r3, #19
 8006438:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <USB_DoPing+0x74>)
 800643a:	4013      	ands	r3, r2
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	440a      	add	r2, r1
 8006444:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006448:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800644c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006464:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800646c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647a:	461a      	mov	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	1ff80000 	.word	0x1ff80000

08006494 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fe ff8c 	bl	80053c6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ae:	2110      	movs	r1, #16
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fe ffe5 	bl	8005480 <USB_FlushTxFifo>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff f80f 	bl	80054e4 <USB_FlushRxFifo>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	e01f      	b.n	8006516 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650a:	461a      	mov	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	3301      	adds	r3, #1
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b0f      	cmp	r3, #15
 800651a:	d9dc      	bls.n	80064d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	e034      	b.n	800658c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006538:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006540:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006548:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006556:	461a      	mov	r2, r3
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006568:	d80c      	bhi.n	8006584 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006580:	d0ec      	beq.n	800655c <USB_StopHost+0xc8>
 8006582:	e000      	b.n	8006586 <USB_StopHost+0xf2>
        break;
 8006584:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	3301      	adds	r3, #1
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	d9c7      	bls.n	8006522 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295
 80065a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fe fefb 	bl	80053a4 <USB_EnableGlobalInt>

  return ret;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065b8:	b590      	push	{r4, r7, lr}
 80065ba:	b089      	sub	sp, #36	@ 0x24
 80065bc:	af04      	add	r7, sp, #16
 80065be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065c0:	2301      	movs	r3, #1
 80065c2:	2202      	movs	r2, #2
 80065c4:	2102      	movs	r1, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fcd7 	bl	8006f7a <USBH_FindInterface>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2bff      	cmp	r3, #255	@ 0xff
 80065d4:	d002      	beq.n	80065dc <USBH_CDC_InterfaceInit+0x24>
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d901      	bls.n	80065e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065dc:	2302      	movs	r3, #2
 80065de:	e13d      	b.n	800685c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fcac 	bl	8006f42 <USBH_SelectInterface>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065f4:	2302      	movs	r3, #2
 80065f6:	e131      	b.n	800685c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80065fe:	2050      	movs	r0, #80	@ 0x50
 8006600:	f005 f856 	bl	800b6b0 <malloc>
 8006604:	4603      	mov	r3, r0
 8006606:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006618:	2302      	movs	r3, #2
 800661a:	e11f      	b.n	800685c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800661c:	2250      	movs	r2, #80	@ 0x50
 800661e:	2100      	movs	r1, #0
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f005 f903 	bl	800b82c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	211a      	movs	r1, #26
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	4413      	add	r3, r2
 8006632:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b25b      	sxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	da15      	bge.n	800666a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	211a      	movs	r1, #26
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800664e:	781a      	ldrb	r2, [r3, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	211a      	movs	r1, #26
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006664:	881a      	ldrh	r2, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 fa1c 	bl	8008aae <USBH_AllocPipe>
 8006676:	4603      	mov	r3, r0
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	7819      	ldrb	r1, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7858      	ldrb	r0, [r3, #1]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	8952      	ldrh	r2, [r2, #10]
 8006696:	9202      	str	r2, [sp, #8]
 8006698:	2203      	movs	r2, #3
 800669a:	9201      	str	r2, [sp, #4]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4623      	mov	r3, r4
 80066a0:	4602      	mov	r2, r0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f002 f9d4 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f004 ff77 	bl	800b5a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	210a      	movs	r1, #10
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fc5c 	bl	8006f7a <USBH_FindInterface>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	2bff      	cmp	r3, #255	@ 0xff
 80066ca:	d002      	beq.n	80066d2 <USBH_CDC_InterfaceInit+0x11a>
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d901      	bls.n	80066d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	e0c2      	b.n	800685c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	211a      	movs	r1, #26
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da16      	bge.n	800671c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	211a      	movs	r1, #26
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	211a      	movs	r1, #26
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006714:	881a      	ldrh	r2, [r3, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	835a      	strh	r2, [r3, #26]
 800671a:	e015      	b.n	8006748 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	211a      	movs	r1, #26
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	211a      	movs	r1, #26
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	4413      	add	r3, r2
 800673e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006742:	881a      	ldrh	r2, [r3, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	211a      	movs	r1, #26
 800674e:	fb01 f303 	mul.w	r3, r1, r3
 8006752:	4413      	add	r3, r2
 8006754:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b25b      	sxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	da16      	bge.n	800678e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	211a      	movs	r1, #26
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006770:	781a      	ldrb	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	211a      	movs	r1, #26
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	4413      	add	r3, r2
 8006782:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006786:	881a      	ldrh	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	835a      	strh	r2, [r3, #26]
 800678c:	e015      	b.n	80067ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	211a      	movs	r1, #26
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	211a      	movs	r1, #26
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80067b4:	881a      	ldrh	r2, [r3, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	7b9b      	ldrb	r3, [r3, #14]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 f974 	bl	8008aae <USBH_AllocPipe>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	7bdb      	ldrb	r3, [r3, #15]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f002 f96a 	bl	8008aae <USBH_AllocPipe>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	7b59      	ldrb	r1, [r3, #13]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7b98      	ldrb	r0, [r3, #14]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	8b12      	ldrh	r2, [r2, #24]
 80067fa:	9202      	str	r2, [sp, #8]
 80067fc:	2202      	movs	r2, #2
 80067fe:	9201      	str	r2, [sp, #4]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4623      	mov	r3, r4
 8006804:	4602      	mov	r2, r0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 f922 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	7b19      	ldrb	r1, [r3, #12]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7bd8      	ldrb	r0, [r3, #15]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	8b52      	ldrh	r2, [r2, #26]
 8006824:	9202      	str	r2, [sp, #8]
 8006826:	2202      	movs	r2, #2
 8006828:	9201      	str	r2, [sp, #4]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	4623      	mov	r3, r4
 800682e:	4602      	mov	r2, r0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 f90d 	bl	8008a50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	7b5b      	ldrb	r3, [r3, #13]
 8006842:	2200      	movs	r2, #0
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f004 feac 	bl	800b5a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	7b1b      	ldrb	r3, [r3, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f004 fea5 	bl	800b5a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	bd90      	pop	{r4, r7, pc}

08006864 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 f902 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 f92d 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	7b1b      	ldrb	r3, [r3, #12]
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f002 f8ef 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	7b1b      	ldrb	r3, [r3, #12]
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f002 f91a 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	7b5b      	ldrb	r3, [r3, #13]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	7b5b      	ldrb	r3, [r3, #13]
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 f8dc 	bl	8008a8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7b5b      	ldrb	r3, [r3, #13]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 f907 	bl	8008af0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f004 fedf 	bl	800b6c0 <free>
    phost->pActiveClass->pData = 0U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006908:	2200      	movs	r2, #0
 800690a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3340      	adds	r3, #64	@ 0x40
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8b1 	bl	8006a96 <GetLineCoding>
 8006934:	4603      	mov	r3, r0
 8006936:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006938:	7afb      	ldrb	r3, [r7, #11]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006944:	2102      	movs	r1, #2
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800694a:	7afb      	ldrb	r3, [r7, #11]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800695c:	2301      	movs	r3, #1
 800695e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006974:	2b04      	cmp	r3, #4
 8006976:	d877      	bhi.n	8006a68 <USBH_CDC_Process+0x114>
 8006978:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <USBH_CDC_Process+0x2c>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006995 	.word	0x08006995
 8006984:	0800699b 	.word	0x0800699b
 8006988:	080069cb 	.word	0x080069cb
 800698c:	08006a3f 	.word	0x08006a3f
 8006990:	08006a4d 	.word	0x08006a4d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
      break;
 8006998:	e06d      	b.n	8006a76 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f897 	bl	8006ad4 <SetLineCoding>
 80069a6:	4603      	mov	r3, r0
 80069a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069b8:	e058      	b.n	8006a6c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d055      	beq.n	8006a6c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2204      	movs	r2, #4
 80069c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80069c8:	e050      	b.n	8006a6c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	3340      	adds	r3, #64	@ 0x40
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f860 	bl	8006a96 <GetLineCoding>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d126      	bne.n	8006a2e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069f2:	791b      	ldrb	r3, [r3, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d13b      	bne.n	8006a70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a02:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d133      	bne.n	8006a70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a12:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d12b      	bne.n	8006a70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a20:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d124      	bne.n	8006a70 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f982 	bl	8006d30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a2c:	e020      	b.n	8006a70 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d01d      	beq.n	8006a70 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2204      	movs	r2, #4
 8006a38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006a3c:	e018      	b.n	8006a70 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f867 	bl	8006b12 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8f6 	bl	8006c36 <CDC_ProcessReception>
      break;
 8006a4a:	e014      	b.n	8006a76 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 f988 	bl	8007d64 <USBH_ClrFeature>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006a66:	e005      	b.n	8006a74 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a68:	bf00      	nop
 8006a6a:	e004      	b.n	8006a76 <USBH_CDC_Process+0x122>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e002      	b.n	8006a76 <USBH_CDC_Process+0x122>
      break;
 8006a70:	bf00      	nop
 8006a72:	e000      	b.n	8006a76 <USBH_CDC_Process+0x122>
      break;
 8006a74:	bf00      	nop

  }

  return status;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	22a1      	movs	r2, #161	@ 0xa1
 8006aa4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2221      	movs	r2, #33	@ 0x21
 8006aaa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2207      	movs	r2, #7
 8006abc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fc82 	bl	80083ce <USBH_CtlReq>
 8006aca:	4603      	mov	r3, r0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2221      	movs	r2, #33	@ 0x21
 8006ae2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2207      	movs	r2, #7
 8006afa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2207      	movs	r2, #7
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fc63 	bl	80083ce <USBH_CtlReq>
 8006b08:	4603      	mov	r3, r0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af02      	add	r7, sp, #8
 8006b18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d002      	beq.n	8006b38 <CDC_ProcessTransmission+0x26>
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d023      	beq.n	8006b7e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b36:	e07a      	b.n	8006c2e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	8b12      	ldrh	r2, [r2, #24]
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d90b      	bls.n	8006b5c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	69d9      	ldr	r1, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8b1a      	ldrh	r2, [r3, #24]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	7b5b      	ldrb	r3, [r3, #13]
 8006b50:	2001      	movs	r0, #1
 8006b52:	9000      	str	r0, [sp, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 ff38 	bl	80089ca <USBH_BulkSendData>
 8006b5a:	e00b      	b.n	8006b74 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	7b5b      	ldrb	r3, [r3, #13]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	9000      	str	r0, [sp, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 ff2b 	bl	80089ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006b7c:	e057      	b.n	8006c2e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7b5b      	ldrb	r3, [r3, #13]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f004 fce3 	bl	800b550 <USBH_LL_GetURBState>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d136      	bne.n	8006c02 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	8b12      	ldrh	r2, [r2, #24]
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d90e      	bls.n	8006bbe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	8b12      	ldrh	r2, [r2, #24]
 8006ba8:	1a9a      	subs	r2, r3, r2
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	8b12      	ldrh	r2, [r2, #24]
 8006bb6:	441a      	add	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	61da      	str	r2, [r3, #28]
 8006bbc:	e002      	b.n	8006bc4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006bd4:	e006      	b.n	8006be4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f892 	bl	8006d08 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2204      	movs	r2, #4
 8006be8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f002 f874 	bl	8008ce8 <osMessagePut>
      break;
 8006c00:	e014      	b.n	8006c2c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d111      	bne.n	8006c2c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2204      	movs	r2, #4
 8006c14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006c24:	2200      	movs	r2, #0
 8006c26:	4619      	mov	r1, r3
 8006c28:	f002 f85e 	bl	8008ce8 <osMessagePut>
      break;
 8006c2c:	bf00      	nop
  }
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d002      	beq.n	8006c5c <CDC_ProcessReception+0x26>
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d00e      	beq.n	8006c78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c5a:	e051      	b.n	8006d00 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6a19      	ldr	r1, [r3, #32]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	8b5a      	ldrh	r2, [r3, #26]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fed3 	bl	8008a14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2204      	movs	r2, #4
 8006c72:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006c76:	e043      	b.n	8006d00 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f004 fc66 	bl	800b550 <USBH_LL_GetURBState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d137      	bne.n	8006cfe <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	7b1b      	ldrb	r3, [r3, #12]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f004 fbc9 	bl	800b42c <USBH_LL_GetLastXferSize>
 8006c9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d016      	beq.n	8006cd4 <CDC_ProcessReception+0x9e>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	8b5b      	ldrh	r3, [r3, #26]
 8006caa:	461a      	mov	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d110      	bne.n	8006cd4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006cd2:	e006      	b.n	8006ce2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f81d 	bl	8006d1c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f001 fff5 	bl	8008ce8 <osMessagePut>
      break;
 8006cfe:	bf00      	nop
  }
}
 8006d00:	bf00      	nop
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006d44:	b5b0      	push	{r4, r5, r7, lr}
 8006d46:	b090      	sub	sp, #64	@ 0x40
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e04d      	b.n	8006df8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	79fa      	ldrb	r2, [r7, #7]
 8006d60:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f847 	bl	8006e08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006da8:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <USBH_Init+0xbc>)
 8006daa:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8006dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006db4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 ff6b 	bl	8008c96 <osMessageCreate>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <USBH_Init+0xc0>)
 8006dca:	f107 0414 	add.w	r4, r7, #20
 8006dce:	461d      	mov	r5, r3
 8006dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006dd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006ddc:	f107 0314 	add.w	r3, r7, #20
 8006de0:	68f9      	ldr	r1, [r7, #12]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fef7 	bl	8008bd6 <osThreadCreate>
 8006de8:	4602      	mov	r2, r0
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f004 fa67 	bl	800b2c4 <USBH_LL_Init>

  return USBH_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3740      	adds	r7, #64	@ 0x40
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8006e00:	0800b9a8 	.word	0x0800b9a8
 8006e04:	0800b9c4 	.word	0x0800b9c4

08006e08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e009      	b.n	8006e2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	33e0      	adds	r3, #224	@ 0xe0
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b0f      	cmp	r3, #15
 8006e32:	d9f2      	bls.n	8006e1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e009      	b.n	8006e4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e44:	2200      	movs	r2, #0
 8006e46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e54:	d3f1      	bcc.n	8006e3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2240      	movs	r2, #64	@ 0x40
 8006e7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	331c      	adds	r3, #28
 8006ea6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f004 fcbd 	bl	800b82c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f004 fcb4 	bl	800b82c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006eca:	2212      	movs	r2, #18
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f004 fcac 	bl	800b82c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006eda:	223e      	movs	r2, #62	@ 0x3e
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f004 fca4 	bl	800b82c <memset>

  return USBH_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d016      	beq.n	8006f30 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10e      	bne.n	8006f2a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f12:	1c59      	adds	r1, r3, #1
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	33de      	adds	r3, #222	@ 0xde
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e004      	b.n	8006f34 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	73fb      	strb	r3, [r7, #15]
 8006f2e:	e001      	b.n	8006f34 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f30:	2302      	movs	r3, #2
 8006f32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d204      	bcs.n	8006f68 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006f66:	e001      	b.n	8006f6c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	4608      	mov	r0, r1
 8006f84:	4611      	mov	r1, r2
 8006f86:	461a      	mov	r2, r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	70fb      	strb	r3, [r7, #3]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70bb      	strb	r3, [r7, #2]
 8006f90:	4613      	mov	r3, r2
 8006f92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006fa2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fa4:	e025      	b.n	8006ff2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	221a      	movs	r2, #26
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	3308      	adds	r3, #8
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	795b      	ldrb	r3, [r3, #5]
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d002      	beq.n	8006fc8 <USBH_FindInterface+0x4e>
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	2bff      	cmp	r3, #255	@ 0xff
 8006fc6:	d111      	bne.n	8006fec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fcc:	78ba      	ldrb	r2, [r7, #2]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d002      	beq.n	8006fd8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fd2:	78bb      	ldrb	r3, [r7, #2]
 8006fd4:	2bff      	cmp	r3, #255	@ 0xff
 8006fd6:	d109      	bne.n	8006fec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fdc:	787a      	ldrb	r2, [r7, #1]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d002      	beq.n	8006fe8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fe2:	787b      	ldrb	r3, [r7, #1]
 8006fe4:	2bff      	cmp	r3, #255	@ 0xff
 8006fe6:	d101      	bne.n	8006fec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	e006      	b.n	8006ffa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d9d6      	bls.n	8006fa6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ff8:	23ff      	movs	r3, #255	@ 0xff
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f004 f994 	bl	800b33c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007014:	2101      	movs	r1, #1
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f004 faad 	bl	800b576 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af04      	add	r7, sp, #16
 800702e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007030:	2302      	movs	r3, #2
 8007032:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	d102      	bne.n	800704a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2203      	movs	r2, #3
 8007048:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b0b      	cmp	r3, #11
 8007052:	f200 8244 	bhi.w	80074de <USBH_Process+0x4b6>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <USBH_Process+0x34>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	0800708d 	.word	0x0800708d
 8007060:	080070db 	.word	0x080070db
 8007064:	0800715f 	.word	0x0800715f
 8007068:	0800745d 	.word	0x0800745d
 800706c:	080074df 	.word	0x080074df
 8007070:	0800721b 	.word	0x0800721b
 8007074:	080073e7 	.word	0x080073e7
 8007078:	0800726d 	.word	0x0800726d
 800707c:	080072a9 	.word	0x080072a9
 8007080:	080072e1 	.word	0x080072e1
 8007084:	0800733f 	.word	0x0800733f
 8007088:	08007445 	.word	0x08007445
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8224 	beq.w	80074e2 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80070a0:	20c8      	movs	r0, #200	@ 0xc8
 80070a2:	f004 fab2 	bl	800b60a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f004 f9a5 	bl	800b3f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80070d0:	2200      	movs	r2, #0
 80070d2:	4619      	mov	r1, r3
 80070d4:	f001 fe08 	bl	8008ce8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070d8:	e203      	b.n	80074e2 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d107      	bne.n	80070f4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e025      	b.n	8007140 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80070fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070fe:	d914      	bls.n	800712a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007106:	3301      	adds	r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007116:	2b03      	cmp	r3, #3
 8007118:	d903      	bls.n	8007122 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	220d      	movs	r2, #13
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e00e      	b.n	8007140 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e00a      	b.n	8007140 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007130:	f103 020a 	add.w	r2, r3, #10
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800713a:	200a      	movs	r0, #10
 800713c:	f004 fa65 	bl	800b60a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007154:	2200      	movs	r2, #0
 8007156:	4619      	mov	r1, r3
 8007158:	f001 fdc6 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800715c:	e1c8      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800716e:	2104      	movs	r1, #4
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007174:	2064      	movs	r0, #100	@ 0x64
 8007176:	f004 fa48 	bl	800b60a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f004 f914 	bl	800b3a8 <USBH_LL_GetSpeed>
 8007180:	4603      	mov	r3, r0
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2205      	movs	r2, #5
 800718e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007190:	2100      	movs	r1, #0
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fc8b 	bl	8008aae <USBH_AllocPipe>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fc83 	bl	8008aae <USBH_AllocPipe>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7919      	ldrb	r1, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80071c4:	9202      	str	r2, [sp, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	9201      	str	r2, [sp, #4]
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	4603      	mov	r3, r0
 80071ce:	2280      	movs	r2, #128	@ 0x80
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fc3d 	bl	8008a50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7959      	ldrb	r1, [r3, #5]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071ea:	9202      	str	r2, [sp, #8]
 80071ec:	2200      	movs	r2, #0
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	4603      	mov	r3, r0
 80071f4:	2200      	movs	r2, #0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fc2a 	bl	8008a50 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007210:	2200      	movs	r2, #0
 8007212:	4619      	mov	r1, r3
 8007214:	f001 fd68 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007218:	e16a      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f96e 	bl	80074fc <USBH_HandleEnum>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 815c 	bne.w	80074e6 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800723c:	2b01      	cmp	r3, #1
 800723e:	d103      	bne.n	8007248 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2208      	movs	r2, #8
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e002      	b.n	800724e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2207      	movs	r2, #7
 800724c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2205      	movs	r2, #5
 8007252:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007262:	2200      	movs	r2, #0
 8007264:	4619      	mov	r1, r3
 8007266:	f001 fd3f 	bl	8008ce8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800726a:	e13c      	b.n	80074e6 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8139 	beq.w	80074ea <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800727e:	2101      	movs	r1, #1
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2208      	movs	r2, #8
 8007288:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2205      	movs	r2, #5
 800728e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800729e:	2200      	movs	r2, #0
 80072a0:	4619      	mov	r1, r3
 80072a2:	f001 fd21 	bl	8008ce8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072a6:	e120      	b.n	80074ea <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fd10 	bl	8007cd6 <USBH_SetCfg>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2209      	movs	r2, #9
 80072c0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80072d6:	2200      	movs	r2, #0
 80072d8:	4619      	mov	r1, r3
 80072da:	f001 fd05 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072de:	e107      	b.n	80074f0 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d015      	beq.n	800731a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd13 	bl	8007d1c <USBH_SetFeature>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d103      	bne.n	800730a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	220a      	movs	r2, #10
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e00a      	b.n	8007320 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d106      	bne.n	8007320 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	220a      	movs	r2, #10
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e002      	b.n	8007320 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	220a      	movs	r2, #10
 800731e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007334:	2200      	movs	r2, #0
 8007336:	4619      	mov	r1, r3
 8007338:	f001 fcd6 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800733c:	e0d8      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007344:	2b00      	cmp	r3, #0
 8007346:	d03f      	beq.n	80073c8 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
 8007354:	e016      	b.n	8007384 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007356:	7bfa      	ldrb	r2, [r7, #15]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	32de      	adds	r2, #222	@ 0xde
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	791a      	ldrb	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007368:	429a      	cmp	r2, r3
 800736a:	d108      	bne.n	800737e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800736c:	7bfa      	ldrb	r2, [r7, #15]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32de      	adds	r2, #222	@ 0xde
 8007372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800737c:	e005      	b.n	800738a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	3301      	adds	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0e5      	beq.n	8007356 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d016      	beq.n	80073c2 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2206      	movs	r2, #6
 80073aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073b2:	2103      	movs	r1, #3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	e006      	b.n	80073c8 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220d      	movs	r2, #13
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e002      	b.n	80073c8 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	220d      	movs	r2, #13
 80073c6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2205      	movs	r2, #5
 80073cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80073dc:	2200      	movs	r2, #0
 80073de:	4619      	mov	r1, r3
 80073e0:	f001 fc82 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e4:	e084      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220b      	movs	r2, #11
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e00a      	b.n	8007426 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d106      	bne.n	8007426 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220d      	movs	r2, #13
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e002      	b.n	8007426 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	220d      	movs	r2, #13
 8007424:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2205      	movs	r2, #5
 800742a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800743a:	2200      	movs	r2, #0
 800743c:	4619      	mov	r1, r3
 800743e:	f001 fc53 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007442:	e055      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d04f      	beq.n	80074ee <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      }
      break;
 800745a:	e048      	b.n	80074ee <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fccf 	bl	8006e08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007498:	2105      	movs	r1, #5
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fda7 	bl	8007006 <USBH_Start>
 80074b8:	e002      	b.n	80074c0 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f003 ff3e 	bl	800b33c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80074d4:	2200      	movs	r2, #0
 80074d6:	4619      	mov	r1, r3
 80074d8:	f001 fc06 	bl	8008ce8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074dc:	e008      	b.n	80074f0 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80074de:	bf00      	nop
 80074e0:	e006      	b.n	80074f0 <USBH_Process+0x4c8>
      break;
 80074e2:	bf00      	nop
 80074e4:	e004      	b.n	80074f0 <USBH_Process+0x4c8>
      break;
 80074e6:	bf00      	nop
 80074e8:	e002      	b.n	80074f0 <USBH_Process+0x4c8>
    break;
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <USBH_Process+0x4c8>
      break;
 80074ee:	bf00      	nop
  }
  return USBH_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop

080074fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af04      	add	r7, sp, #16
 8007502:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007508:	2301      	movs	r3, #1
 800750a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b07      	cmp	r3, #7
 8007512:	f200 8204 	bhi.w	800791e <USBH_HandleEnum+0x422>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <USBH_HandleEnum+0x20>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	0800753d 	.word	0x0800753d
 8007520:	080075f7 	.word	0x080075f7
 8007524:	08007661 	.word	0x08007661
 8007528:	080076eb 	.word	0x080076eb
 800752c:	08007755 	.word	0x08007755
 8007530:	080077c5 	.word	0x080077c5
 8007534:	08007861 	.word	0x08007861
 8007538:	080078df 	.word	0x080078df
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800753c:	2108      	movs	r1, #8
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fae6 	bl	8007b10 <USBH_Get_DevDesc>
 8007544:	4603      	mov	r3, r0
 8007546:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d12e      	bne.n	80075ac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7919      	ldrb	r1, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007572:	9202      	str	r2, [sp, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4603      	mov	r3, r0
 800757c:	2280      	movs	r2, #128	@ 0x80
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fa66 	bl	8008a50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7959      	ldrb	r1, [r3, #5]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007598:	9202      	str	r2, [sp, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	9201      	str	r2, [sp, #4]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	2200      	movs	r2, #0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa53 	bl	8008a50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075aa:	e1ba      	b.n	8007922 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	f040 81b7 	bne.w	8007922 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d903      	bls.n	80075d6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	220d      	movs	r2, #13
 80075d2:	701a      	strb	r2, [r3, #0]
      break;
 80075d4:	e1a5      	b.n	8007922 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	795b      	ldrb	r3, [r3, #5]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fa87 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	791b      	ldrb	r3, [r3, #4]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fa81 	bl	8008af0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
      break;
 80075f4:	e195      	b.n	8007922 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075f6:	2112      	movs	r1, #18
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fa89 	bl	8007b10 <USBH_Get_DevDesc>
 80075fe:	4603      	mov	r3, r0
 8007600:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d103      	bne.n	8007610 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800760e:	e18a      	b.n	8007926 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	2b03      	cmp	r3, #3
 8007614:	f040 8187 	bne.w	8007926 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800761e:	3301      	adds	r3, #1
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800762e:	2b03      	cmp	r3, #3
 8007630:	d903      	bls.n	800763a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	220d      	movs	r2, #13
 8007636:	701a      	strb	r2, [r3, #0]
      break;
 8007638:	e175      	b.n	8007926 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	795b      	ldrb	r3, [r3, #5]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fa55 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	791b      	ldrb	r3, [r3, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fa4f 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
      break;
 800765e:	e162      	b.n	8007926 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007660:	2101      	movs	r1, #1
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb13 	bl	8007c8e <USBH_SetAddress>
 8007668:	4603      	mov	r3, r0
 800766a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d130      	bne.n	80076d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007672:	2002      	movs	r0, #2
 8007674:	f003 ffc9 	bl	800b60a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2203      	movs	r2, #3
 8007684:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7919      	ldrb	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	9201      	str	r2, [sp, #4]
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	4603      	mov	r3, r0
 80076a4:	2280      	movs	r2, #128	@ 0x80
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 f9d2 	bl	8008a50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7959      	ldrb	r1, [r3, #5]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80076c0:	9202      	str	r2, [sp, #8]
 80076c2:	2200      	movs	r2, #0
 80076c4:	9201      	str	r2, [sp, #4]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4603      	mov	r3, r0
 80076ca:	2200      	movs	r2, #0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 f9bf 	bl	8008a50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076d2:	e12a      	b.n	800792a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	f040 8127 	bne.w	800792a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	220d      	movs	r2, #13
 80076e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	705a      	strb	r2, [r3, #1]
      break;
 80076e8:	e11f      	b.n	800792a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076ea:	2109      	movs	r1, #9
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa3b 	bl	8007b68 <USBH_Get_CfgDesc>
 80076f2:	4603      	mov	r3, r0
 80076f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2204      	movs	r2, #4
 8007700:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007702:	e114      	b.n	800792e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b03      	cmp	r3, #3
 8007708:	f040 8111 	bne.w	800792e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007712:	3301      	adds	r3, #1
 8007714:	b2da      	uxtb	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007722:	2b03      	cmp	r3, #3
 8007724:	d903      	bls.n	800772e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	220d      	movs	r2, #13
 800772a:	701a      	strb	r2, [r3, #0]
      break;
 800772c:	e0ff      	b.n	800792e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	795b      	ldrb	r3, [r3, #5]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 f9db 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	791b      	ldrb	r3, [r3, #4]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f9d5 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
      break;
 8007752:	e0ec      	b.n	800792e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa03 	bl	8007b68 <USBH_Get_CfgDesc>
 8007762:	4603      	mov	r3, r0
 8007764:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2205      	movs	r2, #5
 8007770:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007772:	e0de      	b.n	8007932 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b03      	cmp	r3, #3
 8007778:	f040 80db 	bne.w	8007932 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007782:	3301      	adds	r3, #1
 8007784:	b2da      	uxtb	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007792:	2b03      	cmp	r3, #3
 8007794:	d903      	bls.n	800779e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	220d      	movs	r2, #13
 800779a:	701a      	strb	r2, [r3, #0]
      break;
 800779c:	e0c9      	b.n	8007932 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f9a3 	bl	8008af0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 f99d 	bl	8008af0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e0b6      	b.n	8007932 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d036      	beq.n	800783c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80077da:	23ff      	movs	r3, #255	@ 0xff
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9ed 	bl	8007bbc <USBH_Get_StringDesc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d111      	bne.n	8007810 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2206      	movs	r2, #6
 80077f0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2205      	movs	r2, #5
 80077f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007806:	2200      	movs	r2, #0
 8007808:	4619      	mov	r1, r3
 800780a:	f001 fa6d 	bl	8008ce8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800780e:	e092      	b.n	8007936 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	2b03      	cmp	r3, #3
 8007814:	f040 808f 	bne.w	8007936 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2206      	movs	r2, #6
 800781c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2205      	movs	r2, #5
 8007822:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007832:	2200      	movs	r2, #0
 8007834:	4619      	mov	r1, r3
 8007836:	f001 fa57 	bl	8008ce8 <osMessagePut>
      break;
 800783a:	e07c      	b.n	8007936 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2206      	movs	r2, #6
 8007840:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2205      	movs	r2, #5
 8007846:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007856:	2200      	movs	r2, #0
 8007858:	4619      	mov	r1, r3
 800785a:	f001 fa45 	bl	8008ce8 <osMessagePut>
      break;
 800785e:	e06a      	b.n	8007936 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007866:	2b00      	cmp	r3, #0
 8007868:	d027      	beq.n	80078ba <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007876:	23ff      	movs	r3, #255	@ 0xff
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f99f 	bl	8007bbc <USBH_Get_StringDesc>
 800787e:	4603      	mov	r3, r0
 8007880:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2207      	movs	r2, #7
 800788c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800788e:	e054      	b.n	800793a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d151      	bne.n	800793a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2207      	movs	r2, #7
 800789a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2205      	movs	r2, #5
 80078a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80078b0:	2200      	movs	r2, #0
 80078b2:	4619      	mov	r1, r3
 80078b4:	f001 fa18 	bl	8008ce8 <osMessagePut>
      break;
 80078b8:	e03f      	b.n	800793a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2207      	movs	r2, #7
 80078be:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2205      	movs	r2, #5
 80078c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80078d4:	2200      	movs	r2, #0
 80078d6:	4619      	mov	r1, r3
 80078d8:	f001 fa06 	bl	8008ce8 <osMessagePut>
      break;
 80078dc:	e02d      	b.n	800793a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d017      	beq.n	8007918 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078f4:	23ff      	movs	r3, #255	@ 0xff
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f960 	bl	8007bbc <USBH_Get_StringDesc>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800790a:	e018      	b.n	800793e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	2b03      	cmp	r3, #3
 8007910:	d115      	bne.n	800793e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]
      break;
 8007916:	e012      	b.n	800793e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
      break;
 800791c:	e00f      	b.n	800793e <USBH_HandleEnum+0x442>

    default:
      break;
 800791e:	bf00      	nop
 8007920:	e00e      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 8007922:	bf00      	nop
 8007924:	e00c      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 8007926:	bf00      	nop
 8007928:	e00a      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 800792a:	bf00      	nop
 800792c:	e008      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 800792e:	bf00      	nop
 8007930:	e006      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 8007932:	bf00      	nop
 8007934:	e004      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 8007936:	bf00      	nop
 8007938:	e002      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <USBH_HandleEnum+0x444>
      break;
 800793e:	bf00      	nop
  }
  return Status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop

0800794c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f804 	bl	800798e <USBH_HandleSof>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b0b      	cmp	r3, #11
 800799e:	d10a      	bne.n	80079b6 <USBH_HandleSof+0x28>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
  }
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80079e2:	2200      	movs	r2, #0
 80079e4:	4619      	mov	r1, r3
 80079e6:	f001 f97f 	bl	8008ce8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079ea:	bf00      	nop
}
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007a02:	bf00      	nop
}
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007a42:	2200      	movs	r2, #0
 8007a44:	4619      	mov	r1, r3
 8007a46:	f001 f94f 	bl	8008ce8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f003 fc7c 	bl	800b372 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f835 	bl	8008af0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	795b      	ldrb	r3, [r3, #5]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f82f 	bl	8008af0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f001 f91d 	bl	8008ce8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 f94a 	bl	8008d68 <osMessageGet>
    if (event.status == osEventMessage)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d1f2      	bne.n	8007ac0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff faa4 	bl	8007028 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007ae0:	e7ee      	b.n	8007ac0 <USBH_Process_OS+0x8>

08007ae2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007afe:	2200      	movs	r2, #0
 8007b00:	4619      	mov	r1, r3
 8007b02:	f001 f8f1 	bl	8008ce8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007b1c:	887b      	ldrh	r3, [r7, #2]
 8007b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b22:	d901      	bls.n	8007b28 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e01b      	b.n	8007b60 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4613      	mov	r3, r2
 8007b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f872 	bl	8007c24 <USBH_GetDescriptor>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b50:	887a      	ldrh	r2, [r7, #2]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f929 	bl	8007dac <USBH_ParseDevDesc>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	331c      	adds	r3, #28
 8007b78:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007b7a:	887b      	ldrh	r3, [r7, #2]
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b80:	d901      	bls.n	8007b86 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e016      	b.n	8007bb4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b86:	887b      	ldrh	r3, [r7, #2]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b90:	2100      	movs	r1, #0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f846 	bl	8007c24 <USBH_GetDescriptor>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d107      	bne.n	8007bb2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ba2:	887b      	ldrh	r3, [r7, #2]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f9af 	bl	8007f0c <USBH_ParseCfgDesc>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	460b      	mov	r3, r1
 8007bca:	72fb      	strb	r3, [r7, #11]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd6:	d802      	bhi.n	8007bde <USBH_Get_StringDesc+0x22>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e01c      	b.n	8007c1c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007bea:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007bf2:	893b      	ldrh	r3, [r7, #8]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f812 	bl	8007c24 <USBH_GetDescriptor>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c10:	893a      	ldrh	r2, [r7, #8]
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fb8d 	bl	8008334 <USBH_ParseStringDesc>
  }

  return status;
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	72fb      	strb	r3, [r7, #11]
 8007c32:	4613      	mov	r3, r2
 8007c34:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d11c      	bne.n	8007c78 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2206      	movs	r2, #6
 8007c4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	893a      	ldrh	r2, [r7, #8]
 8007c54:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c56:	893b      	ldrh	r3, [r7, #8]
 8007c58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c60:	d104      	bne.n	8007c6c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f240 4209 	movw	r2, #1033	@ 0x409
 8007c68:	829a      	strh	r2, [r3, #20]
 8007c6a:	e002      	b.n	8007c72 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8b3a      	ldrh	r2, [r7, #24]
 8007c76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c78:	8b3b      	ldrh	r3, [r7, #24]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fba5 	bl	80083ce <USBH_CtlReq>
 8007c84:	4603      	mov	r3, r0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	789b      	ldrb	r3, [r3, #2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d10f      	bne.n	8007cc2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2205      	movs	r2, #5
 8007cac:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb81 	bl	80083ce <USBH_CtlReq>
 8007ccc:	4603      	mov	r3, r0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d10e      	bne.n	8007d08 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2209      	movs	r2, #9
 8007cf4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	887a      	ldrh	r2, [r7, #2]
 8007cfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb5e 	bl	80083ce <USBH_CtlReq>
 8007d12:	4603      	mov	r3, r0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	789b      	ldrb	r3, [r3, #2]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2203      	movs	r2, #3
 8007d3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fb3a 	bl	80083ce <USBH_CtlReq>
 8007d5a:	4603      	mov	r3, r0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	789b      	ldrb	r3, [r3, #2]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d10f      	bne.n	8007d98 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb16 	bl	80083ce <USBH_CtlReq>
 8007da2:	4603      	mov	r3, r0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007dc0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e094      	b.n	8007efa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	785a      	ldrb	r2, [r3, #1]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3302      	adds	r3, #2
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	3303      	adds	r3, #3
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	791a      	ldrb	r2, [r3, #4]
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	795a      	ldrb	r2, [r3, #5]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	799a      	ldrb	r2, [r3, #6]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	79da      	ldrb	r2, [r3, #7]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d11b      	bne.n	8007e66 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	79db      	ldrb	r3, [r3, #7]
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	dc0f      	bgt.n	8007e56 <USBH_ParseDevDesc+0xaa>
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	db0f      	blt.n	8007e5a <USBH_ParseDevDesc+0xae>
 8007e3a:	3b08      	subs	r3, #8
 8007e3c:	4a32      	ldr	r2, [pc, #200]	@ (8007f08 <USBH_ParseDevDesc+0x15c>)
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <USBH_ParseDevDesc+0xb6>
 8007e54:	e001      	b.n	8007e5a <USBH_ParseDevDesc+0xae>
 8007e56:	2b40      	cmp	r3, #64	@ 0x40
 8007e58:	d003      	beq.n	8007e62 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	71da      	strb	r2, [r3, #7]
        break;
 8007e60:	e000      	b.n	8007e64 <USBH_ParseDevDesc+0xb8>
        break;
 8007e62:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007e64:	e00e      	b.n	8007e84 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d107      	bne.n	8007e80 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	79db      	ldrb	r3, [r3, #7]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d005      	beq.n	8007e84 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2208      	movs	r2, #8
 8007e7c:	71da      	strb	r2, [r3, #7]
 8007e7e:	e001      	b.n	8007e84 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007e80:	2303      	movs	r3, #3
 8007e82:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007e84:	88fb      	ldrh	r3, [r7, #6]
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d936      	bls.n	8007ef8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3309      	adds	r3, #9
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	330a      	adds	r3, #10
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	330b      	adds	r3, #11
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	021b      	lsls	r3, r3, #8
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	330d      	adds	r3, #13
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	7b9a      	ldrb	r2, [r3, #14]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	7bda      	ldrb	r2, [r3, #15]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	7c1a      	ldrb	r2, [r3, #16]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	7c5a      	ldrb	r2, [r3, #17]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	01000101 	.word	0x01000101

08007f0c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	@ 0x30
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f20:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e0da      	b.n	80080f4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d002      	beq.n	8007f50 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4c:	2209      	movs	r2, #9
 8007f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	785a      	ldrb	r2, [r3, #1]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3302      	adds	r3, #2
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3303      	adds	r3, #3
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4313      	orrs	r3, r2
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7a:	bf28      	it	cs
 8007f7c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	791a      	ldrb	r2, [r3, #4]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	795a      	ldrb	r2, [r3, #5]
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	799a      	ldrb	r2, [r3, #6]
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	79da      	ldrb	r2, [r3, #7]
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	7a1a      	ldrb	r2, [r3, #8]
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	f240 809d 	bls.w	80080f0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fb6:	2309      	movs	r3, #9
 8007fb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fbe:	e081      	b.n	80080c4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fc0:	f107 0316 	add.w	r3, r7, #22
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fc8:	f000 f9e7 	bl	800839a <USBH_GetNextDesc>
 8007fcc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d176      	bne.n	80080c4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d002      	beq.n	8007fe4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	2209      	movs	r2, #9
 8007fe2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe8:	221a      	movs	r2, #26
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	3308      	adds	r3, #8
 8007ff0:	6a3a      	ldr	r2, [r7, #32]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ffa:	69f8      	ldr	r0, [r7, #28]
 8007ffc:	f000 f87e 	bl	80080fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800800a:	e043      	b.n	8008094 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800800c:	f107 0316 	add.w	r3, r7, #22
 8008010:	4619      	mov	r1, r3
 8008012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008014:	f000 f9c1 	bl	800839a <USBH_GetNextDesc>
 8008018:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800801a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	2b05      	cmp	r3, #5
 8008020:	d138      	bne.n	8008094 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	795b      	ldrb	r3, [r3, #5]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d113      	bne.n	8008052 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800802e:	2b02      	cmp	r3, #2
 8008030:	d003      	beq.n	800803a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	799b      	ldrb	r3, [r3, #6]
 8008036:	2b03      	cmp	r3, #3
 8008038:	d10b      	bne.n	8008052 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	79db      	ldrb	r3, [r3, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10b      	bne.n	800805a <USBH_ParseCfgDesc+0x14e>
 8008042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b09      	cmp	r3, #9
 8008048:	d007      	beq.n	800805a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	2209      	movs	r2, #9
 800804e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008050:	e003      	b.n	800805a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	2207      	movs	r2, #7
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	e000      	b.n	800805c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800805a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800805c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008060:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008064:	3201      	adds	r2, #1
 8008066:	00d2      	lsls	r2, r2, #3
 8008068:	211a      	movs	r1, #26
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	4413      	add	r3, r2
 8008070:	3308      	adds	r3, #8
 8008072:	6a3a      	ldr	r2, [r7, #32]
 8008074:	4413      	add	r3, r2
 8008076:	3304      	adds	r3, #4
 8008078:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800807a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f870 	bl	8008164 <USBH_ParseEPDesc>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800808a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800808e:	3301      	adds	r3, #1
 8008090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	791b      	ldrb	r3, [r3, #4]
 8008098:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800809c:	429a      	cmp	r2, r3
 800809e:	d204      	bcs.n	80080aa <USBH_ParseCfgDesc+0x19e>
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	885a      	ldrh	r2, [r3, #2]
 80080a4:	8afb      	ldrh	r3, [r7, #22]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d8b0      	bhi.n	800800c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	791b      	ldrb	r3, [r3, #4]
 80080ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d201      	bcs.n	80080ba <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e01c      	b.n	80080f4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80080ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080be:	3301      	adds	r3, #1
 80080c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d805      	bhi.n	80080d8 <USBH_ParseCfgDesc+0x1cc>
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	885a      	ldrh	r2, [r3, #2]
 80080d0:	8afb      	ldrh	r3, [r7, #22]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f63f af74 	bhi.w	8007fc0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	791b      	ldrb	r3, [r3, #4]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	bf28      	it	cs
 80080e0:	2302      	movcs	r3, #2
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d201      	bcs.n	80080f0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e001      	b.n	80080f4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80080f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3730      	adds	r7, #48	@ 0x30
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	785a      	ldrb	r2, [r3, #1]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	789a      	ldrb	r2, [r3, #2]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	78da      	ldrb	r2, [r3, #3]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	3304      	adds	r3, #4
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b02      	cmp	r3, #2
 800812e:	bf28      	it	cs
 8008130:	2302      	movcs	r3, #2
 8008132:	b2da      	uxtb	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	795a      	ldrb	r2, [r3, #5]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	799a      	ldrb	r2, [r3, #6]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	79da      	ldrb	r2, [r3, #7]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	7a1a      	ldrb	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	721a      	strb	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	785a      	ldrb	r2, [r3, #1]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	789a      	ldrb	r2, [r3, #2]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	78da      	ldrb	r2, [r3, #3]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3305      	adds	r3, #5
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	799a      	ldrb	r2, [r3, #6]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	889b      	ldrh	r3, [r3, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081c6:	d804      	bhi.n	80081d2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d0:	d901      	bls.n	80081d6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80081d2:	2303      	movs	r3, #3
 80081d4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d136      	bne.n	800824e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d108      	bne.n	80081fe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	889b      	ldrh	r3, [r3, #4]
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f4:	f240 8097 	bls.w	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	e093      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	78db      	ldrb	r3, [r3, #3]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d107      	bne.n	800821a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	2b40      	cmp	r3, #64	@ 0x40
 8008210:	f240 8089 	bls.w	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008214:	2303      	movs	r3, #3
 8008216:	75fb      	strb	r3, [r7, #23]
 8008218:	e085      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	78db      	ldrb	r3, [r3, #3]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b01      	cmp	r3, #1
 8008224:	d005      	beq.n	8008232 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	78db      	ldrb	r3, [r3, #3]
 800822a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800822e:	2b03      	cmp	r3, #3
 8008230:	d10a      	bne.n	8008248 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	799b      	ldrb	r3, [r3, #6]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <USBH_ParseEPDesc+0xde>
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	799b      	ldrb	r3, [r3, #6]
 800823e:	2b10      	cmp	r3, #16
 8008240:	d970      	bls.n	8008324 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008242:	2303      	movs	r3, #3
 8008244:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008246:	e06d      	b.n	8008324 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008248:	2303      	movs	r3, #3
 800824a:	75fb      	strb	r3, [r7, #23]
 800824c:	e06b      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008254:	2b01      	cmp	r3, #1
 8008256:	d13c      	bne.n	80082d2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	78db      	ldrb	r3, [r3, #3]
 800825c:	f003 0303 	and.w	r3, r3, #3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d005      	beq.n	8008270 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	78db      	ldrb	r3, [r3, #3]
 8008268:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	889b      	ldrh	r3, [r3, #4]
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	d956      	bls.n	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008278:	2303      	movs	r3, #3
 800827a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800827c:	e053      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b01      	cmp	r3, #1
 8008288:	d10e      	bne.n	80082a8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	799b      	ldrb	r3, [r3, #6]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008296:	2b10      	cmp	r3, #16
 8008298:	d803      	bhi.n	80082a2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800829e:	2b40      	cmp	r3, #64	@ 0x40
 80082a0:	d941      	bls.n	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082a2:	2303      	movs	r3, #3
 80082a4:	75fb      	strb	r3, [r7, #23]
 80082a6:	e03e      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	78db      	ldrb	r3, [r3, #3]
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d10b      	bne.n	80082cc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	799b      	ldrb	r3, [r3, #6]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <USBH_ParseEPDesc+0x162>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	889b      	ldrh	r3, [r3, #4]
 80082c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c4:	d32f      	bcc.n	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082c6:	2303      	movs	r3, #3
 80082c8:	75fb      	strb	r3, [r7, #23]
 80082ca:	e02c      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80082cc:	2303      	movs	r3, #3
 80082ce:	75fb      	strb	r3, [r7, #23]
 80082d0:	e029      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d120      	bne.n	800831e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	78db      	ldrb	r3, [r3, #3]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d106      	bne.n	80082f6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	889b      	ldrh	r3, [r3, #4]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d01a      	beq.n	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80082f0:	2303      	movs	r3, #3
 80082f2:	75fb      	strb	r3, [r7, #23]
 80082f4:	e017      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d10a      	bne.n	8008318 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	799b      	ldrb	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <USBH_ParseEPDesc+0x1ae>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	889b      	ldrh	r3, [r3, #4]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d909      	bls.n	8008326 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008312:	2303      	movs	r3, #3
 8008314:	75fb      	strb	r3, [r7, #23]
 8008316:	e006      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008318:	2303      	movs	r3, #3
 800831a:	75fb      	strb	r3, [r7, #23]
 800831c:	e003      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
 8008322:	e000      	b.n	8008326 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008324:	bf00      	nop
  }

  return status;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d120      	bne.n	800838e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	1e9a      	subs	r2, r3, #2
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	4293      	cmp	r3, r2
 8008356:	bf28      	it	cs
 8008358:	4613      	movcs	r3, r2
 800835a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3302      	adds	r3, #2
 8008360:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008362:	2300      	movs	r3, #0
 8008364:	82fb      	strh	r3, [r7, #22]
 8008366:	e00b      	b.n	8008380 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008368:	8afb      	ldrh	r3, [r7, #22]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3301      	adds	r3, #1
 8008378:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800837a:	8afb      	ldrh	r3, [r7, #22]
 800837c:	3302      	adds	r3, #2
 800837e:	82fb      	strh	r3, [r7, #22]
 8008380:	8afa      	ldrh	r2, [r7, #22]
 8008382:	8abb      	ldrh	r3, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d3ef      	bcc.n	8008368 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
  }
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7812      	ldrb	r2, [r2, #0]
 80083ac:	4413      	add	r3, r2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	4613      	mov	r3, r2
 80083da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80083dc:	2301      	movs	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d002      	beq.n	80083ee <USBH_CtlReq+0x20>
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d01d      	beq.n	8008428 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80083ec:	e043      	b.n	8008476 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	88fa      	ldrh	r2, [r7, #6]
 80083f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2202      	movs	r2, #2
 8008404:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008406:	2301      	movs	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2203      	movs	r2, #3
 800840e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800841e:	2200      	movs	r2, #0
 8008420:	4619      	mov	r1, r3
 8008422:	f000 fc61 	bl	8008ce8 <osMessagePut>
      break;
 8008426:	e026      	b.n	8008476 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f829 	bl	8008480 <USBH_HandleControl>
 800842e:	4603      	mov	r3, r0
 8008430:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <USBH_CtlReq+0x70>
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b03      	cmp	r3, #3
 800843c:	d106      	bne.n	800844c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	761a      	strb	r2, [r3, #24]
 800844a:	e005      	b.n	8008458 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d102      	bne.n	8008458 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2203      	movs	r2, #3
 800845c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800846c:	2200      	movs	r2, #0
 800846e:	4619      	mov	r1, r3
 8008470:	f000 fc3a 	bl	8008ce8 <osMessagePut>
      break;
 8008474:	bf00      	nop
  }
  return status;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af02      	add	r7, sp, #8
 8008486:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800848c:	2300      	movs	r3, #0
 800848e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	7e1b      	ldrb	r3, [r3, #24]
 8008494:	3b01      	subs	r3, #1
 8008496:	2b0a      	cmp	r3, #10
 8008498:	f200 8229 	bhi.w	80088ee <USBH_HandleControl+0x46e>
 800849c:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <USBH_HandleControl+0x24>)
 800849e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	080084d1 	.word	0x080084d1
 80084a8:	080084eb 	.word	0x080084eb
 80084ac:	0800858d 	.word	0x0800858d
 80084b0:	080085b3 	.word	0x080085b3
 80084b4:	0800863f 	.word	0x0800863f
 80084b8:	08008669 	.word	0x08008669
 80084bc:	0800872b 	.word	0x0800872b
 80084c0:	0800874d 	.word	0x0800874d
 80084c4:	080087df 	.word	0x080087df
 80084c8:	08008805 	.word	0x08008805
 80084cc:	08008897 	.word	0x08008897
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f103 0110 	add.w	r1, r3, #16
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	795b      	ldrb	r3, [r3, #5]
 80084da:	461a      	mov	r2, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa17 	bl	8008910 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2202      	movs	r2, #2
 80084e6:	761a      	strb	r2, [r3, #24]
      break;
 80084e8:	e20c      	b.n	8008904 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	795b      	ldrb	r3, [r3, #5]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f003 f82d 	bl	800b550 <USBH_LL_GetURBState>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d12c      	bne.n	800855a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7c1b      	ldrb	r3, [r3, #16]
 8008504:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008508:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8adb      	ldrh	r3, [r3, #22]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008512:	7b7b      	ldrb	r3, [r7, #13]
 8008514:	2b80      	cmp	r3, #128	@ 0x80
 8008516:	d103      	bne.n	8008520 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2203      	movs	r2, #3
 800851c:	761a      	strb	r2, [r3, #24]
 800851e:	e00d      	b.n	800853c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2205      	movs	r2, #5
 8008524:	761a      	strb	r2, [r3, #24]
 8008526:	e009      	b.n	800853c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008528:	7b7b      	ldrb	r3, [r7, #13]
 800852a:	2b80      	cmp	r3, #128	@ 0x80
 800852c:	d103      	bne.n	8008536 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2209      	movs	r2, #9
 8008532:	761a      	strb	r2, [r3, #24]
 8008534:	e002      	b.n	800853c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2207      	movs	r2, #7
 800853a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2203      	movs	r2, #3
 8008540:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008550:	2200      	movs	r2, #0
 8008552:	4619      	mov	r1, r3
 8008554:	f000 fbc8 	bl	8008ce8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008558:	e1cb      	b.n	80088f2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d003      	beq.n	8008568 <USBH_HandleControl+0xe8>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b02      	cmp	r3, #2
 8008564:	f040 81c5 	bne.w	80088f2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	220b      	movs	r2, #11
 800856c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2203      	movs	r2, #3
 8008572:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008582:	2200      	movs	r2, #0
 8008584:	4619      	mov	r1, r3
 8008586:	f000 fbaf 	bl	8008ce8 <osMessagePut>
      break;
 800858a:	e1b2      	b.n	80088f2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6899      	ldr	r1, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	899a      	ldrh	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	791b      	ldrb	r3, [r3, #4]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9f2 	bl	800898e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2204      	movs	r2, #4
 80085ae:	761a      	strb	r2, [r3, #24]
      break;
 80085b0:	e1a8      	b.n	8008904 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	791b      	ldrb	r3, [r3, #4]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f002 ffc9 	bl	800b550 <USBH_LL_GetURBState>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d110      	bne.n	80085ea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2209      	movs	r2, #9
 80085cc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2203      	movs	r2, #3
 80085d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80085e2:	2200      	movs	r2, #0
 80085e4:	4619      	mov	r1, r3
 80085e6:	f000 fb7f 	bl	8008ce8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d110      	bne.n	8008612 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085f0:	2303      	movs	r3, #3
 80085f2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2203      	movs	r2, #3
 80085f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008608:	2200      	movs	r2, #0
 800860a:	4619      	mov	r1, r3
 800860c:	f000 fb6c 	bl	8008ce8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008610:	e171      	b.n	80088f6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	2b04      	cmp	r3, #4
 8008616:	f040 816e 	bne.w	80088f6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	220b      	movs	r2, #11
 800861e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2203      	movs	r2, #3
 8008624:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008634:	2200      	movs	r2, #0
 8008636:	4619      	mov	r1, r3
 8008638:	f000 fb56 	bl	8008ce8 <osMessagePut>
      break;
 800863c:	e15b      	b.n	80088f6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6899      	ldr	r1, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	899a      	ldrh	r2, [r3, #12]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	795b      	ldrb	r3, [r3, #5]
 800864a:	2001      	movs	r0, #1
 800864c:	9000      	str	r0, [sp, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f978 	bl	8008944 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2206      	movs	r2, #6
 8008664:	761a      	strb	r2, [r3, #24]
      break;
 8008666:	e14d      	b.n	8008904 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	795b      	ldrb	r3, [r3, #5]
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f002 ff6e 	bl	800b550 <USBH_LL_GetURBState>
 8008674:	4603      	mov	r3, r0
 8008676:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d111      	bne.n	80086a2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2207      	movs	r2, #7
 8008682:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2203      	movs	r2, #3
 8008688:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008698:	2200      	movs	r2, #0
 800869a:	4619      	mov	r1, r3
 800869c:	f000 fb24 	bl	8008ce8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086a0:	e12b      	b.n	80088fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b05      	cmp	r3, #5
 80086a6:	d113      	bne.n	80086d0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	220c      	movs	r2, #12
 80086ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2203      	movs	r2, #3
 80086b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80086c6:	2200      	movs	r2, #0
 80086c8:	4619      	mov	r1, r3
 80086ca:	f000 fb0d 	bl	8008ce8 <osMessagePut>
      break;
 80086ce:	e114      	b.n	80088fa <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d111      	bne.n	80086fa <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2205      	movs	r2, #5
 80086da:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2203      	movs	r2, #3
 80086e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80086f0:	2200      	movs	r2, #0
 80086f2:	4619      	mov	r1, r3
 80086f4:	f000 faf8 	bl	8008ce8 <osMessagePut>
      break;
 80086f8:	e0ff      	b.n	80088fa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	f040 80fc 	bne.w	80088fa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	220b      	movs	r2, #11
 8008706:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008708:	2302      	movs	r3, #2
 800870a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2203      	movs	r2, #3
 8008710:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008720:	2200      	movs	r2, #0
 8008722:	4619      	mov	r1, r3
 8008724:	f000 fae0 	bl	8008ce8 <osMessagePut>
      break;
 8008728:	e0e7      	b.n	80088fa <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	791b      	ldrb	r3, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	2100      	movs	r1, #0
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f92b 	bl	800898e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2208      	movs	r2, #8
 8008748:	761a      	strb	r2, [r3, #24]

      break;
 800874a:	e0db      	b.n	8008904 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	791b      	ldrb	r3, [r3, #4]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f002 fefc 	bl	800b550 <USBH_LL_GetURBState>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d113      	bne.n	800878a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	220d      	movs	r2, #13
 8008766:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2203      	movs	r2, #3
 8008770:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008780:	2200      	movs	r2, #0
 8008782:	4619      	mov	r1, r3
 8008784:	f000 fab0 	bl	8008ce8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008788:	e0b9      	b.n	80088fe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	2b04      	cmp	r3, #4
 800878e:	d111      	bne.n	80087b4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	220b      	movs	r2, #11
 8008794:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80087aa:	2200      	movs	r2, #0
 80087ac:	4619      	mov	r1, r3
 80087ae:	f000 fa9b 	bl	8008ce8 <osMessagePut>
      break;
 80087b2:	e0a4      	b.n	80088fe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	f040 80a1 	bne.w	80088fe <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80087bc:	2303      	movs	r3, #3
 80087be:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2203      	movs	r2, #3
 80087c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80087d4:	2200      	movs	r2, #0
 80087d6:	4619      	mov	r1, r3
 80087d8:	f000 fa86 	bl	8008ce8 <osMessagePut>
      break;
 80087dc:	e08f      	b.n	80088fe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	795b      	ldrb	r3, [r3, #5]
 80087e2:	2201      	movs	r2, #1
 80087e4:	9200      	str	r2, [sp, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8aa 	bl	8008944 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	220a      	movs	r2, #10
 8008800:	761a      	strb	r2, [r3, #24]
      break;
 8008802:	e07f      	b.n	8008904 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	795b      	ldrb	r3, [r3, #5]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f002 fea0 	bl	800b550 <USBH_LL_GetURBState>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d113      	bne.n	8008842 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	220d      	movs	r2, #13
 8008822:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2203      	movs	r2, #3
 8008828:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008838:	2200      	movs	r2, #0
 800883a:	4619      	mov	r1, r3
 800883c:	f000 fa54 	bl	8008ce8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008840:	e05f      	b.n	8008902 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b02      	cmp	r3, #2
 8008846:	d111      	bne.n	800886c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2209      	movs	r2, #9
 800884c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2203      	movs	r2, #3
 8008852:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008862:	2200      	movs	r2, #0
 8008864:	4619      	mov	r1, r3
 8008866:	f000 fa3f 	bl	8008ce8 <osMessagePut>
      break;
 800886a:	e04a      	b.n	8008902 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d147      	bne.n	8008902 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	220b      	movs	r2, #11
 8008876:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2203      	movs	r2, #3
 800887c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800888c:	2200      	movs	r2, #0
 800888e:	4619      	mov	r1, r3
 8008890:	f000 fa2a 	bl	8008ce8 <osMessagePut>
      break;
 8008894:	e035      	b.n	8008902 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7e5b      	ldrb	r3, [r3, #25]
 800889a:	3301      	adds	r3, #1
 800889c:	b2da      	uxtb	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	765a      	strb	r2, [r3, #25]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7e5b      	ldrb	r3, [r3, #25]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d806      	bhi.n	80088b8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80088b6:	e025      	b.n	8008904 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088be:	2106      	movs	r1, #6
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f90d 	bl	8008af0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	791b      	ldrb	r3, [r3, #4]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f907 	bl	8008af0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088e8:	2302      	movs	r3, #2
 80088ea:	73fb      	strb	r3, [r7, #15]
      break;
 80088ec:	e00a      	b.n	8008904 <USBH_HandleControl+0x484>

    default:
      break;
 80088ee:	bf00      	nop
 80088f0:	e008      	b.n	8008904 <USBH_HandleControl+0x484>
      break;
 80088f2:	bf00      	nop
 80088f4:	e006      	b.n	8008904 <USBH_HandleControl+0x484>
      break;
 80088f6:	bf00      	nop
 80088f8:	e004      	b.n	8008904 <USBH_HandleControl+0x484>
      break;
 80088fa:	bf00      	nop
 80088fc:	e002      	b.n	8008904 <USBH_HandleControl+0x484>
      break;
 80088fe:	bf00      	nop
 8008900:	e000      	b.n	8008904 <USBH_HandleControl+0x484>
      break;
 8008902:	bf00      	nop
  }

  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop

08008910 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af04      	add	r7, sp, #16
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800891e:	79f9      	ldrb	r1, [r7, #7]
 8008920:	2300      	movs	r3, #0
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	2308      	movs	r3, #8
 8008926:	9302      	str	r3, [sp, #8]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	2300      	movs	r3, #0
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	2300      	movs	r3, #0
 8008932:	2200      	movs	r2, #0
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f002 fdda 	bl	800b4ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af04      	add	r7, sp, #16
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	460b      	mov	r3, r1
 8008954:	80fb      	strh	r3, [r7, #6]
 8008956:	4613      	mov	r3, r2
 8008958:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008968:	7979      	ldrb	r1, [r7, #5]
 800896a:	7e3b      	ldrb	r3, [r7, #24]
 800896c:	9303      	str	r3, [sp, #12]
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	2301      	movs	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	2200      	movs	r2, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f002 fdb5 	bl	800b4ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b088      	sub	sp, #32
 8008992:	af04      	add	r7, sp, #16
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	4611      	mov	r1, r2
 800899a:	461a      	mov	r2, r3
 800899c:	460b      	mov	r3, r1
 800899e:	80fb      	strh	r3, [r7, #6]
 80089a0:	4613      	mov	r3, r2
 80089a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a4:	7979      	ldrb	r1, [r7, #5]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	88fb      	ldrh	r3, [r7, #6]
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	2301      	movs	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	2300      	movs	r3, #0
 80089b8:	2201      	movs	r2, #1
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f002 fd97 	bl	800b4ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089c0:	2300      	movs	r3, #0

}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b088      	sub	sp, #32
 80089ce:	af04      	add	r7, sp, #16
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	4611      	mov	r1, r2
 80089d6:	461a      	mov	r2, r3
 80089d8:	460b      	mov	r3, r1
 80089da:	80fb      	strh	r3, [r7, #6]
 80089dc:	4613      	mov	r3, r2
 80089de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089ee:	7979      	ldrb	r1, [r7, #5]
 80089f0:	7e3b      	ldrb	r3, [r7, #24]
 80089f2:	9303      	str	r3, [sp, #12]
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	2301      	movs	r3, #1
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2200      	movs	r2, #0
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f002 fd72 	bl	800b4ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	460b      	mov	r3, r1
 8008a24:	80fb      	strh	r3, [r7, #6]
 8008a26:	4613      	mov	r3, r2
 8008a28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a2a:	7979      	ldrb	r1, [r7, #5]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	2201      	movs	r2, #1
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f002 fd54 	bl	800b4ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	70fb      	strb	r3, [r7, #3]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70bb      	strb	r3, [r7, #2]
 8008a66:	4613      	mov	r3, r2
 8008a68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a6a:	7878      	ldrb	r0, [r7, #1]
 8008a6c:	78ba      	ldrb	r2, [r7, #2]
 8008a6e:	78f9      	ldrb	r1, [r7, #3]
 8008a70:	8b3b      	ldrh	r3, [r7, #24]
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	7d3b      	ldrb	r3, [r7, #20]
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	7c3b      	ldrb	r3, [r7, #16]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f002 fce7 	bl	800b452 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f002 fd06 	bl	800b4b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f836 	bl	8008b2c <USBH_GetFreePipe>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ac4:	89fb      	ldrh	r3, [r7, #14]
 8008ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00a      	beq.n	8008ae4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ada:	6879      	ldr	r1, [r7, #4]
 8008adc:	33e0      	adds	r3, #224	@ 0xe0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	b2db      	uxtb	r3, r3
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	2b0f      	cmp	r3, #15
 8008b00:	d80d      	bhi.n	8008b1e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33e0      	adds	r3, #224	@ 0xe0
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	33e0      	adds	r3, #224	@ 0xe0
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
 8008b3c:	e00f      	b.n	8008b5e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	33e0      	adds	r3, #224	@ 0xe0
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	e007      	b.n	8008b68 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	73fb      	strb	r3, [r7, #15]
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b0f      	cmp	r3, #15
 8008b62:	d9ec      	bls.n	8008b3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b86:	2b84      	cmp	r3, #132	@ 0x84
 8008b88:	d005      	beq.n	8008b96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008b8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	3303      	adds	r3, #3
 8008b94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008b96:	68fb      	ldr	r3, [r7, #12]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008baa:	f3ef 8305 	mrs	r3, IPSR
 8008bae:	607b      	str	r3, [r7, #4]
  return(result);
 8008bb0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	2301      	movne	r3, #1
 8008bb8:	2300      	moveq	r3, #0
 8008bba:	b2db      	uxtb	r3, r3
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bcc:	f001 f918 	bl	8009e00 <vTaskStartScheduler>
  
  return osOK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd8:	b089      	sub	sp, #36	@ 0x24
 8008bda:	af04      	add	r7, sp, #16
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d020      	beq.n	8008c2a <osThreadCreate+0x54>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01c      	beq.n	8008c2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685c      	ldr	r4, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691e      	ldr	r6, [r3, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ffb6 	bl	8008b74 <makeFreeRtosPriority>
 8008c08:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c12:	9202      	str	r2, [sp, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	9100      	str	r1, [sp, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	4632      	mov	r2, r6
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 ff20 	bl	8009a64 <xTaskCreateStatic>
 8008c24:	4603      	mov	r3, r0
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e01c      	b.n	8008c64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685c      	ldr	r4, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c36:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff ff98 	bl	8008b74 <makeFreeRtosPriority>
 8008c44:	4602      	mov	r2, r0
 8008c46:	f107 030c 	add.w	r3, r7, #12
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	9200      	str	r2, [sp, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	4632      	mov	r2, r6
 8008c52:	4629      	mov	r1, r5
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 ff65 	bl	8009b24 <xTaskCreate>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d001      	beq.n	8008c64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e000      	b.n	8008c66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008c64:	68fb      	ldr	r3, [r7, #12]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <osDelay+0x16>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	e000      	b.n	8008c86 <osDelay+0x18>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f884 	bl	8009d94 <vTaskDelay>
  
  return osOK;
 8008c8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008c96:	b590      	push	{r4, r7, lr}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af02      	add	r7, sp, #8
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d011      	beq.n	8008ccc <osMessageCreate+0x36>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6859      	ldr	r1, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2400      	movs	r4, #0
 8008cc2:	9400      	str	r4, [sp, #0]
 8008cc4:	f000 f9e2 	bl	800908c <xQueueGenericCreateStatic>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	e008      	b.n	8008cde <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f000 fa55 	bl	8009186 <xQueueGenericCreate>
 8008cdc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd90      	pop	{r4, r7, pc}
	...

08008ce8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <osMessagePut+0x1e>
    ticks = 1;
 8008d02:	2301      	movs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008d06:	f7ff ff4d 	bl	8008ba4 <inHandlerMode>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d018      	beq.n	8008d42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d10:	f107 0210 	add.w	r2, r7, #16
 8008d14:	f107 0108 	add.w	r1, r7, #8
 8008d18:	2300      	movs	r3, #0
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fb90 	bl	8009440 <xQueueGenericSendFromISR>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d001      	beq.n	8008d2a <osMessagePut+0x42>
      return osErrorOS;
 8008d26:	23ff      	movs	r3, #255	@ 0xff
 8008d28:	e018      	b.n	8008d5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d014      	beq.n	8008d5a <osMessagePut+0x72>
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <osMessagePut+0x7c>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e00b      	b.n	8008d5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008d42:	f107 0108 	add.w	r1, r7, #8
 8008d46:	2300      	movs	r3, #0
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fa76 	bl	800923c <xQueueGenericSend>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d001      	beq.n	8008d5a <osMessagePut+0x72>
      return osErrorOS;
 8008d56:	23ff      	movs	r3, #255	@ 0xff
 8008d58:	e000      	b.n	8008d5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b08b      	sub	sp, #44	@ 0x2c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	617b      	str	r3, [r7, #20]
    return event;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	461c      	mov	r4, r3
 8008d8a:	f107 0314 	add.w	r3, r7, #20
 8008d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d96:	e054      	b.n	8008e42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d103      	bne.n	8008db0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008da8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dae:	e009      	b.n	8008dc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d006      	beq.n	8008dc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8008dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <osMessageGet+0x5c>
      ticks = 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008dc4:	f7ff feee 	bl	8008ba4 <inHandlerMode>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d01c      	beq.n	8008e08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008dce:	f107 0220 	add.w	r2, r7, #32
 8008dd2:	f107 0314 	add.w	r3, r7, #20
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4619      	mov	r1, r3
 8008dda:	68b8      	ldr	r0, [r7, #8]
 8008ddc:	f000 fcb0 	bl	8009740 <xQueueReceiveFromISR>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d102      	bne.n	8008dec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008de6:	2310      	movs	r3, #16
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e001      	b.n	8008df0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d01d      	beq.n	8008e32 <osMessageGet+0xca>
 8008df6:	4b15      	ldr	r3, [pc, #84]	@ (8008e4c <osMessageGet+0xe4>)
 8008df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	e014      	b.n	8008e32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008e08:	f107 0314 	add.w	r3, r7, #20
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e10:	4619      	mov	r1, r3
 8008e12:	68b8      	ldr	r0, [r7, #8]
 8008e14:	f000 fbb2 	bl	800957c <xQueueReceive>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d102      	bne.n	8008e24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008e1e:	2310      	movs	r3, #16
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e006      	b.n	8008e32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <osMessageGet+0xc6>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e000      	b.n	8008e30 <osMessageGet+0xc8>
 8008e2e:	2340      	movs	r3, #64	@ 0x40
 8008e30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	461c      	mov	r4, r3
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	372c      	adds	r7, #44	@ 0x2c
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd90      	pop	{r4, r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	e000ed04 	.word	0xe000ed04

08008e50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f103 0208 	add.w	r2, r3, #8
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f103 0208 	add.w	r2, r3, #8
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f103 0208 	add.w	r2, r3, #8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d103      	bne.n	8008f12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e00c      	b.n	8008f2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	3308      	adds	r3, #8
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e002      	b.n	8008f20 <vListInsert+0x2e>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d2f6      	bcs.n	8008f1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6892      	ldr	r2, [r2, #8]
 8008f7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6852      	ldr	r2, [r2, #4]
 8008f84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d103      	bne.n	8008f98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	1e5a      	subs	r2, r3, #1
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10b      	bne.n	8008fe4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008fe4:	f001 fd50 	bl	800aa88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009014:	3b01      	subs	r3, #1
 8009016:	68f9      	ldr	r1, [r7, #12]
 8009018:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800901a:	fb01 f303 	mul.w	r3, r1, r3
 800901e:	441a      	add	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	22ff      	movs	r2, #255	@ 0xff
 8009028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	22ff      	movs	r2, #255	@ 0xff
 8009030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d114      	bne.n	8009064 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01a      	beq.n	8009078 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3310      	adds	r3, #16
 8009046:	4618      	mov	r0, r3
 8009048:	f001 f924 	bl	800a294 <xTaskRemoveFromEventList>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d012      	beq.n	8009078 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009052:	4b0d      	ldr	r3, [pc, #52]	@ (8009088 <xQueueGenericReset+0xd0>)
 8009054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	e009      	b.n	8009078 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3310      	adds	r3, #16
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fef1 	bl	8008e50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3324      	adds	r3, #36	@ 0x24
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff feec 	bl	8008e50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009078:	f001 fd38 	bl	800aaec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800907c:	2301      	movs	r3, #1
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	@ 0x38
 8009090:	af02      	add	r7, sp, #8
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10b      	bne.n	80090b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80090b2:	bf00      	nop
 80090b4:	bf00      	nop
 80090b6:	e7fd      	b.n	80090b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10b      	bne.n	80090d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090d0:	bf00      	nop
 80090d2:	bf00      	nop
 80090d4:	e7fd      	b.n	80090d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <xQueueGenericCreateStatic+0x56>
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <xQueueGenericCreateStatic+0x5a>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e000      	b.n	80090e8 <xQueueGenericCreateStatic+0x5c>
 80090e6:	2300      	movs	r3, #0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10b      	bne.n	8009104 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	623b      	str	r3, [r7, #32]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <xQueueGenericCreateStatic+0x84>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <xQueueGenericCreateStatic+0x88>
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <xQueueGenericCreateStatic+0x8a>
 8009114:	2300      	movs	r3, #0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	61fb      	str	r3, [r7, #28]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009132:	2348      	movs	r3, #72	@ 0x48
 8009134:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b48      	cmp	r3, #72	@ 0x48
 800913a:	d00b      	beq.n	8009154 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61bb      	str	r3, [r7, #24]
}
 800914e:	bf00      	nop
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009154:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00d      	beq.n	800917c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009168:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800916c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f840 	bl	80091fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800917e:	4618      	mov	r0, r3
 8009180:	3730      	adds	r7, #48	@ 0x30
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009186:	b580      	push	{r7, lr}
 8009188:	b08a      	sub	sp, #40	@ 0x28
 800918a:	af02      	add	r7, sp, #8
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	4613      	mov	r3, r2
 8009192:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	613b      	str	r3, [r7, #16]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	3348      	adds	r3, #72	@ 0x48
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 fd83 	bl	800accc <pvPortMalloc>
 80091c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d011      	beq.n	80091f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	3348      	adds	r3, #72	@ 0x48
 80091d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091e0:	79fa      	ldrb	r2, [r7, #7]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	4613      	mov	r3, r2
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f805 	bl	80091fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091f2:	69bb      	ldr	r3, [r7, #24]
	}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
 8009208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	e002      	b.n	800921e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800922a:	2101      	movs	r1, #1
 800922c:	69b8      	ldr	r0, [r7, #24]
 800922e:	f7ff fec3 	bl	8008fb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08e      	sub	sp, #56	@ 0x38
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800924a:	2300      	movs	r3, #0
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <xQueueGenericSend+0x34>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d103      	bne.n	800927e <xQueueGenericSend+0x42>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueGenericSend+0x46>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSend+0x48>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <xQueueGenericSend+0x64>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	e7fd      	b.n	800929c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d103      	bne.n	80092ae <xQueueGenericSend+0x72>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <xQueueGenericSend+0x76>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <xQueueGenericSend+0x78>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <xQueueGenericSend+0x94>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	623b      	str	r3, [r7, #32]
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092d0:	f001 f9a0 	bl	800a614 <xTaskGetSchedulerState>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d102      	bne.n	80092e0 <xQueueGenericSend+0xa4>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <xQueueGenericSend+0xa8>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <xQueueGenericSend+0xaa>
 80092e4:	2300      	movs	r3, #0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10b      	bne.n	8009302 <xQueueGenericSend+0xc6>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	61fb      	str	r3, [r7, #28]
}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	e7fd      	b.n	80092fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009302:	f001 fbc1 	bl	800aa88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930e:	429a      	cmp	r2, r3
 8009310:	d302      	bcc.n	8009318 <xQueueGenericSend+0xdc>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d129      	bne.n	800936c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800931e:	f000 fa91 	bl	8009844 <prvCopyDataToQueue>
 8009322:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d010      	beq.n	800934e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	3324      	adds	r3, #36	@ 0x24
 8009330:	4618      	mov	r0, r3
 8009332:	f000 ffaf 	bl	800a294 <xTaskRemoveFromEventList>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d013      	beq.n	8009364 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800933c:	4b3f      	ldr	r3, [pc, #252]	@ (800943c <xQueueGenericSend+0x200>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	e00a      	b.n	8009364 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009354:	4b39      	ldr	r3, [pc, #228]	@ (800943c <xQueueGenericSend+0x200>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009364:	f001 fbc2 	bl	800aaec <vPortExitCritical>
				return pdPASS;
 8009368:	2301      	movs	r3, #1
 800936a:	e063      	b.n	8009434 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009372:	f001 fbbb 	bl	800aaec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009376:	2300      	movs	r3, #0
 8009378:	e05c      	b.n	8009434 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800937a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009380:	f107 0314 	add.w	r3, r7, #20
 8009384:	4618      	mov	r0, r3
 8009386:	f000 ffe9 	bl	800a35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800938a:	2301      	movs	r3, #1
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800938e:	f001 fbad 	bl	800aaec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009392:	f000 fd97 	bl	8009ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009396:	f001 fb77 	bl	800aa88 <vPortEnterCritical>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093a0:	b25b      	sxtb	r3, r3
 80093a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a6:	d103      	bne.n	80093b0 <xQueueGenericSend+0x174>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093b6:	b25b      	sxtb	r3, r3
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d103      	bne.n	80093c6 <xQueueGenericSend+0x18a>
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c6:	f001 fb91 	bl	800aaec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ca:	1d3a      	adds	r2, r7, #4
 80093cc:	f107 0314 	add.w	r3, r7, #20
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 ffd8 	bl	800a388 <xTaskCheckForTimeOut>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d124      	bne.n	8009428 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093e0:	f000 fb28 	bl	8009a34 <prvIsQueueFull>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d018      	beq.n	800941c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ec:	3310      	adds	r3, #16
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff28 	bl	800a248 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093fa:	f000 fab3 	bl	8009964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093fe:	f000 fd6f 	bl	8009ee0 <xTaskResumeAll>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	f47f af7c 	bne.w	8009302 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800940a:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <xQueueGenericSend+0x200>)
 800940c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	e772      	b.n	8009302 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800941c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800941e:	f000 faa1 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009422:	f000 fd5d 	bl	8009ee0 <xTaskResumeAll>
 8009426:	e76c      	b.n	8009302 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800942a:	f000 fa9b 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800942e:	f000 fd57 	bl	8009ee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009434:	4618      	mov	r0, r3
 8009436:	3738      	adds	r7, #56	@ 0x38
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b090      	sub	sp, #64	@ 0x40
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <xQueueGenericSendFromISR+0x3e>
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <xQueueGenericSendFromISR+0x42>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <xQueueGenericSendFromISR+0x44>
 8009482:	2300      	movs	r3, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800949a:	bf00      	nop
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d103      	bne.n	80094ae <xQueueGenericSendFromISR+0x6e>
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <xQueueGenericSendFromISR+0x72>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e000      	b.n	80094b4 <xQueueGenericSendFromISR+0x74>
 80094b2:	2300      	movs	r3, #0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10b      	bne.n	80094d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	623b      	str	r3, [r7, #32]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094d0:	f001 fbba 	bl	800ac48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094d4:	f3ef 8211 	mrs	r2, BASEPRI
 80094d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	61fa      	str	r2, [r7, #28]
 80094ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d302      	bcc.n	8009502 <xQueueGenericSendFromISR+0xc2>
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d12f      	bne.n	8009562 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009510:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009518:	f000 f994 	bl	8009844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800951c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d112      	bne.n	800954c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952a:	2b00      	cmp	r3, #0
 800952c:	d016      	beq.n	800955c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	3324      	adds	r3, #36	@ 0x24
 8009532:	4618      	mov	r0, r3
 8009534:	f000 feae 	bl	800a294 <xTaskRemoveFromEventList>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00e      	beq.n	800955c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e007      	b.n	800955c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800954c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009550:	3301      	adds	r3, #1
 8009552:	b2db      	uxtb	r3, r3
 8009554:	b25a      	sxtb	r2, r3
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800955c:	2301      	movs	r3, #1
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009560:	e001      	b.n	8009566 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009568:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009570:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009574:	4618      	mov	r0, r3
 8009576:	3740      	adds	r7, #64	@ 0x40
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08c      	sub	sp, #48	@ 0x30
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <xQueueReceive+0x32>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	623b      	str	r3, [r7, #32]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <xQueueReceive+0x40>
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <xQueueReceive+0x44>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <xQueueReceive+0x46>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <xQueueReceive+0x62>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	61fb      	str	r3, [r7, #28]
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095de:	f001 f819 	bl	800a614 <xTaskGetSchedulerState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <xQueueReceive+0x72>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d101      	bne.n	80095f2 <xQueueReceive+0x76>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <xQueueReceive+0x78>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <xQueueReceive+0x94>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	61bb      	str	r3, [r7, #24]
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009610:	f001 fa3a 	bl	800aa88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009618:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800961a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01f      	beq.n	8009660 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009624:	f000 f978 	bl	8009918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	1e5a      	subs	r2, r3, #1
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00f      	beq.n	8009658 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	3310      	adds	r3, #16
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fe29 	bl	800a294 <xTaskRemoveFromEventList>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009648:	4b3c      	ldr	r3, [pc, #240]	@ (800973c <xQueueReceive+0x1c0>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009658:	f001 fa48 	bl	800aaec <vPortExitCritical>
				return pdPASS;
 800965c:	2301      	movs	r3, #1
 800965e:	e069      	b.n	8009734 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009666:	f001 fa41 	bl	800aaec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800966a:	2300      	movs	r3, #0
 800966c:	e062      	b.n	8009734 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800966e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009674:	f107 0310 	add.w	r3, r7, #16
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fe6f 	bl	800a35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009682:	f001 fa33 	bl	800aaec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009686:	f000 fc1d 	bl	8009ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800968a:	f001 f9fd 	bl	800aa88 <vPortEnterCritical>
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009694:	b25b      	sxtb	r3, r3
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d103      	bne.n	80096a4 <xQueueReceive+0x128>
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096aa:	b25b      	sxtb	r3, r3
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b0:	d103      	bne.n	80096ba <xQueueReceive+0x13e>
 80096b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096ba:	f001 fa17 	bl	800aaec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096be:	1d3a      	adds	r2, r7, #4
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fe5e 	bl	800a388 <xTaskCheckForTimeOut>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d123      	bne.n	800971a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096d4:	f000 f998 	bl	8009a08 <prvIsQueueEmpty>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d017      	beq.n	800970e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e0:	3324      	adds	r3, #36	@ 0x24
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fdae 	bl	800a248 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096ee:	f000 f939 	bl	8009964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096f2:	f000 fbf5 	bl	8009ee0 <xTaskResumeAll>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d189      	bne.n	8009610 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80096fc:	4b0f      	ldr	r3, [pc, #60]	@ (800973c <xQueueReceive+0x1c0>)
 80096fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	e780      	b.n	8009610 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800970e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009710:	f000 f928 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009714:	f000 fbe4 	bl	8009ee0 <xTaskResumeAll>
 8009718:	e77a      	b.n	8009610 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800971a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971c:	f000 f922 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009720:	f000 fbde 	bl	8009ee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009726:	f000 f96f 	bl	8009a08 <prvIsQueueEmpty>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	f43f af6f 	beq.w	8009610 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009732:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009734:	4618      	mov	r0, r3
 8009736:	3730      	adds	r7, #48	@ 0x30
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	e000ed04 	.word	0xe000ed04

08009740 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08e      	sub	sp, #56	@ 0x38
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	623b      	str	r3, [r7, #32]
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	e7fd      	b.n	800976a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <xQueueReceiveFromISR+0x3c>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <xQueueReceiveFromISR+0x40>
 800977c:	2301      	movs	r3, #1
 800977e:	e000      	b.n	8009782 <xQueueReceiveFromISR+0x42>
 8009780:	2300      	movs	r3, #0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10b      	bne.n	800979e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	61fb      	str	r3, [r7, #28]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800979e:	f001 fa53 	bl	800ac48 <vPortValidateInterruptPriority>
	__asm volatile
 80097a2:	f3ef 8211 	mrs	r2, BASEPRI
 80097a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	61ba      	str	r2, [r7, #24]
 80097b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d02f      	beq.n	800982a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80097d8:	f000 f89e 	bl	8009918 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	1e5a      	subs	r2, r3, #1
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ec:	d112      	bne.n	8009814 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	3310      	adds	r3, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fd4a 	bl	800a294 <xTaskRemoveFromEventList>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	e007      	b.n	8009824 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009818:	3301      	adds	r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	b25a      	sxtb	r2, r3
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009824:	2301      	movs	r3, #1
 8009826:	637b      	str	r3, [r7, #52]	@ 0x34
 8009828:	e001      	b.n	800982e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800982a:	2300      	movs	r3, #0
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f383 8811 	msr	BASEPRI, r3
}
 8009838:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800983a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800983c:	4618      	mov	r0, r3
 800983e:	3738      	adds	r7, #56	@ 0x38
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d14d      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 feee 	bl	800a650 <xTaskPriorityDisinherit>
 8009874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	e043      	b.n	8009906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d119      	bne.n	80098b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6858      	ldr	r0, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	461a      	mov	r2, r3
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	f002 f810 	bl	800b8b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d32b      	bcc.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
 80098b6:	e026      	b.n	8009906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68d8      	ldr	r0, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c0:	461a      	mov	r2, r3
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	f001 fff6 	bl	800b8b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d0:	425b      	negs	r3, r3
 80098d2:	441a      	add	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d207      	bcs.n	80098f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ec:	425b      	negs	r3, r3
 80098ee:	441a      	add	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d105      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3b01      	subs	r3, #1
 8009904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800990e:	697b      	ldr	r3, [r7, #20]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d018      	beq.n	800995c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009932:	441a      	add	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	429a      	cmp	r2, r3
 8009942:	d303      	bcc.n	800994c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68d9      	ldr	r1, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	461a      	mov	r2, r3
 8009956:	6838      	ldr	r0, [r7, #0]
 8009958:	f001 ffac 	bl	800b8b4 <memcpy>
	}
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800996c:	f001 f88c 	bl	800aa88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009978:	e011      	b.n	800999e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	d012      	beq.n	80099a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3324      	adds	r3, #36	@ 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fc84 	bl	800a294 <xTaskRemoveFromEventList>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009992:	f000 fd5d 	bl	800a450 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	3b01      	subs	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800999e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dce9      	bgt.n	800997a <prvUnlockQueue+0x16>
 80099a6:	e000      	b.n	80099aa <prvUnlockQueue+0x46>
					break;
 80099a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	22ff      	movs	r2, #255	@ 0xff
 80099ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 f89b 	bl	800aaec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099b6:	f001 f867 	bl	800aa88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099c2:	e011      	b.n	80099e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d012      	beq.n	80099f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3310      	adds	r3, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fc5f 	bl	800a294 <xTaskRemoveFromEventList>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099dc:	f000 fd38 	bl	800a450 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dce9      	bgt.n	80099c4 <prvUnlockQueue+0x60>
 80099f0:	e000      	b.n	80099f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	22ff      	movs	r2, #255	@ 0xff
 80099f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80099fc:	f001 f876 	bl	800aaec <vPortExitCritical>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a10:	f001 f83a 	bl	800aa88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e001      	b.n	8009a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a26:	f001 f861 	bl	800aaec <vPortExitCritical>

	return xReturn;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a3c:	f001 f824 	bl	800aa88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d102      	bne.n	8009a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e001      	b.n	8009a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f001 f849 	bl	800aaec <vPortExitCritical>

	return xReturn;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	@ 0x38
 8009a68:	af04      	add	r7, sp, #16
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	623b      	str	r3, [r7, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <xTaskCreateStatic+0x4a>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	61fb      	str	r3, [r7, #28]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aae:	2354      	movs	r3, #84	@ 0x54
 8009ab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b54      	cmp	r3, #84	@ 0x54
 8009ab6:	d00b      	beq.n	8009ad0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	61bb      	str	r3, [r7, #24]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ad0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01e      	beq.n	8009b16 <xTaskCreateStatic+0xb2>
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01b      	beq.n	8009b16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ae6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009af0:	2300      	movs	r3, #0
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	9302      	str	r3, [sp, #8]
 8009af8:	f107 0314 	add.w	r3, r7, #20
 8009afc:	9301      	str	r3, [sp, #4]
 8009afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	68b9      	ldr	r1, [r7, #8]
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f850 	bl	8009bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b10:	f000 f8d6 	bl	8009cc0 <prvAddNewTaskToReadyList>
 8009b14:	e001      	b.n	8009b1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b1a:	697b      	ldr	r3, [r7, #20]
	}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3728      	adds	r7, #40	@ 0x28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08c      	sub	sp, #48	@ 0x30
 8009b28:	af04      	add	r7, sp, #16
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b34:	88fb      	ldrh	r3, [r7, #6]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 f8c7 	bl	800accc <pvPortMalloc>
 8009b3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b46:	2054      	movs	r0, #84	@ 0x54
 8009b48:	f001 f8c0 	bl	800accc <pvPortMalloc>
 8009b4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b5a:	e005      	b.n	8009b68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b5c:	6978      	ldr	r0, [r7, #20]
 8009b5e:	f001 f983 	bl	800ae68 <vPortFree>
 8009b62:	e001      	b.n	8009b68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d017      	beq.n	8009b9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b76:	88fa      	ldrh	r2, [r7, #6]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	9302      	str	r3, [sp, #8]
 8009b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f80e 	bl	8009bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b92:	69f8      	ldr	r0, [r7, #28]
 8009b94:	f000 f894 	bl	8009cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	e002      	b.n	8009ba4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ba4:	69bb      	ldr	r3, [r7, #24]
	}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b088      	sub	sp, #32
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	f023 0307 	bic.w	r3, r3, #7
 8009bd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	f003 0307 	and.w	r3, r3, #7
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00b      	beq.n	8009bf8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	617b      	str	r3, [r7, #20]
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	e7fd      	b.n	8009bf4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01f      	beq.n	8009c3e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61fb      	str	r3, [r7, #28]
 8009c02:	e012      	b.n	8009c2a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	7819      	ldrb	r1, [r3, #0]
 8009c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	3334      	adds	r3, #52	@ 0x34
 8009c14:	460a      	mov	r2, r1
 8009c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d006      	beq.n	8009c32 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	3301      	adds	r3, #1
 8009c28:	61fb      	str	r3, [r7, #28]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	2b0f      	cmp	r3, #15
 8009c2e:	d9e9      	bls.n	8009c04 <prvInitialiseNewTask+0x56>
 8009c30:	e000      	b.n	8009c34 <prvInitialiseNewTask+0x86>
			{
				break;
 8009c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c3c:	e003      	b.n	8009c46 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	2b06      	cmp	r3, #6
 8009c4a:	d901      	bls.n	8009c50 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c4c:	2306      	movs	r3, #6
 8009c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c5a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	2200      	movs	r2, #0
 8009c60:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	3304      	adds	r3, #4
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff f912 	bl	8008e90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	3318      	adds	r3, #24
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff f90d 	bl	8008e90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	f1c3 0207 	rsb	r2, r3, #7
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	2200      	movs	r2, #0
 8009c90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	68f9      	ldr	r1, [r7, #12]
 8009c9e:	69b8      	ldr	r0, [r7, #24]
 8009ca0:	f000 fdc4 	bl	800a82c <pxPortInitialiseStack>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
	...

08009cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cc8:	f000 fede 	bl	800aa88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8009d78 <prvAddNewTaskToReadyList+0xb8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	4a29      	ldr	r2, [pc, #164]	@ (8009d78 <prvAddNewTaskToReadyList+0xb8>)
 8009cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cd6:	4b29      	ldr	r3, [pc, #164]	@ (8009d7c <prvAddNewTaskToReadyList+0xbc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d109      	bne.n	8009cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cde:	4a27      	ldr	r2, [pc, #156]	@ (8009d7c <prvAddNewTaskToReadyList+0xbc>)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ce4:	4b24      	ldr	r3, [pc, #144]	@ (8009d78 <prvAddNewTaskToReadyList+0xb8>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d110      	bne.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cec:	f000 fbd4 	bl	800a498 <prvInitialiseTaskLists>
 8009cf0:	e00d      	b.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cf2:	4b23      	ldr	r3, [pc, #140]	@ (8009d80 <prvAddNewTaskToReadyList+0xc0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d109      	bne.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cfa:	4b20      	ldr	r3, [pc, #128]	@ (8009d7c <prvAddNewTaskToReadyList+0xbc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d802      	bhi.n	8009d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d08:	4a1c      	ldr	r2, [pc, #112]	@ (8009d7c <prvAddNewTaskToReadyList+0xbc>)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009d84 <prvAddNewTaskToReadyList+0xc4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	3301      	adds	r3, #1
 8009d14:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <prvAddNewTaskToReadyList+0xc4>)
 8009d16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	409a      	lsls	r2, r3
 8009d20:	4b19      	ldr	r3, [pc, #100]	@ (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	4a18      	ldr	r2, [pc, #96]	@ (8009d88 <prvAddNewTaskToReadyList+0xc8>)
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2e:	4613      	mov	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4a15      	ldr	r2, [pc, #84]	@ (8009d8c <prvAddNewTaskToReadyList+0xcc>)
 8009d38:	441a      	add	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7ff f8b2 	bl	8008eaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d46:	f000 fed1 	bl	800aaec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d80 <prvAddNewTaskToReadyList+0xc0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00e      	beq.n	8009d70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d52:	4b0a      	ldr	r3, [pc, #40]	@ (8009d7c <prvAddNewTaskToReadyList+0xbc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d207      	bcs.n	8009d70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d60:	4b0b      	ldr	r3, [pc, #44]	@ (8009d90 <prvAddNewTaskToReadyList+0xd0>)
 8009d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20000538 	.word	0x20000538
 8009d7c:	20000438 	.word	0x20000438
 8009d80:	20000544 	.word	0x20000544
 8009d84:	20000554 	.word	0x20000554
 8009d88:	20000540 	.word	0x20000540
 8009d8c:	2000043c 	.word	0x2000043c
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d018      	beq.n	8009dd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <vTaskDelay+0x64>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <vTaskDelay+0x32>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60bb      	str	r3, [r7, #8]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009dc6:	f000 f87d 	bl	8009ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dca:	2100      	movs	r1, #0
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fcc7 	bl	800a760 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009dd2:	f000 f885 	bl	8009ee0 <xTaskResumeAll>
 8009dd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d107      	bne.n	8009dee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009dde:	4b07      	ldr	r3, [pc, #28]	@ (8009dfc <vTaskDelay+0x68>)
 8009de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dee:	bf00      	nop
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000560 	.word	0x20000560
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	@ 0x28
 8009e04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e0e:	463a      	mov	r2, r7
 8009e10:	1d39      	adds	r1, r7, #4
 8009e12:	f107 0308 	add.w	r3, r7, #8
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7f6 fb52 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	2300      	movs	r3, #0
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	460a      	mov	r2, r1
 8009e2e:	491f      	ldr	r1, [pc, #124]	@ (8009eac <vTaskStartScheduler+0xac>)
 8009e30:	481f      	ldr	r0, [pc, #124]	@ (8009eb0 <vTaskStartScheduler+0xb0>)
 8009e32:	f7ff fe17 	bl	8009a64 <xTaskCreateStatic>
 8009e36:	4603      	mov	r3, r0
 8009e38:	4a1e      	ldr	r2, [pc, #120]	@ (8009eb4 <vTaskStartScheduler+0xb4>)
 8009e3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009eb4 <vTaskStartScheduler+0xb4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e001      	b.n	8009e4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d116      	bne.n	8009e82 <vTaskStartScheduler+0x82>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	613b      	str	r3, [r7, #16]
}
 8009e66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e68:	4b13      	ldr	r3, [pc, #76]	@ (8009eb8 <vTaskStartScheduler+0xb8>)
 8009e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e70:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <vTaskStartScheduler+0xbc>)
 8009e72:	2201      	movs	r2, #1
 8009e74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e76:	4b12      	ldr	r3, [pc, #72]	@ (8009ec0 <vTaskStartScheduler+0xc0>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e7c:	f000 fd60 	bl	800a940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e80:	e00f      	b.n	8009ea2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e88:	d10b      	bne.n	8009ea2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	60fb      	str	r3, [r7, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <vTaskStartScheduler+0x9e>
}
 8009ea2:	bf00      	nop
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800b9e0 	.word	0x0800b9e0
 8009eb0:	0800a469 	.word	0x0800a469
 8009eb4:	2000055c 	.word	0x2000055c
 8009eb8:	20000558 	.word	0x20000558
 8009ebc:	20000544 	.word	0x20000544
 8009ec0:	2000053c 	.word	0x2000053c

08009ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ec8:	4b04      	ldr	r3, [pc, #16]	@ (8009edc <vTaskSuspendAll+0x18>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	4a03      	ldr	r2, [pc, #12]	@ (8009edc <vTaskSuspendAll+0x18>)
 8009ed0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ed2:	bf00      	nop
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20000560 	.word	0x20000560

08009ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eee:	4b42      	ldr	r3, [pc, #264]	@ (8009ff8 <xTaskResumeAll+0x118>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <xTaskResumeAll+0x2e>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	603b      	str	r3, [r7, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f0e:	f000 fdbb 	bl	800aa88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f12:	4b39      	ldr	r3, [pc, #228]	@ (8009ff8 <xTaskResumeAll+0x118>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	4a37      	ldr	r2, [pc, #220]	@ (8009ff8 <xTaskResumeAll+0x118>)
 8009f1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f1c:	4b36      	ldr	r3, [pc, #216]	@ (8009ff8 <xTaskResumeAll+0x118>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d161      	bne.n	8009fe8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f24:	4b35      	ldr	r3, [pc, #212]	@ (8009ffc <xTaskResumeAll+0x11c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d05d      	beq.n	8009fe8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f2c:	e02e      	b.n	8009f8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2e:	4b34      	ldr	r3, [pc, #208]	@ (800a000 <xTaskResumeAll+0x120>)
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3318      	adds	r3, #24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff f812 	bl	8008f64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff f80d 	bl	8008f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4e:	2201      	movs	r2, #1
 8009f50:	409a      	lsls	r2, r3
 8009f52:	4b2c      	ldr	r3, [pc, #176]	@ (800a004 <xTaskResumeAll+0x124>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	4a2a      	ldr	r2, [pc, #168]	@ (800a004 <xTaskResumeAll+0x124>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4a27      	ldr	r2, [pc, #156]	@ (800a008 <xTaskResumeAll+0x128>)
 8009f6a:	441a      	add	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3304      	adds	r3, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fe ff99 	bl	8008eaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7c:	4b23      	ldr	r3, [pc, #140]	@ (800a00c <xTaskResumeAll+0x12c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d302      	bcc.n	8009f8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f86:	4b22      	ldr	r3, [pc, #136]	@ (800a010 <xTaskResumeAll+0x130>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f8c:	4b1c      	ldr	r3, [pc, #112]	@ (800a000 <xTaskResumeAll+0x120>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1cc      	bne.n	8009f2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f9a:	f000 fb1b 	bl	800a5d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f9e:	4b1d      	ldr	r3, [pc, #116]	@ (800a014 <xTaskResumeAll+0x134>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d010      	beq.n	8009fcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009faa:	f000 f837 	bl	800a01c <xTaskIncrementTick>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fb4:	4b16      	ldr	r3, [pc, #88]	@ (800a010 <xTaskResumeAll+0x130>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f1      	bne.n	8009faa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fc6:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <xTaskResumeAll+0x134>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fcc:	4b10      	ldr	r3, [pc, #64]	@ (800a010 <xTaskResumeAll+0x130>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d009      	beq.n	8009fe8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	@ (800a018 <xTaskResumeAll+0x138>)
 8009fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fe8:	f000 fd80 	bl	800aaec <vPortExitCritical>

	return xAlreadyYielded;
 8009fec:	68bb      	ldr	r3, [r7, #8]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000560 	.word	0x20000560
 8009ffc:	20000538 	.word	0x20000538
 800a000:	200004f8 	.word	0x200004f8
 800a004:	20000540 	.word	0x20000540
 800a008:	2000043c 	.word	0x2000043c
 800a00c:	20000438 	.word	0x20000438
 800a010:	2000054c 	.word	0x2000054c
 800a014:	20000548 	.word	0x20000548
 800a018:	e000ed04 	.word	0xe000ed04

0800a01c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a026:	4b4f      	ldr	r3, [pc, #316]	@ (800a164 <xTaskIncrementTick+0x148>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f040 808f 	bne.w	800a14e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a030:	4b4d      	ldr	r3, [pc, #308]	@ (800a168 <xTaskIncrementTick+0x14c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a038:	4a4b      	ldr	r2, [pc, #300]	@ (800a168 <xTaskIncrementTick+0x14c>)
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d121      	bne.n	800a088 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a044:	4b49      	ldr	r3, [pc, #292]	@ (800a16c <xTaskIncrementTick+0x150>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	603b      	str	r3, [r7, #0]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <xTaskIncrementTick+0x46>
 800a066:	4b41      	ldr	r3, [pc, #260]	@ (800a16c <xTaskIncrementTick+0x150>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	4b40      	ldr	r3, [pc, #256]	@ (800a170 <xTaskIncrementTick+0x154>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a3e      	ldr	r2, [pc, #248]	@ (800a16c <xTaskIncrementTick+0x150>)
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	4a3e      	ldr	r2, [pc, #248]	@ (800a170 <xTaskIncrementTick+0x154>)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	4b3e      	ldr	r3, [pc, #248]	@ (800a174 <xTaskIncrementTick+0x158>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3301      	adds	r3, #1
 800a080:	4a3c      	ldr	r2, [pc, #240]	@ (800a174 <xTaskIncrementTick+0x158>)
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	f000 faa6 	bl	800a5d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a088:	4b3b      	ldr	r3, [pc, #236]	@ (800a178 <xTaskIncrementTick+0x15c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d348      	bcc.n	800a124 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a092:	4b36      	ldr	r3, [pc, #216]	@ (800a16c <xTaskIncrementTick+0x150>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09c:	4b36      	ldr	r3, [pc, #216]	@ (800a178 <xTaskIncrementTick+0x15c>)
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a2:	601a      	str	r2, [r3, #0]
					break;
 800a0a4:	e03e      	b.n	800a124 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a6:	4b31      	ldr	r3, [pc, #196]	@ (800a16c <xTaskIncrementTick+0x150>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d203      	bcs.n	800a0c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0be:	4a2e      	ldr	r2, [pc, #184]	@ (800a178 <xTaskIncrementTick+0x15c>)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0c4:	e02e      	b.n	800a124 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe ff4a 	bl	8008f64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	3318      	adds	r3, #24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe ff41 	bl	8008f64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	409a      	lsls	r2, r3
 800a0ea:	4b24      	ldr	r3, [pc, #144]	@ (800a17c <xTaskIncrementTick+0x160>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	4a22      	ldr	r2, [pc, #136]	@ (800a17c <xTaskIncrementTick+0x160>)
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4a1f      	ldr	r2, [pc, #124]	@ (800a180 <xTaskIncrementTick+0x164>)
 800a102:	441a      	add	r2, r3
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fe fecd 	bl	8008eaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a114:	4b1b      	ldr	r3, [pc, #108]	@ (800a184 <xTaskIncrementTick+0x168>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d3b9      	bcc.n	800a092 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a11e:	2301      	movs	r3, #1
 800a120:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a122:	e7b6      	b.n	800a092 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a124:	4b17      	ldr	r3, [pc, #92]	@ (800a184 <xTaskIncrementTick+0x168>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12a:	4915      	ldr	r1, [pc, #84]	@ (800a180 <xTaskIncrementTick+0x164>)
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d901      	bls.n	800a140 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a140:	4b11      	ldr	r3, [pc, #68]	@ (800a188 <xTaskIncrementTick+0x16c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d007      	beq.n	800a158 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e004      	b.n	800a158 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a14e:	4b0f      	ldr	r3, [pc, #60]	@ (800a18c <xTaskIncrementTick+0x170>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	4a0d      	ldr	r2, [pc, #52]	@ (800a18c <xTaskIncrementTick+0x170>)
 800a156:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a158:	697b      	ldr	r3, [r7, #20]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20000560 	.word	0x20000560
 800a168:	2000053c 	.word	0x2000053c
 800a16c:	200004f0 	.word	0x200004f0
 800a170:	200004f4 	.word	0x200004f4
 800a174:	20000550 	.word	0x20000550
 800a178:	20000558 	.word	0x20000558
 800a17c:	20000540 	.word	0x20000540
 800a180:	2000043c 	.word	0x2000043c
 800a184:	20000438 	.word	0x20000438
 800a188:	2000054c 	.word	0x2000054c
 800a18c:	20000548 	.word	0x20000548

0800a190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a196:	4b27      	ldr	r3, [pc, #156]	@ (800a234 <vTaskSwitchContext+0xa4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a19e:	4b26      	ldr	r3, [pc, #152]	@ (800a238 <vTaskSwitchContext+0xa8>)
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1a4:	e040      	b.n	800a228 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a1a6:	4b24      	ldr	r3, [pc, #144]	@ (800a238 <vTaskSwitchContext+0xa8>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ac:	4b23      	ldr	r3, [pc, #140]	@ (800a23c <vTaskSwitchContext+0xac>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	fab3 f383 	clz	r3, r3
 800a1b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	f1c3 031f 	rsb	r3, r3, #31
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	491f      	ldr	r1, [pc, #124]	@ (800a240 <vTaskSwitchContext+0xb0>)
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <vTaskSwitchContext+0x5e>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	607b      	str	r3, [r7, #4]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vTaskSwitchContext+0x5a>
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4a11      	ldr	r2, [pc, #68]	@ (800a240 <vTaskSwitchContext+0xb0>)
 800a1fa:	4413      	add	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	605a      	str	r2, [r3, #4]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	3308      	adds	r3, #8
 800a210:	429a      	cmp	r2, r3
 800a212:	d104      	bne.n	800a21e <vTaskSwitchContext+0x8e>
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	4a07      	ldr	r2, [pc, #28]	@ (800a244 <vTaskSwitchContext+0xb4>)
 800a226:	6013      	str	r3, [r2, #0]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	20000560 	.word	0x20000560
 800a238:	2000054c 	.word	0x2000054c
 800a23c:	20000540 	.word	0x20000540
 800a240:	2000043c 	.word	0x2000043c
 800a244:	20000438 	.word	0x20000438

0800a248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10b      	bne.n	800a270 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a270:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <vTaskPlaceOnEventList+0x48>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3318      	adds	r3, #24
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7fe fe3a 	bl	8008ef2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a27e:	2101      	movs	r1, #1
 800a280:	6838      	ldr	r0, [r7, #0]
 800a282:	f000 fa6d 	bl	800a760 <prvAddCurrentTaskToDelayedList>
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000438 	.word	0x20000438

0800a294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10b      	bne.n	800a2c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	60fb      	str	r3, [r7, #12]
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	e7fd      	b.n	800a2be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	3318      	adds	r3, #24
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fe4c 	bl	8008f64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a344 <xTaskRemoveFromEventList+0xb0>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d11c      	bne.n	800a30e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe fe43 	bl	8008f64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	409a      	lsls	r2, r3
 800a2e6:	4b18      	ldr	r3, [pc, #96]	@ (800a348 <xTaskRemoveFromEventList+0xb4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	4a16      	ldr	r2, [pc, #88]	@ (800a348 <xTaskRemoveFromEventList+0xb4>)
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4a13      	ldr	r2, [pc, #76]	@ (800a34c <xTaskRemoveFromEventList+0xb8>)
 800a2fe:	441a      	add	r2, r3
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	3304      	adds	r3, #4
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f7fe fdcf 	bl	8008eaa <vListInsertEnd>
 800a30c:	e005      	b.n	800a31a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	3318      	adds	r3, #24
 800a312:	4619      	mov	r1, r3
 800a314:	480e      	ldr	r0, [pc, #56]	@ (800a350 <xTaskRemoveFromEventList+0xbc>)
 800a316:	f7fe fdc8 	bl	8008eaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31e:	4b0d      	ldr	r3, [pc, #52]	@ (800a354 <xTaskRemoveFromEventList+0xc0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a324:	429a      	cmp	r2, r3
 800a326:	d905      	bls.n	800a334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a328:	2301      	movs	r3, #1
 800a32a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	@ (800a358 <xTaskRemoveFromEventList+0xc4>)
 800a32e:	2201      	movs	r2, #1
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	e001      	b.n	800a338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000560 	.word	0x20000560
 800a348:	20000540 	.word	0x20000540
 800a34c:	2000043c 	.word	0x2000043c
 800a350:	200004f8 	.word	0x200004f8
 800a354:	20000438 	.word	0x20000438
 800a358:	2000054c 	.word	0x2000054c

0800a35c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <vTaskInternalSetTimeOutState+0x24>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a36c:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <vTaskInternalSetTimeOutState+0x28>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	605a      	str	r2, [r3, #4]
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	20000550 	.word	0x20000550
 800a384:	2000053c 	.word	0x2000053c

0800a388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	613b      	str	r3, [r7, #16]
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60fb      	str	r3, [r7, #12]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a3ce:	f000 fb5b 	bl	800aa88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <xTaskCheckForTimeOut+0xc0>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d102      	bne.n	800a3f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	e023      	b.n	800a43a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	4b15      	ldr	r3, [pc, #84]	@ (800a44c <xTaskCheckForTimeOut+0xc4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d007      	beq.n	800a40e <xTaskCheckForTimeOut+0x86>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	d302      	bcc.n	800a40e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e015      	b.n	800a43a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	429a      	cmp	r2, r3
 800a416:	d20b      	bcs.n	800a430 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	1ad2      	subs	r2, r2, r3
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ff99 	bl	800a35c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	61fb      	str	r3, [r7, #28]
 800a42e:	e004      	b.n	800a43a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a436:	2301      	movs	r3, #1
 800a438:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a43a:	f000 fb57 	bl	800aaec <vPortExitCritical>

	return xReturn;
 800a43e:	69fb      	ldr	r3, [r7, #28]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3720      	adds	r7, #32
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	2000053c 	.word	0x2000053c
 800a44c:	20000550 	.word	0x20000550

0800a450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a454:	4b03      	ldr	r3, [pc, #12]	@ (800a464 <vTaskMissedYield+0x14>)
 800a456:	2201      	movs	r2, #1
 800a458:	601a      	str	r2, [r3, #0]
}
 800a45a:	bf00      	nop
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	2000054c 	.word	0x2000054c

0800a468 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a470:	f000 f852 	bl	800a518 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a474:	4b06      	ldr	r3, [pc, #24]	@ (800a490 <prvIdleTask+0x28>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d9f9      	bls.n	800a470 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a47c:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <prvIdleTask+0x2c>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a48c:	e7f0      	b.n	800a470 <prvIdleTask+0x8>
 800a48e:	bf00      	nop
 800a490:	2000043c 	.word	0x2000043c
 800a494:	e000ed04 	.word	0xe000ed04

0800a498 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a49e:	2300      	movs	r3, #0
 800a4a0:	607b      	str	r3, [r7, #4]
 800a4a2:	e00c      	b.n	800a4be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4a12      	ldr	r2, [pc, #72]	@ (800a4f8 <prvInitialiseTaskLists+0x60>)
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fccc 	bl	8008e50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	607b      	str	r3, [r7, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b06      	cmp	r3, #6
 800a4c2:	d9ef      	bls.n	800a4a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4c4:	480d      	ldr	r0, [pc, #52]	@ (800a4fc <prvInitialiseTaskLists+0x64>)
 800a4c6:	f7fe fcc3 	bl	8008e50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4ca:	480d      	ldr	r0, [pc, #52]	@ (800a500 <prvInitialiseTaskLists+0x68>)
 800a4cc:	f7fe fcc0 	bl	8008e50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4d0:	480c      	ldr	r0, [pc, #48]	@ (800a504 <prvInitialiseTaskLists+0x6c>)
 800a4d2:	f7fe fcbd 	bl	8008e50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4d6:	480c      	ldr	r0, [pc, #48]	@ (800a508 <prvInitialiseTaskLists+0x70>)
 800a4d8:	f7fe fcba 	bl	8008e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4dc:	480b      	ldr	r0, [pc, #44]	@ (800a50c <prvInitialiseTaskLists+0x74>)
 800a4de:	f7fe fcb7 	bl	8008e50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <prvInitialiseTaskLists+0x78>)
 800a4e4:	4a05      	ldr	r2, [pc, #20]	@ (800a4fc <prvInitialiseTaskLists+0x64>)
 800a4e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <prvInitialiseTaskLists+0x7c>)
 800a4ea:	4a05      	ldr	r2, [pc, #20]	@ (800a500 <prvInitialiseTaskLists+0x68>)
 800a4ec:	601a      	str	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	2000043c 	.word	0x2000043c
 800a4fc:	200004c8 	.word	0x200004c8
 800a500:	200004dc 	.word	0x200004dc
 800a504:	200004f8 	.word	0x200004f8
 800a508:	2000050c 	.word	0x2000050c
 800a50c:	20000524 	.word	0x20000524
 800a510:	200004f0 	.word	0x200004f0
 800a514:	200004f4 	.word	0x200004f4

0800a518 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a51e:	e019      	b.n	800a554 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a520:	f000 fab2 	bl	800aa88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a524:	4b10      	ldr	r3, [pc, #64]	@ (800a568 <prvCheckTasksWaitingTermination+0x50>)
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe fd17 	bl	8008f64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a536:	4b0d      	ldr	r3, [pc, #52]	@ (800a56c <prvCheckTasksWaitingTermination+0x54>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	4a0b      	ldr	r2, [pc, #44]	@ (800a56c <prvCheckTasksWaitingTermination+0x54>)
 800a53e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a540:	4b0b      	ldr	r3, [pc, #44]	@ (800a570 <prvCheckTasksWaitingTermination+0x58>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3b01      	subs	r3, #1
 800a546:	4a0a      	ldr	r2, [pc, #40]	@ (800a570 <prvCheckTasksWaitingTermination+0x58>)
 800a548:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a54a:	f000 facf 	bl	800aaec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f810 	bl	800a574 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a554:	4b06      	ldr	r3, [pc, #24]	@ (800a570 <prvCheckTasksWaitingTermination+0x58>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e1      	bne.n	800a520 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a55c:	bf00      	nop
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	2000050c 	.word	0x2000050c
 800a56c:	20000538 	.word	0x20000538
 800a570:	20000520 	.word	0x20000520

0800a574 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a582:	2b00      	cmp	r3, #0
 800a584:	d108      	bne.n	800a598 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fc6c 	bl	800ae68 <vPortFree>
				vPortFree( pxTCB );
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fc69 	bl	800ae68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a596:	e019      	b.n	800a5cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d103      	bne.n	800a5aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fc60 	bl	800ae68 <vPortFree>
	}
 800a5a8:	e010      	b.n	800a5cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d00b      	beq.n	800a5cc <prvDeleteTCB+0x58>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60fb      	str	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <prvDeleteTCB+0x54>
	}
 800a5cc:	bf00      	nop
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5da:	4b0c      	ldr	r3, [pc, #48]	@ (800a60c <prvResetNextTaskUnblockTime+0x38>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d104      	bne.n	800a5ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a610 <prvResetNextTaskUnblockTime+0x3c>)
 800a5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5ec:	e008      	b.n	800a600 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ee:	4b07      	ldr	r3, [pc, #28]	@ (800a60c <prvResetNextTaskUnblockTime+0x38>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	4a04      	ldr	r2, [pc, #16]	@ (800a610 <prvResetNextTaskUnblockTime+0x3c>)
 800a5fe:	6013      	str	r3, [r2, #0]
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	200004f0 	.word	0x200004f0
 800a610:	20000558 	.word	0x20000558

0800a614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a61a:	4b0b      	ldr	r3, [pc, #44]	@ (800a648 <xTaskGetSchedulerState+0x34>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a622:	2301      	movs	r3, #1
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	e008      	b.n	800a63a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a628:	4b08      	ldr	r3, [pc, #32]	@ (800a64c <xTaskGetSchedulerState+0x38>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a630:	2302      	movs	r3, #2
 800a632:	607b      	str	r3, [r7, #4]
 800a634:	e001      	b.n	800a63a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a636:	2300      	movs	r3, #0
 800a638:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a63a:	687b      	ldr	r3, [r7, #4]
	}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	20000544 	.word	0x20000544
 800a64c:	20000560 	.word	0x20000560

0800a650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d070      	beq.n	800a748 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a666:	4b3b      	ldr	r3, [pc, #236]	@ (800a754 <xTaskPriorityDisinherit+0x104>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d00b      	beq.n	800a688 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	60bb      	str	r3, [r7, #8]
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	e7fd      	b.n	800a6a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ac:	1e5a      	subs	r2, r3, #1
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d044      	beq.n	800a748 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d140      	bne.n	800a748 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fc4a 	bl	8008f64 <uxListRemove>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d115      	bne.n	800a702 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6da:	491f      	ldr	r1, [pc, #124]	@ (800a758 <xTaskPriorityDisinherit+0x108>)
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <xTaskPriorityDisinherit+0xb2>
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43da      	mvns	r2, r3
 800a6f8:	4b18      	ldr	r3, [pc, #96]	@ (800a75c <xTaskPriorityDisinherit+0x10c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	4a17      	ldr	r2, [pc, #92]	@ (800a75c <xTaskPriorityDisinherit+0x10c>)
 800a700:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	f1c3 0207 	rsb	r2, r3, #7
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71a:	2201      	movs	r2, #1
 800a71c:	409a      	lsls	r2, r3
 800a71e:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <xTaskPriorityDisinherit+0x10c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4313      	orrs	r3, r2
 800a724:	4a0d      	ldr	r2, [pc, #52]	@ (800a75c <xTaskPriorityDisinherit+0x10c>)
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4a08      	ldr	r2, [pc, #32]	@ (800a758 <xTaskPriorityDisinherit+0x108>)
 800a736:	441a      	add	r2, r3
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	3304      	adds	r3, #4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7fe fbb3 	bl	8008eaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a744:	2301      	movs	r3, #1
 800a746:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a748:	697b      	ldr	r3, [r7, #20]
	}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20000438 	.word	0x20000438
 800a758:	2000043c 	.word	0x2000043c
 800a75c:	20000540 	.word	0x20000540

0800a760 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a76a:	4b29      	ldr	r3, [pc, #164]	@ (800a810 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a770:	4b28      	ldr	r3, [pc, #160]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3304      	adds	r3, #4
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fbf4 	bl	8008f64 <uxListRemove>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10b      	bne.n	800a79a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a782:	4b24      	ldr	r3, [pc, #144]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a788:	2201      	movs	r2, #1
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43da      	mvns	r2, r3
 800a790:	4b21      	ldr	r3, [pc, #132]	@ (800a818 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4013      	ands	r3, r2
 800a796:	4a20      	ldr	r2, [pc, #128]	@ (800a818 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a798:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a0:	d10a      	bne.n	800a7b8 <prvAddCurrentTaskToDelayedList+0x58>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	481a      	ldr	r0, [pc, #104]	@ (800a81c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7b2:	f7fe fb7a 	bl	8008eaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7b6:	e026      	b.n	800a806 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7c0:	4b14      	ldr	r3, [pc, #80]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d209      	bcs.n	800a7e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7d0:	4b13      	ldr	r3, [pc, #76]	@ (800a820 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fe fb88 	bl	8008ef2 <vListInsert>
}
 800a7e2:	e010      	b.n	800a806 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a814 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7fe fb7e 	bl	8008ef2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d202      	bcs.n	800a806 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a800:	4a09      	ldr	r2, [pc, #36]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6013      	str	r3, [r2, #0]
}
 800a806:	bf00      	nop
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	2000053c 	.word	0x2000053c
 800a814:	20000438 	.word	0x20000438
 800a818:	20000540 	.word	0x20000540
 800a81c:	20000524 	.word	0x20000524
 800a820:	200004f4 	.word	0x200004f4
 800a824:	200004f0 	.word	0x200004f0
 800a828:	20000558 	.word	0x20000558

0800a82c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3b04      	subs	r3, #4
 800a83c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b04      	subs	r3, #4
 800a84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f023 0201 	bic.w	r2, r3, #1
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3b04      	subs	r3, #4
 800a85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a85c:	4a0c      	ldr	r2, [pc, #48]	@ (800a890 <pxPortInitialiseStack+0x64>)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3b14      	subs	r3, #20
 800a866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3b04      	subs	r3, #4
 800a872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f06f 0202 	mvn.w	r2, #2
 800a87a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3b20      	subs	r3, #32
 800a880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	0800a895 	.word	0x0800a895

0800a894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a89e:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <prvTaskExitError+0x58>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d00b      	beq.n	800a8c0 <prvTaskExitError+0x2c>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	60fb      	str	r3, [r7, #12]
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <prvTaskExitError+0x28>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60bb      	str	r3, [r7, #8]
}
 800a8d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8d4:	bf00      	nop
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0fc      	beq.n	800a8d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	2000002c 	.word	0x2000002c

0800a8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8f0:	4b07      	ldr	r3, [pc, #28]	@ (800a910 <pxCurrentTCBConst2>)
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	6808      	ldr	r0, [r1, #0]
 800a8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fa:	f380 8809 	msr	PSP, r0
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8811 	msr	BASEPRI, r0
 800a90a:	4770      	bx	lr
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst2>:
 800a910:	20000438 	.word	0x20000438
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop

0800a918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a918:	4808      	ldr	r0, [pc, #32]	@ (800a93c <prvPortStartFirstTask+0x24>)
 800a91a:	6800      	ldr	r0, [r0, #0]
 800a91c:	6800      	ldr	r0, [r0, #0]
 800a91e:	f380 8808 	msr	MSP, r0
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f380 8814 	msr	CONTROL, r0
 800a92a:	b662      	cpsie	i
 800a92c:	b661      	cpsie	f
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	df00      	svc	0
 800a938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a93a:	bf00      	nop
 800a93c:	e000ed08 	.word	0xe000ed08

0800a940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a946:	4b47      	ldr	r3, [pc, #284]	@ (800aa64 <xPortStartScheduler+0x124>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a47      	ldr	r2, [pc, #284]	@ (800aa68 <xPortStartScheduler+0x128>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10b      	bne.n	800a968 <xPortStartScheduler+0x28>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	613b      	str	r3, [r7, #16]
}
 800a962:	bf00      	nop
 800a964:	bf00      	nop
 800a966:	e7fd      	b.n	800a964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a968:	4b3e      	ldr	r3, [pc, #248]	@ (800aa64 <xPortStartScheduler+0x124>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a3f      	ldr	r2, [pc, #252]	@ (800aa6c <xPortStartScheduler+0x12c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d10b      	bne.n	800a98a <xPortStartScheduler+0x4a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60fb      	str	r3, [r7, #12]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a98a:	4b39      	ldr	r3, [pc, #228]	@ (800aa70 <xPortStartScheduler+0x130>)
 800a98c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	22ff      	movs	r2, #255	@ 0xff
 800a99a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	4b31      	ldr	r3, [pc, #196]	@ (800aa74 <xPortStartScheduler+0x134>)
 800a9b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9b2:	4b31      	ldr	r3, [pc, #196]	@ (800aa78 <xPortStartScheduler+0x138>)
 800a9b4:	2207      	movs	r2, #7
 800a9b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9b8:	e009      	b.n	800a9ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800aa78 <xPortStartScheduler+0x138>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	4a2d      	ldr	r2, [pc, #180]	@ (800aa78 <xPortStartScheduler+0x138>)
 800a9c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d6:	2b80      	cmp	r3, #128	@ 0x80
 800a9d8:	d0ef      	beq.n	800a9ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9da:	4b27      	ldr	r3, [pc, #156]	@ (800aa78 <xPortStartScheduler+0x138>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f1c3 0307 	rsb	r3, r3, #7
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d00b      	beq.n	800a9fe <xPortStartScheduler+0xbe>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800aa78 <xPortStartScheduler+0x138>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	4a1c      	ldr	r2, [pc, #112]	@ (800aa78 <xPortStartScheduler+0x138>)
 800aa06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa08:	4b1b      	ldr	r3, [pc, #108]	@ (800aa78 <xPortStartScheduler+0x138>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa10:	4a19      	ldr	r2, [pc, #100]	@ (800aa78 <xPortStartScheduler+0x138>)
 800aa12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa1c:	4b17      	ldr	r3, [pc, #92]	@ (800aa7c <xPortStartScheduler+0x13c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a16      	ldr	r2, [pc, #88]	@ (800aa7c <xPortStartScheduler+0x13c>)
 800aa22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa28:	4b14      	ldr	r3, [pc, #80]	@ (800aa7c <xPortStartScheduler+0x13c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a13      	ldr	r2, [pc, #76]	@ (800aa7c <xPortStartScheduler+0x13c>)
 800aa2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa34:	f000 f8da 	bl	800abec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa38:	4b11      	ldr	r3, [pc, #68]	@ (800aa80 <xPortStartScheduler+0x140>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa3e:	f000 f8f9 	bl	800ac34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa42:	4b10      	ldr	r3, [pc, #64]	@ (800aa84 <xPortStartScheduler+0x144>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a0f      	ldr	r2, [pc, #60]	@ (800aa84 <xPortStartScheduler+0x144>)
 800aa48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa4e:	f7ff ff63 	bl	800a918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa52:	f7ff fb9d 	bl	800a190 <vTaskSwitchContext>
	prvTaskExitError();
 800aa56:	f7ff ff1d 	bl	800a894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	e000ed00 	.word	0xe000ed00
 800aa68:	410fc271 	.word	0x410fc271
 800aa6c:	410fc270 	.word	0x410fc270
 800aa70:	e000e400 	.word	0xe000e400
 800aa74:	20000564 	.word	0x20000564
 800aa78:	20000568 	.word	0x20000568
 800aa7c:	e000ed20 	.word	0xe000ed20
 800aa80:	2000002c 	.word	0x2000002c
 800aa84:	e000ef34 	.word	0xe000ef34

0800aa88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
}
 800aaa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <vPortEnterCritical+0x5c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	4a0e      	ldr	r2, [pc, #56]	@ (800aae4 <vPortEnterCritical+0x5c>)
 800aaaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aaac:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <vPortEnterCritical+0x5c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d110      	bne.n	800aad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aab4:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <vPortEnterCritical+0x60>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	603b      	str	r3, [r7, #0]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <vPortEnterCritical+0x4a>
	}
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	2000002c 	.word	0x2000002c
 800aae8:	e000ed04 	.word	0xe000ed04

0800aaec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaf2:	4b12      	ldr	r3, [pc, #72]	@ (800ab3c <vPortExitCritical+0x50>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10b      	bne.n	800ab12 <vPortExitCritical+0x26>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	607b      	str	r3, [r7, #4]
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	e7fd      	b.n	800ab0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab12:	4b0a      	ldr	r3, [pc, #40]	@ (800ab3c <vPortExitCritical+0x50>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	4a08      	ldr	r2, [pc, #32]	@ (800ab3c <vPortExitCritical+0x50>)
 800ab1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab1c:	4b07      	ldr	r3, [pc, #28]	@ (800ab3c <vPortExitCritical+0x50>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d105      	bne.n	800ab30 <vPortExitCritical+0x44>
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f383 8811 	msr	BASEPRI, r3
}
 800ab2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	2000002c 	.word	0x2000002c

0800ab40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab40:	f3ef 8009 	mrs	r0, PSP
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	4b15      	ldr	r3, [pc, #84]	@ (800aba0 <pxCurrentTCBConst>)
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	f01e 0f10 	tst.w	lr, #16
 800ab50:	bf08      	it	eq
 800ab52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5a:	6010      	str	r0, [r2, #0]
 800ab5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab64:	f380 8811 	msr	BASEPRI, r0
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f7ff fb0e 	bl	800a190 <vTaskSwitchContext>
 800ab74:	f04f 0000 	mov.w	r0, #0
 800ab78:	f380 8811 	msr	BASEPRI, r0
 800ab7c:	bc09      	pop	{r0, r3}
 800ab7e:	6819      	ldr	r1, [r3, #0]
 800ab80:	6808      	ldr	r0, [r1, #0]
 800ab82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab86:	f01e 0f10 	tst.w	lr, #16
 800ab8a:	bf08      	it	eq
 800ab8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab90:	f380 8809 	msr	PSP, r0
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	f3af 8000 	nop.w

0800aba0 <pxCurrentTCBConst>:
 800aba0:	20000438 	.word	0x20000438
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aba4:	bf00      	nop
 800aba6:	bf00      	nop

0800aba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	607b      	str	r3, [r7, #4]
}
 800abc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abc2:	f7ff fa2b 	bl	800a01c <xTaskIncrementTick>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abcc:	4b06      	ldr	r3, [pc, #24]	@ (800abe8 <xPortSysTickHandler+0x40>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	2300      	movs	r3, #0
 800abd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	f383 8811 	msr	BASEPRI, r3
}
 800abde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800abf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac20 <vPortSetupTimerInterrupt+0x34>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800abf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <vPortSetupTimerInterrupt+0x38>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800abfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <vPortSetupTimerInterrupt+0x3c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a0a      	ldr	r2, [pc, #40]	@ (800ac2c <vPortSetupTimerInterrupt+0x40>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	099b      	lsrs	r3, r3, #6
 800ac08:	4a09      	ldr	r2, [pc, #36]	@ (800ac30 <vPortSetupTimerInterrupt+0x44>)
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac0e:	4b04      	ldr	r3, [pc, #16]	@ (800ac20 <vPortSetupTimerInterrupt+0x34>)
 800ac10:	2207      	movs	r2, #7
 800ac12:	601a      	str	r2, [r3, #0]
}
 800ac14:	bf00      	nop
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	e000e010 	.word	0xe000e010
 800ac24:	e000e018 	.word	0xe000e018
 800ac28:	20000000 	.word	0x20000000
 800ac2c:	10624dd3 	.word	0x10624dd3
 800ac30:	e000e014 	.word	0xe000e014

0800ac34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ac44 <vPortEnableVFP+0x10>
 800ac38:	6801      	ldr	r1, [r0, #0]
 800ac3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ac3e:	6001      	str	r1, [r0, #0]
 800ac40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac42:	bf00      	nop
 800ac44:	e000ed88 	.word	0xe000ed88

0800ac48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac4e:	f3ef 8305 	mrs	r3, IPSR
 800ac52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b0f      	cmp	r3, #15
 800ac58:	d915      	bls.n	800ac86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac5a:	4a18      	ldr	r2, [pc, #96]	@ (800acbc <vPortValidateInterruptPriority+0x74>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac64:	4b16      	ldr	r3, [pc, #88]	@ (800acc0 <vPortValidateInterruptPriority+0x78>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	7afa      	ldrb	r2, [r7, #11]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d20b      	bcs.n	800ac86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac86:	4b0f      	ldr	r3, [pc, #60]	@ (800acc4 <vPortValidateInterruptPriority+0x7c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ac8e:	4b0e      	ldr	r3, [pc, #56]	@ (800acc8 <vPortValidateInterruptPriority+0x80>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d90b      	bls.n	800acae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	603b      	str	r3, [r7, #0]
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	e7fd      	b.n	800acaa <vPortValidateInterruptPriority+0x62>
	}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	e000e3f0 	.word	0xe000e3f0
 800acc0:	20000564 	.word	0x20000564
 800acc4:	e000ed0c 	.word	0xe000ed0c
 800acc8:	20000568 	.word	0x20000568

0800accc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08a      	sub	sp, #40	@ 0x28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acd8:	f7ff f8f4 	bl	8009ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acdc:	4b5c      	ldr	r3, [pc, #368]	@ (800ae50 <pvPortMalloc+0x184>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ace4:	f000 f924 	bl	800af30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ace8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae54 <pvPortMalloc+0x188>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4013      	ands	r3, r2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f040 8095 	bne.w	800ae20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01e      	beq.n	800ad3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800acfc:	2208      	movs	r2, #8
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d015      	beq.n	800ad3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f023 0307 	bic.w	r3, r3, #7
 800ad14:	3308      	adds	r3, #8
 800ad16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <pvPortMalloc+0x6e>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	617b      	str	r3, [r7, #20]
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop
 800ad38:	e7fd      	b.n	800ad36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d06f      	beq.n	800ae20 <pvPortMalloc+0x154>
 800ad40:	4b45      	ldr	r3, [pc, #276]	@ (800ae58 <pvPortMalloc+0x18c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d86a      	bhi.n	800ae20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad4a:	4b44      	ldr	r3, [pc, #272]	@ (800ae5c <pvPortMalloc+0x190>)
 800ad4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad4e:	4b43      	ldr	r3, [pc, #268]	@ (800ae5c <pvPortMalloc+0x190>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad54:	e004      	b.n	800ad60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d903      	bls.n	800ad72 <pvPortMalloc+0xa6>
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f1      	bne.n	800ad56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad72:	4b37      	ldr	r3, [pc, #220]	@ (800ae50 <pvPortMalloc+0x184>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d051      	beq.n	800ae20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2208      	movs	r2, #8
 800ad82:	4413      	add	r3, r2
 800ad84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	1ad2      	subs	r2, r2, r3
 800ad96:	2308      	movs	r3, #8
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d920      	bls.n	800ade0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <pvPortMalloc+0xfc>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	613b      	str	r3, [r7, #16]
}
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	685a      	ldr	r2, [r3, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adda:	69b8      	ldr	r0, [r7, #24]
 800addc:	f000 f90a 	bl	800aff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ade0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae58 <pvPortMalloc+0x18c>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	4a1b      	ldr	r2, [pc, #108]	@ (800ae58 <pvPortMalloc+0x18c>)
 800adec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adee:	4b1a      	ldr	r3, [pc, #104]	@ (800ae58 <pvPortMalloc+0x18c>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <pvPortMalloc+0x194>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d203      	bcs.n	800ae02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800adfa:	4b17      	ldr	r3, [pc, #92]	@ (800ae58 <pvPortMalloc+0x18c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <pvPortMalloc+0x194>)
 800ae00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	4b13      	ldr	r3, [pc, #76]	@ (800ae54 <pvPortMalloc+0x188>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae16:	4b13      	ldr	r3, [pc, #76]	@ (800ae64 <pvPortMalloc+0x198>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4a11      	ldr	r2, [pc, #68]	@ (800ae64 <pvPortMalloc+0x198>)
 800ae1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae20:	f7ff f85e 	bl	8009ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <pvPortMalloc+0x17a>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	60fb      	str	r3, [r7, #12]
}
 800ae40:	bf00      	nop
 800ae42:	bf00      	nop
 800ae44:	e7fd      	b.n	800ae42 <pvPortMalloc+0x176>
	return pvReturn;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3728      	adds	r7, #40	@ 0x28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20004174 	.word	0x20004174
 800ae54:	20004188 	.word	0x20004188
 800ae58:	20004178 	.word	0x20004178
 800ae5c:	2000416c 	.word	0x2000416c
 800ae60:	2000417c 	.word	0x2000417c
 800ae64:	20004180 	.word	0x20004180

0800ae68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d04f      	beq.n	800af1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae7a:	2308      	movs	r3, #8
 800ae7c:	425b      	negs	r3, r3
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	4413      	add	r3, r2
 800ae82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	4b25      	ldr	r3, [pc, #148]	@ (800af24 <vPortFree+0xbc>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4013      	ands	r3, r2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <vPortFree+0x46>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	60fb      	str	r3, [r7, #12]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <vPortFree+0x66>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	60bb      	str	r3, [r7, #8]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	4b14      	ldr	r3, [pc, #80]	@ (800af24 <vPortFree+0xbc>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4013      	ands	r3, r2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d01e      	beq.n	800af1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d11a      	bne.n	800af1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	4b0e      	ldr	r3, [pc, #56]	@ (800af24 <vPortFree+0xbc>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	43db      	mvns	r3, r3
 800aeee:	401a      	ands	r2, r3
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aef4:	f7fe ffe6 	bl	8009ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	4b0a      	ldr	r3, [pc, #40]	@ (800af28 <vPortFree+0xc0>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4413      	add	r3, r2
 800af02:	4a09      	ldr	r2, [pc, #36]	@ (800af28 <vPortFree+0xc0>)
 800af04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af06:	6938      	ldr	r0, [r7, #16]
 800af08:	f000 f874 	bl	800aff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af0c:	4b07      	ldr	r3, [pc, #28]	@ (800af2c <vPortFree+0xc4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a06      	ldr	r2, [pc, #24]	@ (800af2c <vPortFree+0xc4>)
 800af14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af16:	f7fe ffe3 	bl	8009ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af1a:	bf00      	nop
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20004188 	.word	0x20004188
 800af28:	20004178 	.word	0x20004178
 800af2c:	20004184 	.word	0x20004184

0800af30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800af3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af3c:	4b27      	ldr	r3, [pc, #156]	@ (800afdc <prvHeapInit+0xac>)
 800af3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3307      	adds	r3, #7
 800af4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f023 0307 	bic.w	r3, r3, #7
 800af56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	4a1f      	ldr	r2, [pc, #124]	@ (800afdc <prvHeapInit+0xac>)
 800af60:	4413      	add	r3, r2
 800af62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af68:	4a1d      	ldr	r2, [pc, #116]	@ (800afe0 <prvHeapInit+0xb0>)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af6e:	4b1c      	ldr	r3, [pc, #112]	@ (800afe0 <prvHeapInit+0xb0>)
 800af70:	2200      	movs	r2, #0
 800af72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	4413      	add	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af7c:	2208      	movs	r2, #8
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1a9b      	subs	r3, r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f023 0307 	bic.w	r3, r3, #7
 800af8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4a15      	ldr	r2, [pc, #84]	@ (800afe4 <prvHeapInit+0xb4>)
 800af90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af92:	4b14      	ldr	r3, [pc, #80]	@ (800afe4 <prvHeapInit+0xb4>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2200      	movs	r2, #0
 800af98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af9a:	4b12      	ldr	r3, [pc, #72]	@ (800afe4 <prvHeapInit+0xb4>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afb0:	4b0c      	ldr	r3, [pc, #48]	@ (800afe4 <prvHeapInit+0xb4>)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4a0a      	ldr	r2, [pc, #40]	@ (800afe8 <prvHeapInit+0xb8>)
 800afbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	4a09      	ldr	r2, [pc, #36]	@ (800afec <prvHeapInit+0xbc>)
 800afc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afc8:	4b09      	ldr	r3, [pc, #36]	@ (800aff0 <prvHeapInit+0xc0>)
 800afca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800afce:	601a      	str	r2, [r3, #0]
}
 800afd0:	bf00      	nop
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	2000056c 	.word	0x2000056c
 800afe0:	2000416c 	.word	0x2000416c
 800afe4:	20004174 	.word	0x20004174
 800afe8:	2000417c 	.word	0x2000417c
 800afec:	20004178 	.word	0x20004178
 800aff0:	20004188 	.word	0x20004188

0800aff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800affc:	4b28      	ldr	r3, [pc, #160]	@ (800b0a0 <prvInsertBlockIntoFreeList+0xac>)
 800affe:	60fb      	str	r3, [r7, #12]
 800b000:	e002      	b.n	800b008 <prvInsertBlockIntoFreeList+0x14>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d8f7      	bhi.n	800b002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	4413      	add	r3, r2
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	429a      	cmp	r2, r3
 800b022:	d108      	bne.n	800b036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	441a      	add	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	441a      	add	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	d118      	bne.n	800b07c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	4b15      	ldr	r3, [pc, #84]	@ (800b0a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d00d      	beq.n	800b072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	441a      	add	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	e008      	b.n	800b084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b072:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	e003      	b.n	800b084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d002      	beq.n	800b092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b092:	bf00      	nop
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	2000416c 	.word	0x2000416c
 800b0a4:	20004174 	.word	0x20004174

0800b0a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	490e      	ldr	r1, [pc, #56]	@ (800b0e8 <MX_USB_HOST_Init+0x40>)
 800b0b0:	480e      	ldr	r0, [pc, #56]	@ (800b0ec <MX_USB_HOST_Init+0x44>)
 800b0b2:	f7fb fe47 	bl	8006d44 <USBH_Init>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b0bc:	f7f5 fc98 	bl	80009f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b0c0:	490b      	ldr	r1, [pc, #44]	@ (800b0f0 <MX_USB_HOST_Init+0x48>)
 800b0c2:	480a      	ldr	r0, [pc, #40]	@ (800b0ec <MX_USB_HOST_Init+0x44>)
 800b0c4:	f7fb ff13 	bl	8006eee <USBH_RegisterClass>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b0ce:	f7f5 fc8f 	bl	80009f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b0d2:	4806      	ldr	r0, [pc, #24]	@ (800b0ec <MX_USB_HOST_Init+0x44>)
 800b0d4:	f7fb ff97 	bl	8007006 <USBH_Start>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b0de:	f7f5 fc87 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b0e2:	bf00      	nop
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0800b0f5 	.word	0x0800b0f5
 800b0ec:	2000418c 	.word	0x2000418c
 800b0f0:	2000000c 	.word	0x2000000c

0800b0f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b100:	78fb      	ldrb	r3, [r7, #3]
 800b102:	3b01      	subs	r3, #1
 800b104:	2b04      	cmp	r3, #4
 800b106:	d819      	bhi.n	800b13c <USBH_UserProcess+0x48>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <USBH_UserProcess+0x1c>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b13d 	.word	0x0800b13d
 800b114:	0800b12d 	.word	0x0800b12d
 800b118:	0800b13d 	.word	0x0800b13d
 800b11c:	0800b135 	.word	0x0800b135
 800b120:	0800b125 	.word	0x0800b125
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b124:	4b09      	ldr	r3, [pc, #36]	@ (800b14c <USBH_UserProcess+0x58>)
 800b126:	2203      	movs	r2, #3
 800b128:	701a      	strb	r2, [r3, #0]
  break;
 800b12a:	e008      	b.n	800b13e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b12c:	4b07      	ldr	r3, [pc, #28]	@ (800b14c <USBH_UserProcess+0x58>)
 800b12e:	2202      	movs	r2, #2
 800b130:	701a      	strb	r2, [r3, #0]
  break;
 800b132:	e004      	b.n	800b13e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b134:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <USBH_UserProcess+0x58>)
 800b136:	2201      	movs	r2, #1
 800b138:	701a      	strb	r2, [r3, #0]
  break;
 800b13a:	e000      	b.n	800b13e <USBH_UserProcess+0x4a>

  default:
  break;
 800b13c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b13e:	bf00      	nop
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20004570 	.word	0x20004570

0800b150 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	@ 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	609a      	str	r2, [r3, #8]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b170:	d147      	bne.n	800b202 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	4b25      	ldr	r3, [pc, #148]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17a:	4a24      	ldr	r2, [pc, #144]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b17c:	f043 0301 	orr.w	r3, r3, #1
 800b180:	6313      	str	r3, [r2, #48]	@ 0x30
 800b182:	4b22      	ldr	r3, [pc, #136]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b18e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b194:	2300      	movs	r3, #0
 800b196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b19c:	f107 0314 	add.w	r3, r7, #20
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	481b      	ldr	r0, [pc, #108]	@ (800b210 <HAL_HCD_MspInit+0xc0>)
 800b1a4:	f7f5 ffd4 	bl	8001150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b1a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b1ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1ba:	230a      	movs	r3, #10
 800b1bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1be:	f107 0314 	add.w	r3, r7, #20
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4812      	ldr	r0, [pc, #72]	@ (800b210 <HAL_HCD_MspInit+0xc0>)
 800b1c6:	f7f5 ffc3 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1ca:	4b10      	ldr	r3, [pc, #64]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b1d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	4b0c      	ldr	r3, [pc, #48]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1de:	4a0b      	ldr	r2, [pc, #44]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b1e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b1e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1e6:	4b09      	ldr	r3, [pc, #36]	@ (800b20c <HAL_HCD_MspInit+0xbc>)
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	2105      	movs	r1, #5
 800b1f6:	2043      	movs	r0, #67	@ 0x43
 800b1f8:	f7f5 ff73 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1fc:	2043      	movs	r0, #67	@ 0x43
 800b1fe:	f7f5 ff8c 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b202:	bf00      	nop
 800b204:	3728      	adds	r7, #40	@ 0x28
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	40023800 	.word	0x40023800
 800b210:	40020000 	.word	0x40020000

0800b214 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b222:	4618      	mov	r0, r3
 800b224:	f7fc fba1 	bl	800796a <USBH_LL_IncTimer>
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fc fbe5 	bl	8007a0e <USBH_LL_Connect>
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fc fbfa 	bl	8007a54 <USBH_LL_Disconnect>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	70fb      	strb	r3, [r7, #3]
 800b274:	4613      	mov	r3, r2
 800b276:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fc fc2f 	bl	8007ae2 <USBH_LL_NotifyURBChange>
#endif
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fc fb8f 	bl	80079be <USBH_LL_PortEnabled>
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fc fb9b 	bl	80079f2 <USBH_LL_PortDisabled>
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d12a      	bne.n	800b32c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b2d6:	4a18      	ldr	r2, [pc, #96]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a15      	ldr	r2, [pc, #84]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2e6:	4b14      	ldr	r3, [pc, #80]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b2ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2ee:	4b12      	ldr	r3, [pc, #72]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2f0:	2208      	movs	r2, #8
 800b2f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2f4:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b338 <USBH_LL_Init+0x74>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b300:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <USBH_LL_Init+0x74>)
 800b302:	2202      	movs	r2, #2
 800b304:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b306:	4b0c      	ldr	r3, [pc, #48]	@ (800b338 <USBH_LL_Init+0x74>)
 800b308:	2200      	movs	r2, #0
 800b30a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b30c:	480a      	ldr	r0, [pc, #40]	@ (800b338 <USBH_LL_Init+0x74>)
 800b30e:	f7f6 f906 	bl	800151e <HAL_HCD_Init>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b318:	f7f5 fb6a 	bl	80009f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b31c:	4806      	ldr	r0, [pc, #24]	@ (800b338 <USBH_LL_Init+0x74>)
 800b31e:	f7f6 fd67 	bl	8001df0 <HAL_HCD_GetCurrentFrame>
 800b322:	4603      	mov	r3, r0
 800b324:	4619      	mov	r1, r3
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fc fb10 	bl	800794c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20004574 	.word	0x20004574

0800b33c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b352:	4618      	mov	r0, r3
 800b354:	f7f6 fcd4 	bl	8001d00 <HAL_HCD_Start>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 f95e 	bl	800b620 <USBH_Get_USB_Status>
 800b364:	4603      	mov	r3, r0
 800b366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b368:	7bbb      	ldrb	r3, [r7, #14]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f6 fcdc 	bl	8001d46 <HAL_HCD_Stop>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	4618      	mov	r0, r3
 800b396:	f000 f943 	bl	800b620 <USBH_Get_USB_Status>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f6 fd26 	bl	8001e0c <HAL_HCD_GetCurrentSpeed>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d00c      	beq.n	800b3e0 <USBH_LL_GetSpeed+0x38>
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d80d      	bhi.n	800b3e6 <USBH_LL_GetSpeed+0x3e>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <USBH_LL_GetSpeed+0x2c>
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d003      	beq.n	800b3da <USBH_LL_GetSpeed+0x32>
 800b3d2:	e008      	b.n	800b3e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d8:	e008      	b.n	800b3ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b3de:	e005      	b.n	800b3ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e4:	e002      	b.n	800b3ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ea:	bf00      	nop
  }
  return  speed;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7f6 fcb7 	bl	8001d80 <HAL_HCD_ResetPort>
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 f901 	bl	800b620 <USBH_Get_USB_Status>
 800b41e:	4603      	mov	r3, r0
 800b420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b422:	7bbb      	ldrb	r3, [r7, #14]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b43e:	78fa      	ldrb	r2, [r7, #3]
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f7f6 fcbf 	bl	8001dc6 <HAL_HCD_HC_GetXferCount>
 800b448:	4603      	mov	r3, r0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b452:	b590      	push	{r4, r7, lr}
 800b454:	b089      	sub	sp, #36	@ 0x24
 800b456:	af04      	add	r7, sp, #16
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	461a      	mov	r2, r3
 800b460:	4603      	mov	r3, r0
 800b462:	70fb      	strb	r3, [r7, #3]
 800b464:	460b      	mov	r3, r1
 800b466:	70bb      	strb	r3, [r7, #2]
 800b468:	4613      	mov	r3, r2
 800b46a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b47a:	787c      	ldrb	r4, [r7, #1]
 800b47c:	78ba      	ldrb	r2, [r7, #2]
 800b47e:	78f9      	ldrb	r1, [r7, #3]
 800b480:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4623      	mov	r3, r4
 800b492:	f7f6 f8ab 	bl	80015ec <HAL_HCD_HC_Init>
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f8bf 	bl	800b620 <USBH_Get_USB_Status>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}

0800b4b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7f6 f944 	bl	800175c <HAL_HCD_HC_Halt>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 f8a0 	bl	800b620 <USBH_Get_USB_Status>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4ee:	b590      	push	{r4, r7, lr}
 800b4f0:	b089      	sub	sp, #36	@ 0x24
 800b4f2:	af04      	add	r7, sp, #16
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	70fb      	strb	r3, [r7, #3]
 800b500:	460b      	mov	r3, r1
 800b502:	70bb      	strb	r3, [r7, #2]
 800b504:	4613      	mov	r3, r2
 800b506:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b508:	2300      	movs	r3, #0
 800b50a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b50c:	2300      	movs	r3, #0
 800b50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b516:	787c      	ldrb	r4, [r7, #1]
 800b518:	78ba      	ldrb	r2, [r7, #2]
 800b51a:	78f9      	ldrb	r1, [r7, #3]
 800b51c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b520:	9303      	str	r3, [sp, #12]
 800b522:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b524:	9302      	str	r3, [sp, #8]
 800b526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	4623      	mov	r3, r4
 800b532:	f7f6 f937 	bl	80017a4 <HAL_HCD_HC_SubmitRequest>
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 f86f 	bl	800b620 <USBH_Get_USB_Status>
 800b542:	4603      	mov	r3, r0
 800b544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b546:	7bbb      	ldrb	r3, [r7, #14]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd90      	pop	{r4, r7, pc}

0800b550 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b562:	78fa      	ldrb	r2, [r7, #3]
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f7f6 fc18 	bl	8001d9c <HAL_HCD_HC_GetURBState>
 800b56c:	4603      	mov	r3, r0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	460b      	mov	r3, r1
 800b580:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d103      	bne.n	800b594 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 f872 	bl	800b678 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b594:	20c8      	movs	r0, #200	@ 0xc8
 800b596:	f7f5 fca5 	bl	8000ee4 <HAL_Delay>
  return USBH_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	68f9      	ldr	r1, [r7, #12]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	1a9b      	subs	r3, r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3317      	adds	r3, #23
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b5d2:	78fa      	ldrb	r2, [r7, #3]
 800b5d4:	68f9      	ldr	r1, [r7, #12]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	333c      	adds	r3, #60	@ 0x3c
 800b5e2:	78ba      	ldrb	r2, [r7, #2]
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	e009      	b.n	800b5fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b5e8:	78fa      	ldrb	r2, [r7, #3]
 800b5ea:	68f9      	ldr	r1, [r7, #12]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	011b      	lsls	r3, r3, #4
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	333d      	adds	r3, #61	@ 0x3d
 800b5f8:	78ba      	ldrb	r2, [r7, #2]
 800b5fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b082      	sub	sp, #8
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7f5 fc66 	bl	8000ee4 <HAL_Delay>
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	2b03      	cmp	r3, #3
 800b632:	d817      	bhi.n	800b664 <USBH_Get_USB_Status+0x44>
 800b634:	a201      	add	r2, pc, #4	@ (adr r2, 800b63c <USBH_Get_USB_Status+0x1c>)
 800b636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63a:	bf00      	nop
 800b63c:	0800b64d 	.word	0x0800b64d
 800b640:	0800b653 	.word	0x0800b653
 800b644:	0800b659 	.word	0x0800b659
 800b648:	0800b65f 	.word	0x0800b65f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b64c:	2300      	movs	r3, #0
 800b64e:	73fb      	strb	r3, [r7, #15]
    break;
 800b650:	e00b      	b.n	800b66a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b652:	2302      	movs	r3, #2
 800b654:	73fb      	strb	r3, [r7, #15]
    break;
 800b656:	e008      	b.n	800b66a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
    break;
 800b65c:	e005      	b.n	800b66a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b65e:	2302      	movs	r3, #2
 800b660:	73fb      	strb	r3, [r7, #15]
    break;
 800b662:	e002      	b.n	800b66a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b664:	2302      	movs	r3, #2
 800b666:	73fb      	strb	r3, [r7, #15]
    break;
 800b668:	bf00      	nop
  }
  return usb_status;
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]
 800b690:	e001      	b.n	800b696 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b692:	2301      	movs	r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	461a      	mov	r2, r3
 800b69a:	2101      	movs	r1, #1
 800b69c:	4803      	ldr	r0, [pc, #12]	@ (800b6ac <MX_DriverVbusFS+0x34>)
 800b69e:	f7f5 ff0b 	bl	80014b8 <HAL_GPIO_WritePin>
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	40020800 	.word	0x40020800

0800b6b0 <malloc>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	@ (800b6bc <malloc+0xc>)
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	f000 b82d 	b.w	800b714 <_malloc_r>
 800b6ba:	bf00      	nop
 800b6bc:	20000030 	.word	0x20000030

0800b6c0 <free>:
 800b6c0:	4b02      	ldr	r3, [pc, #8]	@ (800b6cc <free+0xc>)
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	6818      	ldr	r0, [r3, #0]
 800b6c6:	f000 b903 	b.w	800b8d0 <_free_r>
 800b6ca:	bf00      	nop
 800b6cc:	20000030 	.word	0x20000030

0800b6d0 <sbrk_aligned>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800b710 <sbrk_aligned+0x40>)
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	6831      	ldr	r1, [r6, #0]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	b911      	cbnz	r1, 800b6e2 <sbrk_aligned+0x12>
 800b6dc:	f000 f8ae 	bl	800b83c <_sbrk_r>
 800b6e0:	6030      	str	r0, [r6, #0]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 f8a9 	bl	800b83c <_sbrk_r>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d103      	bne.n	800b6f6 <sbrk_aligned+0x26>
 800b6ee:	f04f 34ff 	mov.w	r4, #4294967295
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	1cc4      	adds	r4, r0, #3
 800b6f8:	f024 0403 	bic.w	r4, r4, #3
 800b6fc:	42a0      	cmp	r0, r4
 800b6fe:	d0f8      	beq.n	800b6f2 <sbrk_aligned+0x22>
 800b700:	1a21      	subs	r1, r4, r0
 800b702:	4628      	mov	r0, r5
 800b704:	f000 f89a 	bl	800b83c <_sbrk_r>
 800b708:	3001      	adds	r0, #1
 800b70a:	d1f2      	bne.n	800b6f2 <sbrk_aligned+0x22>
 800b70c:	e7ef      	b.n	800b6ee <sbrk_aligned+0x1e>
 800b70e:	bf00      	nop
 800b710:	20004954 	.word	0x20004954

0800b714 <_malloc_r>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	1ccd      	adds	r5, r1, #3
 800b71a:	f025 0503 	bic.w	r5, r5, #3
 800b71e:	3508      	adds	r5, #8
 800b720:	2d0c      	cmp	r5, #12
 800b722:	bf38      	it	cc
 800b724:	250c      	movcc	r5, #12
 800b726:	2d00      	cmp	r5, #0
 800b728:	4606      	mov	r6, r0
 800b72a:	db01      	blt.n	800b730 <_malloc_r+0x1c>
 800b72c:	42a9      	cmp	r1, r5
 800b72e:	d904      	bls.n	800b73a <_malloc_r+0x26>
 800b730:	230c      	movs	r3, #12
 800b732:	6033      	str	r3, [r6, #0]
 800b734:	2000      	movs	r0, #0
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b810 <_malloc_r+0xfc>
 800b73e:	f000 f869 	bl	800b814 <__malloc_lock>
 800b742:	f8d8 3000 	ldr.w	r3, [r8]
 800b746:	461c      	mov	r4, r3
 800b748:	bb44      	cbnz	r4, 800b79c <_malloc_r+0x88>
 800b74a:	4629      	mov	r1, r5
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7ff ffbf 	bl	800b6d0 <sbrk_aligned>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	4604      	mov	r4, r0
 800b756:	d158      	bne.n	800b80a <_malloc_r+0xf6>
 800b758:	f8d8 4000 	ldr.w	r4, [r8]
 800b75c:	4627      	mov	r7, r4
 800b75e:	2f00      	cmp	r7, #0
 800b760:	d143      	bne.n	800b7ea <_malloc_r+0xd6>
 800b762:	2c00      	cmp	r4, #0
 800b764:	d04b      	beq.n	800b7fe <_malloc_r+0xea>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	4639      	mov	r1, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	eb04 0903 	add.w	r9, r4, r3
 800b770:	f000 f864 	bl	800b83c <_sbrk_r>
 800b774:	4581      	cmp	r9, r0
 800b776:	d142      	bne.n	800b7fe <_malloc_r+0xea>
 800b778:	6821      	ldr	r1, [r4, #0]
 800b77a:	1a6d      	subs	r5, r5, r1
 800b77c:	4629      	mov	r1, r5
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff ffa6 	bl	800b6d0 <sbrk_aligned>
 800b784:	3001      	adds	r0, #1
 800b786:	d03a      	beq.n	800b7fe <_malloc_r+0xea>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	442b      	add	r3, r5
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	f8d8 3000 	ldr.w	r3, [r8]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	bb62      	cbnz	r2, 800b7f0 <_malloc_r+0xdc>
 800b796:	f8c8 7000 	str.w	r7, [r8]
 800b79a:	e00f      	b.n	800b7bc <_malloc_r+0xa8>
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	1b52      	subs	r2, r2, r5
 800b7a0:	d420      	bmi.n	800b7e4 <_malloc_r+0xd0>
 800b7a2:	2a0b      	cmp	r2, #11
 800b7a4:	d917      	bls.n	800b7d6 <_malloc_r+0xc2>
 800b7a6:	1961      	adds	r1, r4, r5
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	6025      	str	r5, [r4, #0]
 800b7ac:	bf18      	it	ne
 800b7ae:	6059      	strne	r1, [r3, #4]
 800b7b0:	6863      	ldr	r3, [r4, #4]
 800b7b2:	bf08      	it	eq
 800b7b4:	f8c8 1000 	streq.w	r1, [r8]
 800b7b8:	5162      	str	r2, [r4, r5]
 800b7ba:	604b      	str	r3, [r1, #4]
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f000 f82f 	bl	800b820 <__malloc_unlock>
 800b7c2:	f104 000b 	add.w	r0, r4, #11
 800b7c6:	1d23      	adds	r3, r4, #4
 800b7c8:	f020 0007 	bic.w	r0, r0, #7
 800b7cc:	1ac2      	subs	r2, r0, r3
 800b7ce:	bf1c      	itt	ne
 800b7d0:	1a1b      	subne	r3, r3, r0
 800b7d2:	50a3      	strne	r3, [r4, r2]
 800b7d4:	e7af      	b.n	800b736 <_malloc_r+0x22>
 800b7d6:	6862      	ldr	r2, [r4, #4]
 800b7d8:	42a3      	cmp	r3, r4
 800b7da:	bf0c      	ite	eq
 800b7dc:	f8c8 2000 	streq.w	r2, [r8]
 800b7e0:	605a      	strne	r2, [r3, #4]
 800b7e2:	e7eb      	b.n	800b7bc <_malloc_r+0xa8>
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	6864      	ldr	r4, [r4, #4]
 800b7e8:	e7ae      	b.n	800b748 <_malloc_r+0x34>
 800b7ea:	463c      	mov	r4, r7
 800b7ec:	687f      	ldr	r7, [r7, #4]
 800b7ee:	e7b6      	b.n	800b75e <_malloc_r+0x4a>
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d1fb      	bne.n	800b7f0 <_malloc_r+0xdc>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6053      	str	r3, [r2, #4]
 800b7fc:	e7de      	b.n	800b7bc <_malloc_r+0xa8>
 800b7fe:	230c      	movs	r3, #12
 800b800:	6033      	str	r3, [r6, #0]
 800b802:	4630      	mov	r0, r6
 800b804:	f000 f80c 	bl	800b820 <__malloc_unlock>
 800b808:	e794      	b.n	800b734 <_malloc_r+0x20>
 800b80a:	6005      	str	r5, [r0, #0]
 800b80c:	e7d6      	b.n	800b7bc <_malloc_r+0xa8>
 800b80e:	bf00      	nop
 800b810:	20004958 	.word	0x20004958

0800b814 <__malloc_lock>:
 800b814:	4801      	ldr	r0, [pc, #4]	@ (800b81c <__malloc_lock+0x8>)
 800b816:	f000 b84b 	b.w	800b8b0 <__retarget_lock_acquire_recursive>
 800b81a:	bf00      	nop
 800b81c:	20004a98 	.word	0x20004a98

0800b820 <__malloc_unlock>:
 800b820:	4801      	ldr	r0, [pc, #4]	@ (800b828 <__malloc_unlock+0x8>)
 800b822:	f000 b846 	b.w	800b8b2 <__retarget_lock_release_recursive>
 800b826:	bf00      	nop
 800b828:	20004a98 	.word	0x20004a98

0800b82c <memset>:
 800b82c:	4402      	add	r2, r0
 800b82e:	4603      	mov	r3, r0
 800b830:	4293      	cmp	r3, r2
 800b832:	d100      	bne.n	800b836 <memset+0xa>
 800b834:	4770      	bx	lr
 800b836:	f803 1b01 	strb.w	r1, [r3], #1
 800b83a:	e7f9      	b.n	800b830 <memset+0x4>

0800b83c <_sbrk_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d06      	ldr	r5, [pc, #24]	@ (800b858 <_sbrk_r+0x1c>)
 800b840:	2300      	movs	r3, #0
 800b842:	4604      	mov	r4, r0
 800b844:	4608      	mov	r0, r1
 800b846:	602b      	str	r3, [r5, #0]
 800b848:	f7f5 fa68 	bl	8000d1c <_sbrk>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_sbrk_r+0x1a>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_sbrk_r+0x1a>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20004a94 	.word	0x20004a94

0800b85c <__errno>:
 800b85c:	4b01      	ldr	r3, [pc, #4]	@ (800b864 <__errno+0x8>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000030 	.word	0x20000030

0800b868 <__libc_init_array>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4d0d      	ldr	r5, [pc, #52]	@ (800b8a0 <__libc_init_array+0x38>)
 800b86c:	4c0d      	ldr	r4, [pc, #52]	@ (800b8a4 <__libc_init_array+0x3c>)
 800b86e:	1b64      	subs	r4, r4, r5
 800b870:	10a4      	asrs	r4, r4, #2
 800b872:	2600      	movs	r6, #0
 800b874:	42a6      	cmp	r6, r4
 800b876:	d109      	bne.n	800b88c <__libc_init_array+0x24>
 800b878:	4d0b      	ldr	r5, [pc, #44]	@ (800b8a8 <__libc_init_array+0x40>)
 800b87a:	4c0c      	ldr	r4, [pc, #48]	@ (800b8ac <__libc_init_array+0x44>)
 800b87c:	f000 f872 	bl	800b964 <_init>
 800b880:	1b64      	subs	r4, r4, r5
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	2600      	movs	r6, #0
 800b886:	42a6      	cmp	r6, r4
 800b888:	d105      	bne.n	800b896 <__libc_init_array+0x2e>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b890:	4798      	blx	r3
 800b892:	3601      	adds	r6, #1
 800b894:	e7ee      	b.n	800b874 <__libc_init_array+0xc>
 800b896:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89a:	4798      	blx	r3
 800b89c:	3601      	adds	r6, #1
 800b89e:	e7f2      	b.n	800b886 <__libc_init_array+0x1e>
 800b8a0:	0800ba08 	.word	0x0800ba08
 800b8a4:	0800ba08 	.word	0x0800ba08
 800b8a8:	0800ba08 	.word	0x0800ba08
 800b8ac:	0800ba0c 	.word	0x0800ba0c

0800b8b0 <__retarget_lock_acquire_recursive>:
 800b8b0:	4770      	bx	lr

0800b8b2 <__retarget_lock_release_recursive>:
 800b8b2:	4770      	bx	lr

0800b8b4 <memcpy>:
 800b8b4:	440a      	add	r2, r1
 800b8b6:	4291      	cmp	r1, r2
 800b8b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8bc:	d100      	bne.n	800b8c0 <memcpy+0xc>
 800b8be:	4770      	bx	lr
 800b8c0:	b510      	push	{r4, lr}
 800b8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ca:	4291      	cmp	r1, r2
 800b8cc:	d1f9      	bne.n	800b8c2 <memcpy+0xe>
 800b8ce:	bd10      	pop	{r4, pc}

0800b8d0 <_free_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4605      	mov	r5, r0
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	d041      	beq.n	800b95c <_free_r+0x8c>
 800b8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8dc:	1f0c      	subs	r4, r1, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfb8      	it	lt
 800b8e2:	18e4      	addlt	r4, r4, r3
 800b8e4:	f7ff ff96 	bl	800b814 <__malloc_lock>
 800b8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b960 <_free_r+0x90>)
 800b8ea:	6813      	ldr	r3, [r2, #0]
 800b8ec:	b933      	cbnz	r3, 800b8fc <_free_r+0x2c>
 800b8ee:	6063      	str	r3, [r4, #4]
 800b8f0:	6014      	str	r4, [r2, #0]
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8f8:	f7ff bf92 	b.w	800b820 <__malloc_unlock>
 800b8fc:	42a3      	cmp	r3, r4
 800b8fe:	d908      	bls.n	800b912 <_free_r+0x42>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	1821      	adds	r1, r4, r0
 800b904:	428b      	cmp	r3, r1
 800b906:	bf01      	itttt	eq
 800b908:	6819      	ldreq	r1, [r3, #0]
 800b90a:	685b      	ldreq	r3, [r3, #4]
 800b90c:	1809      	addeq	r1, r1, r0
 800b90e:	6021      	streq	r1, [r4, #0]
 800b910:	e7ed      	b.n	800b8ee <_free_r+0x1e>
 800b912:	461a      	mov	r2, r3
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	b10b      	cbz	r3, 800b91c <_free_r+0x4c>
 800b918:	42a3      	cmp	r3, r4
 800b91a:	d9fa      	bls.n	800b912 <_free_r+0x42>
 800b91c:	6811      	ldr	r1, [r2, #0]
 800b91e:	1850      	adds	r0, r2, r1
 800b920:	42a0      	cmp	r0, r4
 800b922:	d10b      	bne.n	800b93c <_free_r+0x6c>
 800b924:	6820      	ldr	r0, [r4, #0]
 800b926:	4401      	add	r1, r0
 800b928:	1850      	adds	r0, r2, r1
 800b92a:	4283      	cmp	r3, r0
 800b92c:	6011      	str	r1, [r2, #0]
 800b92e:	d1e0      	bne.n	800b8f2 <_free_r+0x22>
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	6053      	str	r3, [r2, #4]
 800b936:	4408      	add	r0, r1
 800b938:	6010      	str	r0, [r2, #0]
 800b93a:	e7da      	b.n	800b8f2 <_free_r+0x22>
 800b93c:	d902      	bls.n	800b944 <_free_r+0x74>
 800b93e:	230c      	movs	r3, #12
 800b940:	602b      	str	r3, [r5, #0]
 800b942:	e7d6      	b.n	800b8f2 <_free_r+0x22>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	1821      	adds	r1, r4, r0
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf04      	itt	eq
 800b94c:	6819      	ldreq	r1, [r3, #0]
 800b94e:	685b      	ldreq	r3, [r3, #4]
 800b950:	6063      	str	r3, [r4, #4]
 800b952:	bf04      	itt	eq
 800b954:	1809      	addeq	r1, r1, r0
 800b956:	6021      	streq	r1, [r4, #0]
 800b958:	6054      	str	r4, [r2, #4]
 800b95a:	e7ca      	b.n	800b8f2 <_free_r+0x22>
 800b95c:	bd38      	pop	{r3, r4, r5, pc}
 800b95e:	bf00      	nop
 800b960:	20004958 	.word	0x20004958

0800b964 <_init>:
 800b964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b966:	bf00      	nop
 800b968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96a:	bc08      	pop	{r3}
 800b96c:	469e      	mov	lr, r3
 800b96e:	4770      	bx	lr

0800b970 <_fini>:
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b972:	bf00      	nop
 800b974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b976:	bc08      	pop	{r3}
 800b978:	469e      	mov	lr, r3
 800b97a:	4770      	bx	lr
